<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Template</title>
      <link href="/HEXO/2025/09/16/%E3%80%90Template%E3%80%91C/"/>
      <url>/HEXO/2025/09/16/%E3%80%90Template%E3%80%91C/</url>
      
        <content type="html"><![CDATA[<h1>参数说明</h1><p>title【必需】文章標題<br>date【必需】文章創建日期<br>updated【可選】文章更新日期<br>tags【可選】文章標籤<br>categories【可選】文章分類<br>keywords【可選】文章關鍵字<br>description【可選】文章描述<br>top_img【可選】文章頂部圖片<br>cover【可選】文章縮略圖(如果沒有設置 top_img,文章頁頂部將顯示縮略圖，可設為 false/圖片地址/留空)<br>comments【可選】顯示文章評論模塊(默認 true)<br>toc【可選】顯示文章 TOC(默認為設置中 toc 的 enable 配置)<br>toc_number【可選】顯示 toc_number(默認為設置中 toc 的 number 配置)<br>toc_style_simple【可選】顯示 toc 簡潔模式<br>copyright【可選】顯示文章版權模塊(默認為設置中 post_copyright 的 enable 配置)<br>copyright_author【可選】文章版權模塊的文章作者<br>copyright_author_href【可選】文章版權模塊的文章作者鏈接<br>copyright_url【可選】文章版權模塊的文章連結鏈接<br>copyright_info【可選】文章版權模塊的版權聲明文字<br>mathjax【可選】顯示 mathjax(當設置 mathjax 的 per_page: false 時，才需要配置，默認 false )<br>katex【可選】顯示 katex (當設置 katex 的 per_page: false 時，才需要配置，默認 false )<br>aplayer【可選】在需要的頁面加載 aplayer 的 js 和 css,請參考文章下面的音樂 配置<br>highlight_shrink【可選】配置代碼框是否展開(true/false)(默認為設置中 highlight_shrink 的配置)<br>aside【可選】顯示側邊欄 (默認 true)<br>abcjs【可選】加載 abcjs (當設置 abcjs 的 per_page: false 時，才需要配置，默認 false )<br>noticeOutdate【可選】文章過期提醒 (默認為設置中 noticeOutdate 的 enable 配置)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> others </tag>
            
            <tag> 博客模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【收藏】知识库</title>
      <link href="/HEXO/2025/09/15/%E3%80%90%E6%94%B6%E8%97%8F%E3%80%91%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
      <url>/HEXO/2025/09/15/%E3%80%90%E6%94%B6%E8%97%8F%E3%80%91%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1>精品博客</h1><p><a href="https://mp.weixin.qq.com/s/qs1iqAlHPYoe3bKMhf0Lvg">C++手撕线程池实现全解析</a></p><p><a href="https://mp.weixin.qq.com/s/YrfvEuz4OhaE5iecl5wSbA">C++Mutex的底层原理</a></p><p><a href="https://mp.weixin.qq.com/s/7E7h0LnkrK1mnpZ-JAwktA">inline函数与函数调用开销</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 知识 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/HEXO/2025/09/15/hello-world/"/>
      <url>/HEXO/2025/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【life】experience</title>
      <link href="/HEXO/2025/09/15/%E3%80%90life%E3%80%91experience/"/>
      <url>/HEXO/2025/09/15/%E3%80%90life%E3%80%91experience/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1>学习</h1><ul><li><p>利用<strong>时间命名文件</strong>可以做到很好的分类</p><p>e.g 这样一眼就可以看出来我的博客文件，带时间的会自动排在一块，且为普通博客，<br>不带时间的会自动排在顶部，且为特殊[收藏/归纳]博客，<br>除分类外，<strong>文件的命名对网页渲染没有任何影响</strong>，perfect！</p></li></ul><h1>心理</h1><ul><li>内耗改成外耗<br>别人让我不高兴，是别人的问题，不是我有问题；别人有麻烦会自己找上门，而不是我认为会麻烦到别人。</li></ul><h1>社交</h1><ul><li>你的经验很贵，不要无偿分享给他人</li></ul><h1>财经</h1><ul><li>解决所有债务》》打工》分账户存钱》》利用未来的账户钱生钱【稳定利少，慢慢来】》》》rich</li></ul><h1>琐事</h1><ul><li>不要在使用广电卡了，200kb/s，卡的要死</li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/HEXO/2025/09/07/001%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/HEXO/2025/09/07/001%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="阻塞IO和非阻塞IO">阻塞IO和非阻塞IO</h2><ul><li><strong>阻塞的文件描述符</strong>为阻塞IO</li><li>非阻塞的文件描述符为非阻塞IO</li></ul><h2 id="同步IO和异步IO">同步IO和异步IO</h2><ul><li>同步IO向应用程序通知的是<strong>IO就绪事件</strong>。要求用户代码自行执行读写操作，将数据从内核缓冲区读入用户缓冲区。</li><li>异步IO向应用程序通知的是<strong>IO完成事件</strong> 。由内核来执行IO读写操作。在linux环境下，aio.h头文件定义的函数提供了对异步IO的支持。</li></ul><h2 id="事件处理模式">事件处理模式</h2><ol><li>reactor 同步IO模型通常用于实现reactor模式。要求主线程只负责监听文件描述符是否有事件发生，有的话就立即将该事件通知工作线程。</li><li>proactor 异步IO模型通常用于实现proactor模式。也可以用同步IO模拟出proactor模式。proactor将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。</li></ol><h2 id="Reactor模式的工作流程">Reactor模式的工作流程</h2><ol><li>主线程往epoll内核事件表中注册socket上的就绪事件。</li><li>主线程调用epoll_wait等待socket上有数据可读。</li><li>当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。</li><li>睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。</li><li>主线程调用epoll_wait等待socket可写。</li><li>当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。</li><li>睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。</li></ol><h2 id="并发模式">并发模式</h2><ol><li><p>半同步半异步模式：同步线程用于处理客户逻辑，异步线程用于处理IO事件。异步线程监听到客户请求后，就将其封装成请求对象并插入到请求队列中，请求队列将通知某个工作在同步模式下的工作线程来读取并处理该请求对象。半同步半反应堆模式采用的事件处理模式是reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。半同步半反应堆也可以模拟proactor模式，即<strong>由主线程来完成数据的读写</strong>。在这种情况下，主线程会将应用程序数据，<strong>任务类型等信息封装为一个任务对象</strong>，<strong>然后将其插入请求队列</strong>。<strong>工作线程从请求对象取得任务对象以后，可直接处理无需执行读写操作。</strong></p><p>问题：主线程和工作线程共享请求队列需要加锁。工作线程较少时可能产生请求任务堆积。</p></li><li><p>领导者追随者模式</p></li></ol><ul><li><p>在IO模型中，同步和异步区分的是内核向应用程序通知的是何种事件，是就绪事件还是完成事件，以及该由谁来完成IO读写，是应用程序还是内核。</p></li><li><p>在并发模式中，同步指的是程序完全按照代码序列的顺序执行。异步指的是程序的执行需要由系统事件来驱动。常见的系统事件包括中断和信号。</p></li></ul><h2 id="虚拟地址空间">虚拟地址空间</h2><p>**虚拟地址是操作系统管理内存的一种方式。**方便不同进程使用的虚拟地址彼此隔离。方便物理内存中不相邻的内存在虚拟地址上视为连续的来使用。<strong>虚拟地址和物理地址的映射是通过MMU页表进行的</strong>。虚拟内存对实际内存有保护作用。</p><h2 id="什么是进程">什么是进程</h2><p><strong>进程是系统进行资源分配的基本单位，是程序加载到内存后的执行过程。<strong>进程一般由数据段，代码段和进程控制块三部分组成。系统通过进程控制块感知进程的存在并对进程进行控制。由于</strong>进程之间空间相互独立</strong>，多进程比多线程更安全，一个进程基本上不会影响另外一个进程。</p><h2 id="进程三种状态">进程三种状态</h2><ol><li>创建：创建PCB</li><li><strong>就绪</strong></li><li><strong>运行</strong></li><li><strong>阻塞</strong></li><li>终止: 归还PCB</li></ol><h2 id="什么是线程">什么是线程</h2><p><strong>线程是CPU调度的基本单位。<strong>一个进程可以包含多个线程，<strong>线程自己基本不拥有系统资源</strong>，但是它可以和同属于一个进程的其他线程共享进程所拥有的全部资源。多线程之间对内存共享，线程间通信可以直接基于</strong>共享内存</strong>来实现，比多进程之间通信更轻量。多线程之间切换<strong>不需要切换虚拟内存空间、文件描述符</strong>等，所以线程的上下文切换也比多进程轻量。</p><p>进程fork以后，遵循<strong>读时共享写时复制</strong>的机制。</p><p>父子进程长期共享：<strong>文件描述符和mmap建立的映射区。</strong></p><p>子进程的<strong>进程ID，定时器，未决信号集和父进程不同</strong>。</p><h2 id="多进程和多线程的应用场景">多进程和多线程的应用场景</h2><ol><li><p>一般不同任务间需要大量的通信，使用多线程的场景比多进程多。<strong>IO密集型。</strong></p></li><li><p>但是多进程有更高的容错性，一个进程的崩溃不会导致整个系统的崩溃，<strong>在任务安全性较高的情况下</strong>，采用多进程。<strong>CPU密集型。</strong></p></li></ol><h2 id="进程线程的本质区别">进程线程的本质区别</h2><ol><li>进程<strong>更安全</strong>，一个进程完全不会影响另外的进程。</li><li>进程间通信比线程间<strong>通信的性能差</strong>很多。</li><li>线程切换开销更低。</li></ol><h2 id="IPC进程间通信55555555555">IPC进程间通信55555555555</h2><ol><li><strong>无名管道pipe（血缘关系的进程）</strong></li><li><strong>有名管道fifo （无血缘关系的进程）</strong></li><li><strong>共享内存</strong></li><li><strong>信号(开销小)</strong></li><li><strong>消息队列</strong></li><li>信号量</li><li>套接字</li></ol><h2 id="进程间同步">进程间同步</h2><ol><li>文件锁</li><li>信号量</li></ol><h2 id="线程间同步">线程间同步</h2><ol><li>互斥锁</li><li>读写锁(读时共享，写时互斥)</li><li>条件变量</li><li>信号量(互斥锁的升级版)</li><li>自旋锁(可以避免进程或线程上下文的开销)</li></ol><h2 id="线程共享资源">线程共享资源</h2><ol><li>文件描述符表（打开的文件）</li><li><strong>进程用户ID和进程组ID</strong></li><li>进程的**内存地址空间.**text代码段 .data数据段 .bss heap堆区 <strong>全局变量 静态变量</strong></li><li><strong>每种信号的处理方式</strong></li><li><strong>进程的当前目录</strong></li></ol><h2 id="线程独享资源">线程独享资源</h2><ol><li><strong>线程栈</strong></li><li><strong>寄存器组的值</strong></li><li>线程ID</li><li>错误返回码errno变量</li><li><strong>线程信号屏蔽字</strong></li><li><strong>线程优先级</strong></li></ol><h2 id="进程调度方式">进程调度方式</h2><ol><li>抢占式：立马停止。</li><li>非抢占式：时间片用完或者等待资源时，再调用另一个进程。</li></ol><h2 id="进程调度算法">进程调度算法</h2><ol><li>先来先服务</li><li>短作业优先</li><li>优先级调度</li><li>时间片轮转</li><li>高响应比优先</li></ol><h2 id="管道">管道</h2><p><strong>管道是一种伪文件</strong>，<strong>实质为内核缓冲区 大小为4K 内核借用环形队列实现</strong></p><p>管道是半双工的，数据只能单向流动，不可重复读取，<strong>只能用于有血缘关系的进程</strong></p><h2 id="Linux命令">Linux命令</h2><ol><li>find命令，用来查找文件。常用的按照名字查找-name，按照文件类型查找-type，linux常用的文件类型有七种，普通文件，目录文件，管道，套接字，软链接，块设备，字符设备。还可以按照文件大小查询-size。</li><li>grep命令，按照文件内容来查找。使用规则是grep option pattern file</li><li>ps aux</li><li>curl命令 访问一个网页</li><li><strong>df查看磁盘大小</strong></li><li><strong>du查看目录大小</strong></li><li><strong>free -h 查看内存大小和使用情况</strong></li><li><strong>top查看系统的实时负载</strong></li><li><strong>netstat -ta 查看监听的TCP</strong></li><li>stat 获取文件属性</li><li><strong>file 查看文件类型</strong></li><li>sudo iptables -L 查看防火墙状态</li><li>sudo vim etc/sysctl.conf 查看TCP属性</li></ol><h2 id="大端字节序和小端字节序">大端字节序和小端字节序</h2><ol><li>大端字节序：<strong>网络字节序（高位存低位）</strong></li><li>小端字节序：主机字节序，<strong>现代PC机</strong>采用小端字节序（低位存低位，高位存高位）</li></ol><blockquote><p>比如0x1f3f5f7f  地址0x1000 0x1001 0x1002 0x1003</p><p>大端法：7f存在0x1003 5f存0x1002 3f存0x1001 1f存0x1000 低存高</p><p>小端法：7f存在0x1000 5f存0x1001 3f存0x1002 1f存0x1003 低存低</p></blockquote><h2 id="socket服务器端所用函数">socket服务器端所用函数</h2><blockquote><p>socket 创建socket文件描述符 bind 绑定IP和端口号 listen 监听  accept 接受连接 处理客户端的业务</p></blockquote><h2 id="socket客户端所用函数">socket客户端所用函数</h2><blockquote><p>socket 创建套接字文件描述符 bind 绑定IP和端口号（也可以隐式绑定） connect 尝试连接服务器 处理服务器端的业务</p></blockquote><h2 id="五种网络IO模型">五种网络IO模型</h2><ol><li><p>同步阻塞IO</p></li><li><p>同步非阻塞IO</p></li><li><p>IO多路复用</p></li><li><p>信号驱动IO</p></li><li><p>异步IO</p></li></ol><h2 id="select与poll、epoll的各自的优缺点和区别">select与poll、epoll的各自的优缺点和区别</h2><ol><li>select是跨平台的，windows、linux、unix系统下都有</li><li>poll在linux和unix下有 epoll是linux特有，epoll的要义就是高效的监视多个socket</li><li>多路IO监听时没有动静，监听会休眠监听。</li></ol><h2 id="讲讲epoll的边沿触发和水平触发">讲讲epoll的边沿触发和水平触发</h2><ol><li><strong>水平触发：<strong>如果</strong>epoll_wait缓冲区有数据</strong>则直接返回。</li><li>边沿触发：<strong>如果一次没有读完epoll_wait缓冲区中的数据，则只有当另外有数据再写入时，才返回。</strong> 使用边沿触发和非阻塞IO来达到水平触发的效果，减少了epoll_wait的调用次数，提高了效率。 边沿触发可以只读取缓存区中前面的部分信息，进而分析后面的信息是否有用，如果无用则直接丢弃。</li></ol><h2 id="Libevent库">Libevent库</h2><p>是一个开源的库，封装了socket和IO多路转接，用于高并发服务器的开发。跨平台可移植性好。跨平台，线程安全，基于reactor模式实现的高效网络库。</p><h2 id="协程">协程</h2><p><strong>协程是一种用户态的轻量级线程。协程的开销远远小于线程的开销。</strong></p><p>协程是一种比线程更加轻量级的存在，一个线程可以拥有多个协程。 无论是进程还是线程，都是由操作系统所管理的。而协程不是被OS所管理，而完全是由程序所控制(也就是在用户态执行)。</p><h2 id="信号">信号</h2><p><strong>信号是一种不精确通信。</strong></p><p><strong>常用的信号有SIGKILL 9 无条件终止信号，SIGSEGV 11 无效存储访问 SIGPOLL 8 轮询事件信号。</strong></p><p>信号有三种处理方式：<strong>忽略，捕获，默认。</strong></p><p>kill命令向进程发送信号</p><h2 id="什么是死锁">什么是死锁</h2><p>因为资源调度的方式不合理或者资源的稀缺性，导致进程间的相互等待。</p><p>死锁的四个必要条件：<strong>互斥条件，请求和保持条件，环路等待条件，不可剥夺条件。</strong></p><p>死锁的预防只要破坏死锁产生的四个必要条件。通常采用<strong>预先静态分配方法</strong>，可以破坏请求和保持条件。</p><p><strong>死锁的避免：采用银行家算法，只要系统处于安全状态，系统便可避免死锁。</strong></p><p>死锁的解决：撤销进程，剥夺资源。</p><h2 id="僵尸进程和孤儿进程">僵尸进程和孤儿进程</h2><ol><li>僵尸进程：子进程死亡，而父进程没有进行回收   waitpid回收指定进程</li><li>孤儿进程：父进程死亡，而子进程仍然存活，但是系统会让init进程领养孤儿进程。</li></ol><h2 id="fork函数">fork函数</h2><p>fork函数用来创建子进程 一次调用，两次返回。<strong>在父进程中返回子进程的PID</strong>，在子进程中返回0</p><h2 id="exec族">exec族</h2><p><strong>在程序中调用另一个可执行程序，但是进程ID不改变。</strong></p><h2 id="网络编程IO">网络编程IO</h2><p>服务器通常需要处理三类事件：<strong>IO事件，信号及定时事件。</strong></p><p>事件处理模式：<strong>reactor和proactor</strong></p><p>同步IO模型通常用于实现reactor模式</p><p>异步IO则用于实现proactor模式</p><h2 id="什么是reactor模式">什么是reactor模式</h2><p>它要<strong>求主线程只负责监听文件描述符上是否有事件发生</strong>，有的话立即将该事件通知工作线程。读写数据，接受新的连接以及处理客户请求均在工作线程中完成。</p><h2 id="什么是proactor模式">什么是proactor模式</h2><p>它将所有<strong>IO操作都交给主线程和内核来处理</strong>，工作线程仅仅<strong>负责业务逻辑。</strong></p><h2 id="mmap存储映射">mmap存储映射</h2><p>将磁盘空间映射到进程空间，**使进程可以采用指针的方式操作这段内存，**而不用调用read和write函数。提高了读写的效率，同时也可以实现进程间的通信。</p><h2 id="异步IO原理">异步IO原理</h2><p>底层将数据准备好后，<strong>内核会给进程发送一个异步通知信号SIGIO29通知进程</strong>，然后进程调用信号处理函数去读数据，没准备好，数据就忙自己的事情。</p><h2 id="select-poll-epoll">select poll epoll</h2><ol><li><strong>select单个进程打开的文件描述符有上限</strong>，为1024或者2048。<strong>select对于有响应的事件需要轮询来查找满足要求的事件。每次调用select都需要把文件描述符集合从用户态拷贝到内核态。</strong></li><li>poll描述fd的集合是链式的，<strong>解决了打开文件描述符数量的限制</strong>。同样需要轮询满足事件的文件描述符。也需要进行用户态和内核态的文件描述符拷贝。poll是水平触发。</li><li>epoll使用了<strong>mmap内存映射技术</strong>和<strong>红黑树的数据结构</strong>。通过三个函数来监听多个文件描述符，同时不随数量的上升效率呈线性的下降。mmap内存读写快于IO读写，及时共享映射内存的改变。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/HEXO/2025/09/07/002%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/HEXO/2025/09/07/002%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP头部">TCP头部</h2><ol><li>16位源端口</li><li>16位目的端口</li><li>32位序号</li><li>32位确认序号</li><li>4位TCP头部长度  单位为4字节</li><li>6位标志位</li><li>16位滑动窗口</li><li>16位校验和</li><li>16位紧急指针</li></ol><p>注意：<strong>TCP的包没有IP地址</strong>，只有源端口和目的端口。一个TCP连接需要4个元组来表示一个连接。（源端口，目的端口，源IP，目的IP）</p><h2 id="为什么建立连接需要3次握手">为什么建立连接需要3次握手</h2><p>主要是初始化序列号和协商最大报文段长度。</p><h2 id="粘包问题">粘包问题</h2><p>udp不存在粘包的问题，因为udp是个数据包协议，也就是两段数据间有界限的。要么收不到，要么全收。</p><p>产生粘包的原因：nagle算法为了改善网络传输效率，延迟发送数据。应用层由于某些原因不能及时取出TCP的数据，导致TCP缓冲区存放了多段数据。</p><p>解决方式：封包和拆包。包头存放一个变量记录包体的长度。在所发送的内容前，加上发送内容的长度。</p><h2 id="HTTP原理">HTTP原理</h2><p>http协议是<strong>应用层</strong>协议，通过<strong>请求响应</strong>的方式在客户端和服务器端进行通信。</p><p>http协议是以明文的方式进行传输，并且是<strong>无状态</strong>的通信协议。</p><h2 id="http与https的区别">http与https的区别</h2><ol><li>传输方式：http是**明文传输，极易被监听和篡改。**而https加入了ssl层，数据经过了加密，从而保护了传输数据的隐私和完整性。</li><li>身份认证： http没有身份认证，而https经过证书颁发机构的多重认证。</li><li>连接端口：<strong>http为80  https为443</strong></li><li>实现成本：<strong>http基本没有成本，https需要申请证书，同时在加密解密上需要消耗更多的CPU资源，访问速度有可能降低。</strong></li><li>加锁的图标显示 谷歌和百度搜索的排名会对非https的排名有影响</li></ol><p>私钥能解密，但是不能确认是哪个客户端发送的消息，任何人都可以抵赖。为了防止抵赖，可以使用数字签名。</p><p><strong>https是http的安全版，在http的基础上增加了SSL安全层。</strong></p><p>基于性能的考虑，https一般使用非对称加密算法获得密钥，再用对称加密算法对消息内容进行加密。</p><p>https发送请求的过程：</p><ol><li>第一步，客户端和服务器端交换SSL版本和<strong>加密组件列表</strong>，同时服务器端将密钥和签名证书发给客户端。</li><li>第二步：客户端根据证书和密钥进行验证，通过以后协商传输的密钥。这一步使用非对称加密算法。</li><li>第三步：当双方都获得密钥，且校验码没有问题。则进行TCP三次握手，此时采用对称加密算法，提高效率。</li></ol><h2 id="http1-0-与-http1-1的区别">http1.0 与 http1.1的区别</h2><ol><li>**长连接：**HTTP 1.1支持长连接和请求的流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。</li><li><strong>带宽优化：</strong> <strong>HTTP/1.1中在请求消息中引入了range头域，它允许只请求资源的某个部分。</strong></li><li>**新增响应状态码：**100 continue 已经收到第一部分，正等待剩余部分。 101 switch protocols 服务器已确认切换协议。</li><li>**host头域：**允许物理主机上多个虚拟主机共享一个IP</li><li>缓存机制更灵活，新增control-cache头域</li><li>增加了5个请求方法：put delete connect options trace</li></ol><h2 id="get和post的区别">get和post的区别</h2><p>都是http的请求方式。</p><p>区别在于：</p><ol><li>**用途上：**get一般用于获取资源，post一般用于创建资源。</li><li>位置上：get请求的的数据会在<strong>地址栏上显示出来</strong>，以<strong>问号</strong>分割url与传输数据，多个参数用<strong>取地址符</strong>连接。而post的数据放在请求体中。</li><li>**安全性上：**优于get将信息显示在地址栏，所以对于用户密码等个人隐私信息很不安全，而post放在请求体中，在安全性上要稍微好点。</li><li>**长度限制：**get使用地址栏发送数据，而地址栏的长度是有限的。</li><li>**幂等性上：**get操作没有副作用，多次操作产生的副作用相同，所以get是幂等的，而post用于创建资源是会又副作用的，所以post不是幂等的。</li></ol><h2 id="cookie和session">cookie和session</h2><p><strong>cookie和session都是跟踪会话的机制。</strong></p><ol><li>**存储位置：**cookie保存在客户端用来记录信息和确定用户身份，session保存在服务端同样用来记录和确定身份。</li><li>**安全性：**cookie放在客户端很容易被查看或者破解，没有session安全。</li><li><strong>关联性：<strong>session的运行依赖于session id 而session id 存在cookie中。如果浏览器禁止了cookie，可以使用</strong>url地址重写来传递session id</strong></li><li>**性能上：**session会在有效期内存在于服务器的数据库或者文件，当请求过多时，服务器性能会下降。</li><li>**大小上：**单个cookie保存的大小不能超过4k</li></ol><p>使用cookie来管理session以弥补http中无状态特性。通过对set-cookie头域写入session ID可以免登录，提高访问的效率。</p><p>握手优化：<strong>session缓存， session key 放在内存，有内存消耗， 负载均衡后找不session key。session ticket 集群可以共享。</strong></p><h2 id="TCP和UDP的区别">TCP和UDP的区别</h2><ol><li>TCP: <strong>面向连接的安全的流式协议</strong>，连接的时候进行三次握手，数据发送的时候会进行数据确认，数据丢失之后，会进行数据重传。 确认和重传机制。</li><li>UDP: <strong>面向无连接的不安全的报文传输</strong>，发出去就不管了，收则全收，丢则全丢。</li></ol><h2 id="3次握手和4次挥手">3次握手和4次挥手</h2><p>TCP三次握手：客户端向服务器端：发送SYN=1和序号seq 服务器端向客户端：回应确定信号同意连接ACK=1以及自己的连接请求SYN=1还有序号seq 客户端回应服务器端：ACK=1告诉对方它已经知道了服务器端同意，连接成功。</p><p>TCP四次挥手：主动关闭方发送关闭信号，被动关闭方收到信号。然后进入半关闭状态，关闭的一方能接收数据但是不能发送数据。 等到另一个未关闭的一方，发起关闭信号以后，进入TIME_WAIT状态，等待对方2MSL之后，彻底关闭。</p><h2 id="3次握手55555555">3次握手55555555</h2><p>客户端发起连接，也就是C语言中的connect函数，发送一个SYN=1的标志位，同时携带一个序号。</p><p>服务器端有一个accept函数，用于响应连接。服务器端响应连接后回复一个ACK=1的标志位，并且也发送一个SYN=1的标志位建立连接。</p><p>客户端收到服务器端的ACK应答以后，说明建立成功。两者都同时进入established状态。同时accept和connect函数调用成功，并返回1。</p><h2 id="4次挥手55555555">4次挥手55555555</h2><p>主动关闭方向被动关闭放发送FIN标志位，表示要断开连接。被动关闭方同意关闭，并回发ACK标志位。此时主动关闭放进入FIN_WAIT_2状态。以后主动关闭方仍然可以接收数据，但是不可以再发送数据。</p><p>当另一方也决定关闭时，会发送FIN标志位，接收方回复ACK同意关闭，并且自身进入Time_wait状态，等待2MSL时长后关闭。发送方如果收到ACK应答后，就直接关闭，如果没有收到会一直发FIN标志位。</p><h2 id="滑动窗口">滑动窗口</h2><p>流量控制：防止发送方发的太快，耗尽接收方的资源。</p><p>控制机制：滑动窗口</p><p>在TCP报文的头部有一个<strong>16位的窗口大小</strong>，用于告诉发送方接收方<strong>可用的缓冲区大小</strong>。</p><h2 id="拥塞窗口">拥塞窗口</h2><p>拥塞控制：防止发送方发的太快，使网络来不及处理，从而导致<strong>网络拥塞</strong>。</p><p>控制机制：拥塞窗口</p><h2 id="慢启动-拥塞避免-快重传-快恢复">慢启动 拥塞避免 快重传 快恢复</h2><ol><li>**慢启动：**为了防止大量数据瞬间注入网络，引起网络阻塞。慢启动算法设定，最开始窗口为1个最大报文长度。一个传输轮次增加一倍的窗口大小。当达到慢开始门限后，执行拥塞避免算法。</li><li><strong>拥塞避免：</strong> 每个传输轮次将窗口增加一个单位，即加法增长。</li><li><strong>快重传：</strong> 当收到3个重复确认以后，执行快恢复算法。慢开始门限和发送窗口减半，然后发缺失的数据，进行加法增长，重新进入拥塞避免阶段。</li><li>**快恢复：**慢开始门限减半，发送拥塞窗口设定为门限加3。如果后面依旧收到重复的ACK则进行加法增长窗口，如果收到新的ACK，则拥塞窗口设定为慢开始门限的值，并重新进入拥塞避免阶段。</li></ol><p><strong>超时进入的是慢启动，重复确认才进入快恢复。</strong></p><p>选择性重传在options中left edge和right edge告诉发送方已经收到的报文序号</p><h2 id="TCP粘包问题">TCP粘包问题</h2><p>**udp不会出现粘包。**发送方发送的若干包数据到接收方接收时，包粘在了一起。</p><p>造成粘包的原因时因为发送端延迟发送或者接收方没有及时接收缓冲区中的数据。</p><p>通常可以使用以下三种方式来解决</p><ol><li>编程时设定立即发送的操作指令</li><li>把数据长度与消息一起发送。</li><li>使用特殊标记来区分消息的间隔</li></ol><h2 id="HTTP和HTTPS有什么不同">HTTP和HTTPS有什么不同</h2><p>HTTP协议是一种使用明文数据传输的网络协议。HTTPS协议可以理解为HTTP协议的升级，就是在HTTP的基础上增加了**数据加密。**在数据进行传输之前，对数据进行加密，然后再发送到服务器。这样，就算数据被第三者所截获，但是由于数据是加密的，所以你的个人信息让然是安全的。这就是HTTP和HTTPS的最大区别。</p><h2 id="在浏览器地址栏键入URL，按下回车之后会经历以下流程">在浏览器地址栏键入URL，按下回车之后会经历以下流程</h2><ol><li>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;（递归式和迭代式）</li><li>解析出 IP 地址后，<strong>根据该 IP 地址和默认端口 80</strong>，和服务器建立TCP连接;</li><li>浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</li><li>服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</li><li>释放 TCP连接;</li><li>浏览器将该 html 文本并显示内容;</li></ol><h2 id="UDP如何做到可靠">UDP如何做到可靠</h2><p>想要做到可靠，必须要做到**无重复，无丢失，无错误，无失序。**借鉴TCP的可靠机制</p><ol><li>发送时进行<strong>编号</strong></li><li>接收方收到数据发出<strong>应答信号</strong>（超时重传，3次确认重传）</li><li>增加<strong>校验位</strong></li></ol><h2 id="NAT-DNS-ARP">NAT DNS ARP</h2><ol><li>NAT用于实现从<strong>内部IP地址到外部IP地址的映射</strong></li><li>DNS提供域名到IP地址的映射或者反过来</li><li>ARP提供<strong>IP到MAC地址的映射</strong></li></ol><h2 id="DNS">DNS</h2><p>基于UDP的协议</p><ol><li>递归查询：父域名<strong>代替当前服务器递归查询</strong>，最后依次返回</li><li>迭代查询：父域名服务器告诉当前服务器<strong>下一次查询的位置</strong></li></ol><h2 id="http状态码">http状态码</h2><ol><li>100 continue 等待继续发送</li><li>200 ok 请求成功</li><li><strong>206 patial content 部分资源</strong></li><li>301 永久重定向</li><li>302 临时重定向 307</li><li>400 客户端请求报文语法错误</li><li>403 禁止访问</li><li>404 资源不存在</li><li>408 请求超时</li><li>500 服务器内部错误</li><li>503 服务器不可用</li></ol><h2 id="http-2-0-SPDY">http 2.0  SPDY</h2><ol><li>二进制分帧</li><li>多路复用</li><li>首部压缩</li><li>服务器推送</li></ol><h2 id="http-3-0-QUIC-UDP">http 3.0 QUIC+UDP</h2><ol><li>0 RTT</li><li><strong>没有队头阻塞的多路复用</strong></li><li>前向纠错</li></ol><h2 id="网络安全">网络安全</h2><ol><li>**sql注入：**用户提交一段数据库查询代码，根据程序返回的结果获得它想得知的数据。</li><li><strong>dos攻击：</strong> 让运行的服务器呈停止状态。集中请求造成资源过载，攻击安全漏洞使服务停止。</li></ol><h2 id="TCP原理">TCP原理</h2><p>面向连接，可靠的，基于字节流的传输层协议</p><h2 id="七层模型">七层模型</h2><p>物数网传会表应</p><p>ping是从应用层直接使用网络层的ICMP协议的，不经过传输层。原始套接字直接使用网络层的IP。</p><p>两台电脑通信：网线+不同的IP地址和子网掩码，即处于同一网段。</p><p>TCP和UDP可以同时使用相同的端口。</p><p>应用程序可以同时使用TCP和UDP两个协议。</p><h2 id="hub集线器">hub集线器</h2><p>可以实现多个IP主机通信，但是hub的实现方式是广播，容易产生拥堵。</p><h2 id="switch交换机">switch交换机</h2><p>是集线器的升级版，可以广播可单播。ARP不知道对方MAC地址时，先广播6个ff的MAC地址，所有网卡都会接收，但是只有目的IP会单播回应，其他的都会丢弃。然后发送方收到正确的MAC后再单播传输数据。</p><h2 id="ARP攻击">ARP攻击</h2><p>给两个MAC地址响应ARP广播的目的IP，经由中间人，窃取信息后再转发到正确的地址。</p><h2 id="默认网关">默认网关</h2><p>在同一个交换机连接的网络中，属于同一网段，用不到默认网关。网关用来传递两个不同网段的通信，默认网关通常是路由器。当通信的数据不在当前网段时，即发给默认网关。路由器就是用来连接不同网段的，用来构建一个更大的网络。在传输不同的网段信息时，源IP和目的IP是不变的，源MAC和目的MAC是改变的，每经过一个路由器修改一次，记录的是下一次的目的，和这一次的发送MAC。</p><h2 id="延迟确认">延迟确认</h2><p>ack会随着响应数据发送给对方，如果没有响应的数据就会等待200ms左右，在这期间如果有对方确认到达则立即发送。如果200ms后仍然没有数据需要发送则单独发送ACK。目的是节省带宽。</p><h2 id="Nagle算法">Nagle算法</h2><ol><li>没有已发送未确认报文段时，立即发送数据。</li><li>存在未确认报文段时，达到mss时再发。</li></ol><p>同时有nagle算法和延迟确认存在时会导致网络效率下降，通常会关闭延迟确认和nagle算法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setsockopt(s,IPPROTO_TCP,TCP_QUICKACK,(<span class="type">int</span>*)&#123;<span class="number">1</span>&#125;, <span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">//关闭延迟确认</span></span><br><span class="line">setsockopt(client_fd, SOL_TCP, TCP_NODELAY,(<span class="type">int</span>[])&#123;<span class="number">1</span>&#125;, <span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">//关闭nagle算法</span></span><br></pre></td></tr></table></figure><h2 id="忽略SIGPIPE信号">忽略SIGPIPE信号</h2><p>客户端和服务器端连接建立后，若某一端关闭连接，而另一端仍然向它写数据，第一次写数据后会收到RST响应，第二次写数据时，内核会向进程发送一个SIGPIPE信号，通知进程此连接已断开，而这个信号的默认处理方式是终止进程，服务器直接关闭。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signal(SIGPIPE, SIG_IGN)</span><br></pre></td></tr></table></figure><p>SIGSEGV 11 访问地址无效 SIGIO 29异步通知信号  SIGKILL 9 无条件终止</p><h2 id="传输层与网络层的区别">传输层与网络层的区别</h2><ol><li>传输层位于网络层之上，为不同主机上的应用进程提供逻辑通信。<strong>端到端传输</strong>。</li><li>网络层负责<strong>ip数据报的产生</strong>以及ip数据包在网络中的<strong>路由转发</strong>。</li></ol><h2 id="状态码499">状态码499</h2><p>服务器端处理的时间过长，客户端主动关闭了连接。</p><h2 id="分块编码">分块编码</h2><p>transfer-encoding:chunked <strong>响应头域</strong> 它允许服务器发送给客户端的数据分成多个部分，并且不需要预先直到发送数据的总大小。</p><h2 id="close-wait">close_wait</h2><p>基本的思想就是要检测出对方已经关闭的socket，然后关闭它。维持一个心跳包或者设置一个超时时间。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言</title>
      <link href="/HEXO/2025/09/07/003C++%E8%AF%AD%E8%A8%80/"/>
      <url>/HEXO/2025/09/07/003C++%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="逻辑用语千万条，第一首先往里套。">逻辑用语千万条，第一首先往里套。</h2><ol><li>首先，其次，然后，最后。</li><li>第一，第二，第三，第四。</li></ol><h2 id="书籍">书籍</h2><ul><li>《C++ primer》 第五版</li><li>《后台开发》 徐晓鑫</li><li>《linux高性能服务器编程》 游双</li><li>《redis设计与实现》黄健宏</li><li>《muduo库》陈硕</li></ul><h2 id="static">static</h2><p>static的使用可以分为两类，一类是用在<strong>普通变量和函数</strong>上，另一类是<strong>用在类中</strong>。</p><ol><li>普通变量分为<strong>全局变量和局部变量</strong>。声明为静态全局变量是在<strong>全局区分配内存</strong>，并且<strong>只在当前文件可见</strong>，在文件之外是不可见的。其他文件定义同名变量不会发生冲突。变量的值<strong>只在第一次执行时进行初始化</strong>。声明为静态局部变量时与全局变量类似，只是<strong>作用域为局部作用域</strong>。</li><li>静态普通函数，只在当前文件中可见，其他文件中定义同名函数不会发生冲突。</li><li>static用在类中，首先是静态成员变量，**在类中声明，类外初始化。**所有对象共享一份数据。</li><li>然后是静态成员函数：所有对象共享同一个函数，静态成员函数只能访问静态成员变量。</li></ol><h2 id="多态">多态</h2><p>多态分类两大类：静态多态和动态多态。静态多态是重载和模板。动态多态：也叫运行时多态，是通过<strong>继承和虚函数</strong>实现的。在具有继承关系的子类中，子类重写父类的虚函数，通过父类引用或指针指向子类对象时，产生不同的行为叫做多态。</p><p>多态的核心在于<strong>虚函数表指针</strong>，每个对象都有一个虚函数表指针，虚函数表指针指向一张虚函数表，表中记录了虚函数的入口地址，如果子类重写虚函数后，这个地址就会替换掉。<strong>多态的好处在于更方便程序的扩展，坏处在于每个对象多了一个4字节的指针，同时每次查询虚函数表需要耗时。</strong></p><h2 id="智能指针">智能指针</h2><p>C++11有3个智能指针，分别是<strong>unique_ptr, shared_ptr和weak_ptr</strong></p><ol><li>unique_ptr独享指针的所有权，<strong>无法进行拷贝构造赋值的操作</strong>，<strong>只能通过move函数进行所有权的转换。</strong></li><li>shared_ptr共享对象，它使用引用计数来保存当前有多少个智能指针在引用这个对象，当引用计数降为0时，对象会被销毁。</li><li>weak_ptr称为<strong>弱引用</strong>，用于辅助shared_ptr正常工作，主要解决shared_ptr可能会产生的<strong>环形引用问题</strong>。weak_ptr不会增加对象的<strong>引用计数</strong>，共享指针可以直接赋值给弱指针，同时弱指针可以使用lock函数来获取shared_ptr对象</li></ol><h2 id="malloc和new">malloc和new</h2><p>malloc和new都是在堆上开辟内存，进行动态的管理。</p><ol><li>new是操作符，malloc是库函数</li><li>malloc只负责开辟内存，没有初始化功能。new不但能开辟内存，还可以初始化。</li><li>malloc必须指定开辟内存的大小，并且返回类型为void*，因此malloc的返回值一般都需要进行类型转换。new可以自动计算出所需内存的大小，并且返回指定类型的指针。</li><li>malloc和new如果操作是内置数据类型两者基本类似，不同在于申请失败时。malloc申请失败时返回**NULL。**new申请失败抛出异常。</li><li>自定义类型时，new先调用<strong>operator new</strong>函数申请空间，然后在申请的空间上执行<strong>构造函数</strong>。</li></ol><h2 id="C-内存模型">C++内存模型</h2><p>从高地址到低地址</p><ol><li>环境变量和命令行参数</li><li>栈区</li><li>共享区</li><li>堆区</li><li>未初始化数据段.bss</li><li>初始化数据段.data</li><li>代码段.text</li></ol><h2 id="指针和引用的区别">指针和引用的区别</h2><ol><li>指针保存的是<strong>所指对象的地址</strong>，而引用是所指对象的别名。指针需要通过解引用间接访问对象的值，引用可以直接访问。</li><li>指针可以有多级指针，而引用最多两级。并且<strong>两个取地址符是右值引用。右值引用是为了减少深拷贝的次数。</strong></li><li>指针可以不初始化，即使初始化以后也可以改变。而引用必须初始化，同时初始化以后不许改变。</li><li><strong>引用的本质是指针常量</strong>。指针常量不可以修改指向，但是可以修改指向的值。常量指针刚好与之相反。</li></ol><h2 id="vector底层原理">vector底层原理</h2><p>首先，vector的基类是三根指针，分别是start/finish/end_of_storage用来指示当前分配到的空间所用的起始位置，终止位置和容量尾部。然后，当finish指针到达end_of_storage的位置时，操作系统会寻找当前容量大小2倍的连续内存空间，并且将旧内存中的数据拷贝到新内存，然后释放旧内存。其次，如果重新分配了内存，原来的迭代器就会失效。频繁的开辟新内存比较耗时。如果可以预知使用的大小，可以使用reserve函数，预先开辟足够大的空间。或者使用swap函数收缩内存空间。</p><h2 id="代码生成可执行文件的过程">代码生成可执行文件的过程</h2><p>主要分为四个步骤</p><ol><li>预编译阶段：<strong>对g++编译器指定-E参数，生成.i文件。这个阶段的主要工作是将所有的宏展开，去掉所有的条件预编译指令，将所有的头文件包含进来，删除注释等。</strong></li><li>编译阶段：<strong>对g++编译器指定-S参数，生成.s汇编文件。这个阶段的主要工作是对代码的语法，语义和词法等进行分析。</strong></li><li>汇编阶段: <strong>对g++编译器指定-c参数，生成.o二进制文件。</strong></li><li>链接阶段：<strong>将各个模块之间的相互引用处理好。<strong>把所有的静态库用到的目标文件装入程序中，并进行统一编址，然后进行</strong>重定位</strong>，即逻辑地址到物理地址的转换。</li></ol><h2 id="静态库与动态库">静态库与动态库</h2><ol><li>静态库：命名方式为lib开头加上自定义的静态库名，然后以.a结尾。静态库实际上是一组目标文件的集合，再链接阶段与调用的程序生成可执行文件。静态库的优点在于：**代码加载速度快，发布程序时，不需要提供对应的库；**缺点时：可执行文件体积大，**同时如果静态库有修改，调用的程序需要重新编译，**而编译的耗时比较久。</li><li>动态库：命名方式为lib开头加上自定义的动态库名，然后以.so结尾。<strong>动态库首先生成与位置无关的目标文件</strong>，然后在运行时加载到内存。优点是：<strong>动态库可以共享，节省了系统资源</strong>，动态库进行修改后，无需重新编译。缺点是加载速度比静态链接慢，发布程序时，需要提供动态库。</li></ol><h2 id="符号表">符号表</h2><p>每个目标文件除了拥有自己的数据和二进制代码外，还提供了3个表：</p><ol><li><p>**未解决符号表：**提供了所有在该编译单元里引用但是定义并不是在本编译单元的符号及其出现的地址。【引用无定义】</p><p>将extern声明的变量置入未解决符号表。【外部链接】</p></li><li><p>**导出符号表：**提供了本编译单元具有定义，并且愿意提供给其他单元使用的符号及地址。【有定义肯让外用】普通变量及其函数被置入导出符号表。</p></li><li><p>**地址重定向表：**提供了本编译单元所有对自身地址的引用的记录。<strong>static声明的全局变量放入地址重定位表中</strong>。【内部链接】</p></li></ol><h2 id="指针常量">指针常量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="type">const</span> p = &amp;a</span><br></pre></td></tr></table></figure><p><strong>指针常量必须初始化</strong>，一旦初始化完成，就不能再修改它的值，即指针的指向不可变。</p><p>引用的本质是指针常量</p><h2 id="声明和定义的区别">声明和定义的区别</h2><ol><li>声明是告诉<strong>编译器</strong>有这个<strong>变量和函数的存在</strong>，但是需要到其它地方去寻找。</li><li>定义包含了声明，但是声明不包含定义。</li><li><strong>定义时才分配存储空间。</strong></li></ol><h2 id="C和C-的区别">C和C++的区别</h2><ol><li>设计思想上： C是面向过程的结构化语言，CPP是面向对象的语言</li><li>语法上： CPP具有三大特性，<strong>封装继承多态</strong> CPP相对于C增加了许多类型安全的功能，比如四种强制类型转换 CPP支持范式编程，如模板类，函数模板等</li></ol><h2 id="struct和class的区别">struct和class的区别</h2><ol><li><p>共同点：<strong>C++中，可以用struct和class定义类，都可以继承。</strong></p></li><li><p>不同点：struct默认继承权限和默认访问权限时public class类的默认继承权限和访问权限时private。</p></li></ol><h2 id="volatile关键字">volatile关键字</h2><p>对类型额外修饰的作用，类似于const。<strong>告诉编译器不要对这样的对象进行优化</strong>，因为该对象的值可能在程序的控制或检测之外被改变。</p><h2 id="const关键字">const关键字</h2><p>const 可以用于限定<strong>变量，指针和函数</strong>不可改变，同时明确制定了类型，可以方便编译器做类型检查，也增加了代码的可读性。</p><ol><li><p>const修饰变量必须初始化。如果是全局的const变量，通常放在静态区。<strong>在局部声明的const变量放在栈区。</strong></p></li><li><p>const修饰成员函数时，函数中的成员变量不可改变，除非该变量特别声明为mutable</p></li><li><p>const可以用来修饰指针，称为常量指针const int *p 指针的指向可以改变，但是不能改变指针指向的值。</p></li><li><p>const修饰常量的指针叫做指针常量，int* const p 指针的指向不可以修改，指针指向的值可以修改。指针常量必须初始化。</p></li></ol><p><strong>const可以明确指定类型，而宏定义没有数据类型。</strong></p><p><strong>define宏是在预处理阶段展开。const常量是编译运行阶段使用。</strong></p><p><strong>宏定义不分配内存，变量定义分配内存。</strong></p><h2 id="extern关键字">extern关键字</h2><ol><li>引入同一模块在其他文件中定义的<strong>全局变量和函数</strong>。</li><li>如果在C++里调用了C库定义函数，那么需要使用<code>extern &quot;C&quot;</code> 标识这个函数，告诉编译器使用C的方式进行编译，防止C++的编译方式导致命名重整，无法找到对应的C函数。命名重整的原因在于**C++支持函数重载，而C不支持。**所以C++编译时增加了函数参数的标识符。</li><li>extern通常放在未解决符号表中，表示定义不在本文件而引用的变量。</li></ol><h2 id="this关键字">this关键字</h2><ol><li>解决同名冲突</li><li>返回对象本身</li></ol><p>this指针的本质是<strong>指针常量</strong>，指针的指向不可以修改。</p><h2 id="move函数">move函数</h2><p><strong>将左值强制转换为右值引用</strong>，右值引用可以减少一次对象的析构和对象的构造。</p><p><strong>右值引用可以减少深拷贝的次数。</strong></p><h2 id="段错误">段错误</h2><p>段错误通常发生在**访问非法内存地址的时候。**系统会发送一个SIGSEGV11号信号告诉当前进程，进程采取默认的捕获方式，即终止进程。</p><ol><li>野指针</li><li>试图修改字符串常量的内容</li></ol><h2 id="auto关键字">auto关键字</h2><p>让编译器能够根据初始值的类型推断变量的类型。当处理复杂类型，比如STL中的类型时，优势最明显。<code>auto p = vt.begin()</code></p><h2 id="四种强制类型转换">四种强制类型转换</h2><ol><li><strong>static_cast 低风险的转换，比如整数转浮点数，字符型转整形</strong></li><li><strong>const_cast 去掉const关键字的转换，可以去掉带const的指针和引用</strong></li><li><strong>dynamic_cast  使具有继承关系的基类转换为派生类，如果不可以转换则返回NULL</strong></li><li><strong>reinterpret_cast 指针或引用的转换，风险较高</strong></li></ol><h2 id="RTTI">RTTI</h2><p>run time type identification 运行时类型识别。**常常结合typeid()和dynamic_cast实现。**可以根据当前调用的指针是何种类型，经过dynamic_cast转换后，调用非虚函数。**dynamic_cast只能用于指针和引用的转换，要转换的类型中必须包含虚函数，转换成功返回子类的地址，失败返回NULL。**typeid返回一个type_info对象的引用。</p><h2 id="构造函数不能是虚函数">构造函数不能是虚函数</h2><p>虚函数是通过虚函数表指针来调用的，而虚函数表指针存在对象内存空间。当一个对象调用构造函数时，该对象还没有实例化，即没有分配内存空间，所以虚函数表指针无法找到。</p><h2 id="析构函数尽量是虚函数">析构函数尽量是虚函数</h2><p>析构函数不是虚函数容易引起<strong>内存泄漏</strong>。</p><p>为了实现多态的动态绑定，通常将基类指针指向派生类对象，当指针销毁时，如果析构函数不是虚函数，根据析构函数在继承中的调用顺序，则派生类对象将不会被析构，造成内存泄漏。</p><h2 id="析构函数不能抛出异常">析构函数不能抛出异常</h2><p>析构函数抛异常，则异常点之后的的程序不会执行，如果异常点之后有释放资源的操作，则这部分资源无法释放，导致内存泄漏。<strong>noexcept</strong></p><h2 id="内存泄漏">内存泄漏</h2><p>不再需要使用的内存单元，没有及时释放。memcheck和valgrind检测内存泄漏的工具。使用RAII资源获取就是初始化和智能指针。</p><h2 id="野指针">野指针</h2><p>一些内存的单元已被释放，之前指向它的指针还在被使用。</p><h2 id="vector和list的区别">vector和list的区别</h2><ol><li>vector是动态数组，在内存中分配一块连续的内存空间，因此可以使用下标进行快速的随机访问。但是删除和插入需要移动大量的元素。</li><li>list是双向链表，在内存中是不连续的空间，由指针将不同的地址连接在一起。list的插入和删除操作都是O(1)的。</li><li>数组必须事先设定固定的长度，不能动态的增减，可能会造成资源浪费。链表可以动态的增减。</li></ol><h2 id="浅拷贝">浅拷贝</h2><p>由于编译器默认的拷贝构造函数只是简单的位拷贝，可能会导致内存的重复释放。解决浅拷贝的办法通常使用深拷贝，即自己实现拷贝构造函数，在堆上重新分配内存。</p><h2 id="内存对齐">内存对齐</h2><p>union最大成员所占的整数倍，同时能容纳其他的成员。union中变量共用内存，应以最长的为准。</p><p>struct按照成员的声明顺序，依次安排内存，偏移量为成员大小的整数倍，最后结构体的大小为最大成员所占大小的整数倍。在C++中，空结构体和空类的内存所占大小为1个字节。C中空结构体所占大小为0。</p><p>为什么要有内存对齐：1. 硬件原因：**加速CPU的访问速度。**因为CPU和内存数据交换的基本单位是块，块的大小为2的n次方字节。内存未对齐可能需要多次访问内存。2. 平台原因：<strong>不是所有的平台都支持任意地址的数据访问。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> i; <span class="comment">//8 bytes </span></span><br><span class="line"><span class="type">int</span> k[<span class="number">5</span>]; <span class="comment">//4 bytes 最长的成员不是20  </span></span><br><span class="line"><span class="type">char</span> c; <span class="comment">// 1 byte </span></span><br><span class="line">&#125;UDATE;</span><br><span class="line"><span class="comment">//联合体共用内存 最长成员为8字节 结果要为8的倍数 同时要能容纳其他成员，即大于等于20字节 所以为24字节 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span></span><br><span class="line"><span class="type">int</span> cat; <span class="comment">// 4 bytes</span></span><br><span class="line">UDATE cow; <span class="comment">//24 bytes 但是需要先拆开来 最长成员为8字节 </span></span><br><span class="line"><span class="type">double</span> dog; <span class="comment">//8 bytes </span></span><br><span class="line">&#125;too;</span><br><span class="line"><span class="comment">//结构体顺序考虑，结果为最大成员的整数倍，如果后一个成员的长度的开始位置不是整数倍需要填充字节</span></span><br><span class="line"><span class="comment">//cat占4个字节 填充4个字节 </span></span><br><span class="line"><span class="comment">//起始位置为8 满足整数倍 cow占用24字节</span></span><br><span class="line"><span class="comment">//起始位置为32 满足整数倍 doule占用4字节</span></span><br><span class="line"><span class="comment">//所以结构体总共占用40字节，同时40也是8的倍数。 </span></span><br><span class="line">UDATE temp;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(temp)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">struct</span> data)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//24 40 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="gdb调试">gdb调试</h2><p>gdb可以用于分析coredump文件，coredump文件中含有当进程被终止时内存，cpu寄存器和各种函数堆栈信息等。</p><ol><li>设置断点 b 120</li><li>运行 r</li><li>打印遍历p  number</li><li>查看堆栈bt</li><li>查看循环中的变量 i</li><li>单步运行n</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/HEXO/2025/09/07/004%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/HEXO/2025/09/07/004%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="B-树">B+树</h2><ol><li>具有n个关键字的节点含有n个分支。而在B树中，具有n个关键字的节点含有n+1个节点。</li><li>B+树的叶子节点包含了所有关键字，并且包含信息。</li><li>B+树非叶子节点只起索引作用，不存数据。</li><li>B+数在叶子节点使用指针将前后磁盘块中的索引连接起来，形成一个线性链表，方便范围查询。</li></ol><h2 id="什么是索引">什么是索引</h2><p>索引是数据表中对<strong>字段</strong>进行排序的一种<strong>数据结构</strong>。常用的索引有</p><p>B树 哈希索引 全文索引 Rtree索引</p><p>AVL树，B树，B+树，红黑树，哈希表。</p><p>哈希表和B树不利于范围查找。红黑树在数据量大的时候性能会下降。</p><p>**聚集索引：**数据和索引在一起的。</p><p>**非聚集索引：**索引文件和数据文件是分离的。</p><p>联合索引：对多个字段同时建立的索引。Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分，<strong>跳跃索引查询</strong>就会导致索引失效。</p><h2 id="B树和B-树的区别">B树和B+树的区别</h2><ol><li>B树：叶节点具有相同的深度，<strong>所有索引元素不重复</strong>，节点中的数据索引从左到右递增排列。</li><li>B+树：<strong>非叶子节点不存储数据，只存储索引</strong>，叶子节点包含了全部的关键字且存储数据。叶子节点用指针连接从左往右递增排序，提高区间访问的性能。</li></ol><h2 id="mysql存储引擎myISAM和InnoDB">mysql存储引擎myISAM和InnoDB</h2><p><strong>存储引擎是基于表的，而不是数据库。</strong></p><ol><li>InnoDB引擎：<strong>支持事务，行锁（适合高并发）</strong>，支持外键。mysql5.5版本后的<strong>默认存储引擎</strong></li><li>myISAM引擎：不支持事务，不支持外键，支持表锁。<strong>优势是访问的速度快</strong>。mysql5.5版本前的默认存储引擎。myISAM索引文件和数据文件是分离的。<strong>查询较多的更新较少的情况下使用myisam存储引擎。</strong></li></ol><h2 id="数据库三大范式">数据库三大范式</h2><ol><li>数据库中的<strong>所有字段</strong>都是<strong>不可分割的原子值</strong></li><li>满足第一范式的前提下，除主键外的<strong>每一列</strong>都必须<strong>完全依赖于主键</strong>。如果不完全依赖，只能发生在联合主键下。</li><li>满足第二范式的前提下，除开主键列的其他<strong>列之间</strong>不能有<strong>传递依赖</strong>关系。</li></ol><h2 id="事务的四个特性ACID">事务的四个特性ACID</h2><p>事务是作为<strong>单个逻辑工作单元</strong>执行的一系列操作。要么完全执行，要么完全不执行。</p><ol><li>**原子性 ：**同一事务中多个操作不能分割，必须是一个整体。</li><li>**一致性 ：**事务操作前后的总量保持一致。</li><li>**隔离性 ：**多个事务之间的操作互不干扰。</li><li>**持久性：**事务提交以后，对数据库中数据的改变是永久的。</li></ol><h2 id="事务隔离级别">事务隔离级别</h2><p>事务分为四个隔离级别：分别是读未提交，读提交，可重复读，串行化。从前往后隔离级别依次递增，同时执行效率依次下降。mysql的默认隔离级别是可重复读。</p><ol><li><strong>读未提交：<strong>会产生</strong>脏读</strong>，即一个事务读取了另一个事务未提交的内容。</li><li><strong>读提交：<strong>可以解决脏读问题，但是会产生</strong>不可重复读</strong>，即一个事务在执行的过程中得到的结果不一致。</li><li><strong>可重复读：<strong>可以解决不可重复读的问题，但会产生</strong>幻读</strong>，即一个事务无法看到另一个事务已经提交的内容。</li><li>**串行化：**可以解决幻读问题。当同一张表被另一个事务操作时，其他事务的写操作是不可以进行的，进入串行化排队，直到另一个结束，同时还未超时的情况下才可以继续执行。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed # 修改隔离级别</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@x_isolation</span>  # 查看隔离级别</span><br></pre></td></tr></table></figure><h2 id="主键和外键约束">主键和外键约束</h2><p>主键：**唯一且非空。**一个表有且只能由一个主键约束。创建主键会自动创建对应的索引，同样删除主键，对应的索引也会被删除。</p><p>外键约束：如果定义了外键约束，主表中没有的数据在子表中是<strong>不可以被使用的</strong>。主表中的记录被子表引用，是<strong>不可以被删除的</strong>。</p><h2 id="inner-join-和-left-join">inner join 和 left join</h2><ol><li>等值联接：inner join返回两个表中<strong>联接字段相等的行</strong></li><li>左联接：left join 返回左表所有记录和右表中联接字段相等的记录，如果左表中的记录在右边不存在，则对应字段设为null。</li></ol><h2 id="redis">redis</h2><p>是C语言编写的基于<strong>内存可持久化</strong>的key-value内存数据库，使用的是<strong>epoll单线程模型</strong>。常用的数据结构有set， list，string, hash, sorted set。</p><h2 id="查询">查询</h2><p>分组查询：count() sum() max() min() avg()</p><p>聚合查询：7种 A B A∪B A∩B   A - A∩B  B - A∩B  A∪B - A∩B</p><p>左连接： A - A∩B   右连接：B - A∩B  内连接：A∩B</p><h2 id="悲观锁和乐观锁">悲观锁和乐观锁</h2><ol><li>悲观锁： <strong>每次去拿数据时都认为别人会修改，所以每次在拿数据的时候都会上锁。悲观锁由数据库自己实现，共享锁和排他锁是悲观锁的不同实现。悲观锁的缺点：效率低，并行差，增加死锁的概率。</strong></li><li>乐观锁：<strong>每次去拿数据都认为别人不会修改，所以不会上锁。乐观锁适用于读多，写少的场景。乐观锁常见的实现方式：版本号机制和CAS自旋算法。乐观锁的缺点：ABA问题，循环时间长开销大，只能保证一个共享变量的原子操作。</strong></li></ol><h2 id="explain-查看执行计划">explain 查看执行计划</h2><p>使用explain关键字可以<strong>模拟优化器执行sql查询语句</strong>，从而知道mysql是如何处理sql语句的。分析查询语句或表结构的性能瓶颈。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="operator">+</span> <span class="keyword">sql</span>语句</span><br></pre></td></tr></table></figure><h2 id="show-profile">show profile</h2><p>用来分析当前会话中<strong>语句执行的资源消耗情况。</strong></p><h2 id="什么时候应该创建索引">什么时候应该创建索引</h2><ol><li>频繁查询字段</li></ol><h2 id="什么时候不应该创建索引">什么时候不应该创建索引</h2><ol><li>where条件里用不到的字段</li><li>频繁更新的字段</li><li>表记录太少&lt;300W</li><li>重复且平均的表字段</li></ol><h2 id="B-树-2">B+树</h2><p>B+树是B树的变形，B+树非叶子节点只存索引，不存数据，叶子节点存储所有的索引和数据。B+树三层可以存储上百万条数据，磁盘IO最多三次，每次读取磁盘块到内存后，使用二分查找找到索引的位置。</p><p>B+树是聚集索引，数据和索引在一起。B+树使用指针将叶子节点的连接起来。</p><h2 id="B树">B树</h2><p>是一种多路平衡二叉树，m阶B树，每个节点最多可以有m-1关键字。所有叶子节点在同一层。每个节点保存索引和数据。</p><h2 id="索引">索引</h2><p>索引是按照某个字段排序的数据结构。</p><h2 id="ACID">ACID</h2><p><strong>事务时单个逻辑工作单元的一系列操作。</strong></p><p>原子性：事务的操作是不可分割的，要么完全成功，要么完全失败。</p><p>一致性：事务操作前后的总量保持不变。</p><p>隔离性：事务之间的操作应该相互隔离。</p><p>持久性：事务一旦提交后，数据库中的值不可更改。</p><h2 id="事务的隔离级别">事务的隔离级别</h2><ol><li>读未提交：产生脏读，即一个事务可以读取另一个事务未提交的内容。</li><li>读提交：解决脏读，产生不可重复读，即事务的两次读取结果不一致。</li><li>可重复读：解决不可重复读，但是会产生幻读，即一个事务明明提交了，但是在另一个事务中没有更新。</li><li>串行化：当两个事务都在写入内容时，必须排队，当两个事务提交后，才可以执行后续事务。</li></ol><h2 id="数据库三大范式-2">数据库三大范式</h2><ol><li>数据库中的所有字段都是不可分割的原子值</li><li>在满足第一范式的前提下，除开主键外的其他列都必须完全依赖于主键。</li><li>在满足第二范式的前提下，除开主键外的其他列之间不能有传递依赖关系。</li></ol><h2 id="myisam和innoDB">myisam和innoDB</h2><p>myisam不支持事务，不支持外键，支持表锁。查询速度较快。适合读多更新少的表。</p><p>innoDB支持事务，支持外键，支持行锁，因为锁的粒度比较小，所以适合高并发。</p><h2 id="持久化">持久化</h2><p>利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的机制叫做持久化。确保数据安全。</p><ol><li>将当前<strong>数据状态</strong>进行保存，快照形式。RDB</li><li>将数据的<strong>操作过程</strong>进行保存，日志形式。AOF</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/HEXO/2025/09/07/005%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/HEXO/2025/09/07/005%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式">单例模式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">static</span> A* <span class="title function_">getInstance</span><span class="params">()</span>;</span><br><span class="line"><span class="type">static</span> A* instance;</span><br><span class="line">private:</span><br><span class="line">A();</span><br><span class="line">    ~A();</span><br><span class="line">&#125;;</span><br><span class="line">A* A::instance = nullptr;</span><br><span class="line"><span class="comment">//内存读写reorder不安全 导致双检查锁失效</span></span><br><span class="line"><span class="comment">//先分配内存 再执行构造器 最后返回给实例</span></span><br><span class="line"><span class="comment">//编译器的优化 </span></span><br><span class="line">A* <span class="title function_">A::getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//读没有问题 写就有问题 </span></span><br><span class="line"><span class="comment">//锁前检查 锁的粒度过大 锁后检查安全性 </span></span><br><span class="line"><span class="keyword">if</span>(instance==nullptr)&#123;</span><br><span class="line">mutex.lock();</span><br><span class="line"><span class="keyword">if</span>(instance==nullptr) instance = new A();</span><br><span class="line">mutex.unlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快排-归并-堆排">快排 归并 堆排</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快排 时间复杂度 平均nlogn 空间复杂度O(1) </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> x = arr[l+r &gt;&gt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> i = l<span class="number">-1</span>, j = r+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line"><span class="keyword">while</span>(arr[++i] &lt; x);</span><br><span class="line"><span class="keyword">while</span>(arr[--j] &gt; x);</span><br><span class="line"><span class="keyword">if</span>(i &lt; j) swap(arr[i], arr[j]);</span><br><span class="line">&#125;</span><br><span class="line">quick_sort(arr, l, j);</span><br><span class="line">quick_sort(arr, j+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并</span></span><br><span class="line"><span class="comment">//时间复杂度NlongN  空间复杂度N</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> tmp[<span class="number">105</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">merge_sort(arr, l, mid); merge_sort(arr, mid+<span class="number">1</span>, r);</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="type">int</span> i = l, j = mid+<span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123; <span class="comment">//i和j注意了</span></span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[j]) tmp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">else</span> tmp[k++] = arr[j++];</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid) tmp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">while</span>(j &lt;= r) tmp[k++] = arr[j++];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">arr[l+i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//大根堆 把大交换上去</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> r, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">2</span>*r+<span class="number">1</span>, j = <span class="number">2</span>*r+<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> mx = r;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; n &amp;&amp; arr[i] &gt; arr[mx]) mx = i;</span><br><span class="line">    <span class="keyword">if</span>(j &lt; n &amp;&amp; arr[j] &gt; arr[mx]) mx = j;</span><br><span class="line">    <span class="keyword">if</span>(mx != r) &#123;</span><br><span class="line">        swap(arr[mx], arr[r]);</span><br><span class="line">        heapify(arr, mx, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆排序 堆化 堆顶取出交换到末尾去</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        heapify(arr, i, n); <span class="comment">//当前的点 总共的点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换完成</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        swap(arr[<span class="number">0</span>], arr[i]);</span><br><span class="line">        heapify(arr, <span class="number">0</span>, i); <span class="comment">//总量减1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[]&#123;<span class="number">1</span>,<span class="number">93</span>,<span class="number">6</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">45</span>,<span class="number">2123</span>,<span class="number">239</span>,<span class="number">0</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> n = <span class="number">12</span>;</span><br><span class="line"><span class="comment">// merge_sort(arr, 0, n-1);</span></span><br><span class="line">    <span class="comment">//如果从0编号 那么儿子节点为2i+1 2i+2</span></span><br><span class="line">    <span class="comment">//最后一个节点是啥</span></span><br><span class="line">    heap_sort(arr, n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="kmp算法">kmp算法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> Next[<span class="number">105</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">getNext</span><span class="params">(<span class="built_in">string</span> p)</span>&#123;</span><br><span class="line">    <span class="comment">//按照左神讲的 考查的是当前位置的前一个字符串的最长前后缀</span></span><br><span class="line">    Next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    Next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cn = <span class="number">0</span>, i = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> n = p.size();</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[cn] == p[i<span class="number">-1</span>]) Next[i++] = ++cn;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cn) cn = Next[cn];</span><br><span class="line">        <span class="keyword">else</span> Next[i++] = <span class="number">0</span>; <span class="comment">//前后缀为0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">kmp</span><span class="params">(<span class="built_in">string</span> p, <span class="built_in">string</span> s)</span>&#123;</span><br><span class="line">    <span class="comment">//首先求next数组</span></span><br><span class="line">    getNext(p);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m = s.size();</span><br><span class="line">    <span class="type">int</span> n = p.size();</span><br><span class="line">    <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == p[j]) i++, j++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Next[j] == <span class="number">-1</span>) i++; <span class="comment">//开头不匹配</span></span><br><span class="line">        <span class="keyword">else</span> j = Next[j];</span><br><span class="line">        <span class="keyword">if</span>(j==n)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i-n&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//起始位置</span></span><br><span class="line">            j = Next[j<span class="number">-1</span>];</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">string</span> text = <span class="string">&quot;helloworldllo&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> pattern = <span class="string">&quot;llo&quot;</span>;</span><br><span class="line">    kmp(pattern, text);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LRU算法">LRU算法</h2><h2 id="strcpy和memcpy">strcpy和memcpy</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//内存拷贝函数 按字节拷贝</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">my_memcpy</span><span class="params">(<span class="type">void</span>* dest, <span class="type">void</span>* src, <span class="type">size_t</span> count)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dest == <span class="literal">NULL</span> || src == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span>* pdest = (<span class="type">char</span>*) dest;</span><br><span class="line">    <span class="type">char</span>* psrc = (<span class="type">char</span>*) src;</span><br><span class="line">    <span class="keyword">while</span>(count--)&#123;</span><br><span class="line">        *pdest++ = *psrc++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串拷贝函数 仅用来拷贝字符串</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_strcpy</span><span class="params">(<span class="type">char</span>* dest, <span class="type">const</span> <span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dest == <span class="literal">NULL</span> || src ==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span>* pdest = dest;</span><br><span class="line">    <span class="keyword">while</span>((*dest++ = *src++) != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> pdest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> src[] =<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dest[<span class="number">100</span>];</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//my_memcpy(dest, src, strlen(src));</span></span><br><span class="line">    my_strcpy(dest, src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, src);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="string类">string类</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span>&#123;</span></span><br><span class="line">public:</span><br><span class="line">    String(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">NULL</span>); <span class="comment">//通用构造函数</span></span><br><span class="line">    String(<span class="type">const</span> String&amp; str); <span class="comment">//拷贝构造函数</span></span><br><span class="line">    ~String();</span><br><span class="line">    String&amp; operator+(<span class="type">const</span> String &amp;str);</span><br><span class="line">    String&amp; operator+=(<span class="type">const</span> String &amp;str);</span><br><span class="line">    <span class="type">char</span>&amp; operator[](<span class="type">const</span> <span class="type">int</span> n) <span class="type">const</span>;</span><br><span class="line">    String operator=(<span class="type">const</span> String &amp;str) <span class="type">const</span>;</span><br><span class="line">    <span class="type">bool</span> operator==(<span class="type">const</span> String &amp;str)<span class="type">const</span>;</span><br><span class="line">    <span class="type">bool</span> operator&lt;(<span class="type">const</span> String &amp;str) <span class="type">const</span>;</span><br><span class="line">    <span class="type">bool</span> operator&lt;(<span class="type">const</span> String &amp;str) <span class="type">const</span>;</span><br><span class="line">    <span class="type">size_t</span> size <span class="type">const</span>; <span class="comment">//获取长度</span></span><br><span class="line">    <span class="comment">//流运算符&gt;&gt; &lt;&lt;</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">char</span>* data; <span class="comment">//字符串</span></span><br><span class="line">    <span class="type">size_t</span> length; <span class="comment">//长度</span></span><br><span class="line">&#125;</span><br><span class="line">String::String(<span class="type">const</span> <span class="type">char</span>* str)&#123; <span class="comment">//通用构造函数</span></span><br><span class="line">    <span class="keyword">if</span>(!str)&#123;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        data = new <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">        *data=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        length = <span class="built_in">strlen</span>(str); <span class="comment">//对空指针调用strlen会导致内存错误</span></span><br><span class="line">        data = new <span class="type">char</span>[length+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(data, str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">String::String(<span class="type">const</span> String&amp; str)&#123; <span class="comment">//拷贝构造</span></span><br><span class="line">    length = str.length;</span><br><span class="line">    data = new <span class="type">char</span>[length+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(data, str.data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构</span></span><br><span class="line">String::~String()&#123;</span><br><span class="line">    delete []data;</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//赋值重载</span></span><br><span class="line">String&amp; String::operator=(<span class="type">const</span> String &amp;str)&#123;</span><br><span class="line">    delete []data;</span><br><span class="line">    length = str.length;</span><br><span class="line">    data = new <span class="type">char</span>[length+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(data, str.data);</span><br><span class="line">    <span class="keyword">return</span> *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="智能指针shared-ptr">智能指针shared_ptr</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span>&#123;</span></span><br><span class="line">private:</span><br><span class="line">    T * ptr;</span><br><span class="line">    <span class="type">int</span>* <span class="title function_">use_count</span><span class="params">()</span>;</span><br><span class="line">    SmartPtr(T* p);</span><br><span class="line">    SmartPtr(<span class="type">const</span> SmartPtr&lt;T&gt; &amp; orig);<span class="comment">//拷贝</span></span><br><span class="line">    SmartPtr&lt;T&gt;&amp; operator=(<span class="type">const</span> SmartPtr&lt;T&gt;&amp; orig);</span><br><span class="line">    ~SmartPtr();</span><br><span class="line">&#125;</span><br><span class="line">SmartPtr::SmartPtr(T* p)&#123;</span><br><span class="line">    ptr = p;</span><br><span class="line">    *use_count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">SmartPtr::~SmartPtr()&#123;  <span class="comment">//析构</span></span><br><span class="line">    delete ptr;</span><br><span class="line">    ptr = nullptr;</span><br><span class="line">    delete use_count;</span><br><span class="line">    use_count = nullptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个函数在main函数执行前先运行">写一个函数在main函数执行前先运行</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Hello</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;before main!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Hello w; <span class="comment">//全局变量在main之前执行 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;I am main&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名管道pipe">匿名管道pipe</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> fd[<span class="number">2</span>];</span><br><span class="line">    pipe(fd); <span class="comment">//创建管道</span></span><br><span class="line">    <span class="type">int</span> ret = fork();</span><br><span class="line">    <span class="keyword">if</span>(ret &gt; <span class="number">0</span>)&#123; <span class="comment">//父进程 父写 fd[0]读 fd[1]写</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">char</span> *str =<span class="string">&quot;hello world\n&quot;</span>;</span><br><span class="line">        write(fd[<span class="number">1</span>], str, <span class="built_in">strlen</span>(str));</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)&#123; <span class="comment">//子进程 子读 fd[1]关闭</span></span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> n = read(fd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="comment">//写到显示器上</span></span><br><span class="line">        write(<span class="number">1</span>, buf, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rand7产生rand10">rand7产生rand10</h2><p><a href="https://leetcode-cn.com/problems/implement-rand10-using-rand7/">leetcode470</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">rand10</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            t = rand7() + (rand7()<span class="number">-1</span>) * <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">if</span>(t &lt;= <span class="number">40</span>) <span class="keyword">return</span> t%<span class="number">10</span> +<span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="反转二叉树">反转二叉树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    TreeNode* <span class="title function_">invertTree</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line">        <span class="comment">//遍历所有点 然后交换左右孩子</span></span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode* root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        dfs(root-&gt;left);</span><br><span class="line">        dfs(root-&gt;right);</span><br><span class="line">        swap(root-&gt;left, root-&gt;right); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++项目</title>
      <link href="/HEXO/2025/09/07/006%E9%A1%B9%E7%9B%AE/"/>
      <url>/HEXO/2025/09/07/006%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="webbench">webbench</h2><p>测压软件 最高并发3W</p><p>webbench做测试时自身也会消耗CPU和内存资源，为了测试准确，需要将webbench安装在别的服务器上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf webbench-1.5.tar.gz</span><br><span class="line">cd webbench-1.5</span><br><span class="line">apt-get install ctags</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webbench -c 1000 -t 5 http://127.0.0.1:9999/index.html //1000个客户端 5秒钟时间</span><br></pre></td></tr></table></figure><h2 id="github">github</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SYaoJun/WebServer.git //把仓库中的内容拷贝到linux系统中</span><br></pre></td></tr></table></figure><h2 id="回调函数">回调函数</h2><p><strong>函数指针</strong>本身是指针变量，指向某个函数的入口地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">run</span><span class="params">(<span class="type">void</span>(*step)(<span class="type">void</span>))</span>&#123; <span class="comment">//回调函数的传参是声明的格式</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(step != <span class="literal">NULL</span>) step();</span><br><span class="line">        cnt++;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cb</span><span class="params">(<span class="type">void</span>)</span>&#123;  <span class="comment">//回调函数</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;记秒到时&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    run(cb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc cb.c main.c</span><br></pre></td></tr></table></figure><h2 id="信号函数">信号函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raise(SIGSEGV) <span class="comment">//自己给自己进程发送信号 11</span></span><br><span class="line"><span class="built_in">abort</span>() <span class="comment">//终止当前进程</span></span><br></pre></td></tr></table></figure><p>测试1s打印多少个数</p><p>alarm函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    alarm(<span class="number">1</span>); <span class="comment">//计时1s 到时后内核发送一个sigalarm信号终止</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setitimer函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_alarm</span><span class="params">(<span class="type">int</span> sec)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">it</span>, <span class="title">oldit</span>;</span></span><br><span class="line">    it.it_value.tv_sec = sec; <span class="comment">//定时长度</span></span><br><span class="line">    it.it_value.tv_usec = <span class="number">0</span>; <span class="comment">//微秒</span></span><br><span class="line">    it.it_interval.tv_sec = <span class="number">0</span>; <span class="comment">//周期定时</span></span><br><span class="line">    it.it_interval.tv_usec = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = setitimer(ITIMER_REAL, &amp;it, &amp;oldit);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;setitimer error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldit.it_value.tv_sec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    my_alarm(<span class="number">1</span>); <span class="comment">//计时1s 到时后内核发送一个sigalarm信号终止</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建线程">创建线程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">func</span><span class="params">(<span class="type">void</span>* arg)</span>&#123; <span class="comment">//必须为这种类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in thread : thread id: %lu, process id: %u\n&quot;</span>, pthread_self(), getpid());</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建线程 </span></span><br><span class="line">    <span class="type">pthread_t</span> tid; <span class="comment">//重命名的unsigned long 类型</span></span><br><span class="line">    <span class="comment">//创建线程API pthread_create(arg1, agr2, arg3, arg4) </span></span><br><span class="line">    <span class="comment">//arg1: 传入的线程tid地址 </span></span><br><span class="line">    <span class="comment">//arg2: 线程属性 通常设置为NULL</span></span><br><span class="line">    <span class="comment">//arg3: 线程执行的任务 函数指针 </span></span><br><span class="line">    <span class="comment">//arg4: 参数3传递的参数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main 1 : thread id: %lu, process id: %u\n&quot;</span>, pthread_self(), getpid());</span><br><span class="line">    <span class="type">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, func, <span class="literal">NULL</span>); </span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;pthread_create error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">1</span>); <span class="comment">//主线程 等待子线程执行完毕</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main 2 : thread id: %lu, process id: %u\n&quot;</span>, pthread_self(), getpid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建多个子线程">创建多个子线程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">func</span><span class="params">(<span class="type">void</span>* arg)</span>&#123; <span class="comment">//必须为这种类型</span></span><br><span class="line">    <span class="type">int</span> i = (<span class="type">int</span>)arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%dth thread id: %lu, process id: %u\n&quot;</span>, i, pthread_self(), getpid());</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建线程 </span></span><br><span class="line">    <span class="type">pthread_t</span> tid; <span class="comment">//重命名的unsigned long 类型</span></span><br><span class="line">    <span class="comment">//创建线程API pthread_create(arg1, agr2, arg3, arg4) </span></span><br><span class="line">    <span class="comment">//arg1: 传入的线程tid地址 </span></span><br><span class="line">    <span class="comment">//arg2: 线程属性 通常设置为NULL</span></span><br><span class="line">    <span class="comment">//arg3: 线程执行的任务 函数指针 </span></span><br><span class="line">    <span class="comment">//arg4: 参数3传递的参数</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>, ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, func, (<span class="type">void</span>*)i); </span><br><span class="line">            <span class="keyword">if</span>(ret != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s pthread_create error&quot;</span>, strerror(ret));</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        pthread_detach(tid);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(n); <span class="comment">//主线程 等待子线程执行完毕</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mysql使用">mysql使用</h2><p>mysql在linux环境下结合C语言的使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-client mysql-server //先安装mysql</span><br><span class="line">sudo apt-get install libmysql++-dev //安装库</span><br></pre></td></tr></table></figure><p>先启动mysql库 设置好密码 然后使用c程序连接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">MYSQL mysql;</span><br><span class="line">MYSQL_RES *res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">char</span> *query = <span class="string">&quot;select * from people;&quot;</span>;</span><br><span class="line">mysql_init(&amp;mysql); <span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">if</span>(!mysql_real_connect(&amp;mysql,<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;password&quot;</span>,<span class="string">&quot;yaojun&quot;</span>,<span class="number">3306</span>,<span class="literal">NULL</span>,<span class="number">0</span>))&#123; <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Error in connecting&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mysql_query(&amp;mysql,query))&#123; <span class="comment">//查询数据库</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Error in querying&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">res = mysql_store_result(&amp;mysql);</span><br><span class="line"><span class="keyword">while</span>(row = mysql_fetch_row(res))&#123; <span class="comment">//读取数据库中的一行</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mysql_num_fields(res);i++)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">&quot;%s &quot;</span>,row[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">mysql_free_result(res); <span class="comment">//释放</span></span><br><span class="line">mysql_close(&amp;mysql); <span class="comment">//关闭</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc sql.c -lmysqlclient //生成a.out文件 执行</span><br></pre></td></tr></table></figure><h2 id="指针和数组">指针和数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[]=<span class="string">&quot;hello&quot;</span>; <span class="comment">//字符串含\0   6字节</span></span><br><span class="line"><span class="type">char</span> *url =<span class="string">&quot;hello&quot;</span>; <span class="comment">//指针64位机   8字节</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(str)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(url)&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="CGI服务器">CGI服务器</h2><p>原理：输出到某个文件描述符上的内容直接发送到客户端连接对应的socket上，此处我们模拟了把服务器端输出到标准输出的内容，直接发送给客户端。</p><p>测试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6666</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//命令行参数指定IP和端口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(argc &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;at least 3 arguments: file ip port, but you give %d\n&quot;</span>, argc);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> port = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> lfd, cfd, ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>, <span class="title">clie_addr</span>;</span></span><br><span class="line">lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">//创建套接字</span></span><br><span class="line">    assert(lfd &gt;= <span class="number">0</span>);</span><br><span class="line">serv_addr.sin_family = AF_INET;</span><br><span class="line">serv_addr.sin_port = htons(port);</span><br><span class="line">    inet_pton(AF_INET, ip, &amp;serv_addr.sin_addr);</span><br><span class="line">    <span class="comment">//端口复用 此处没有卵用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt)); </span><br><span class="line"></span><br><span class="line">    ret = bind(lfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr) );</span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line">ret = listen(lfd, <span class="number">128</span>); <span class="comment">//最大同时连接数</span></span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line"><span class="type">socklen_t</span> clie_addr_len; <span class="comment">//套接字长度</span></span><br><span class="line">clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clie_addr, &amp;clie_addr_len );</span><br><span class="line">    <span class="keyword">if</span>(cfd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;accept error: %d&quot;</span>, errno);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        close(STDOUT_FILENO);</span><br><span class="line">        dup(cfd); <span class="comment">//创建一个新的文件描述符 该文件描述符和原文件描述符指向相同的文件 管道和网络连接</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;good night! daisy!\n&quot;</span>);</span><br><span class="line">        close(cfd);</span><br><span class="line">    &#125;</span><br><span class="line">close(lfd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EPOLLONESHOT事件">EPOLLONESHOT事件</h2><p>一个socket上的某个事件被触发多次，可能产生2个不同的线程处理同一个socket。我们期望的是一个socket在任一时刻都只被一个线程处理。对于注册了EPOLLONESHOT事件的文件描述符，操做系统最多触发其上注册的一个可读可写或者异常事件一次。注册了EPOLLONESHOT事件的socket一旦被某个线程处理完毕，应立即重置这个socket上的EPOLLONESHOT事件。</p><p>监听socket不应设置为EPOLLONESHOT。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 1024</span></span><br><span class="line"><span class="comment">//自定义的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fds</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> epollfd;</span><br><span class="line">    <span class="type">int</span> sockfd;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//设置文件描述符为非阻塞</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setnonblocking</span><span class="params">(<span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    <span class="type">int</span> old_option = fcntl(fd, F_GETFL);</span><br><span class="line">    <span class="type">int</span> new_option = old_option | O_NONBLOCK;</span><br><span class="line">    fcntl(fd, F_SETFL, new_option);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加到epoll内核事件表中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addfd</span><span class="params">(<span class="type">int</span> epollfd, <span class="type">int</span> fd, <span class="type">bool</span> oneshot)</span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLET;</span><br><span class="line">    <span class="keyword">if</span>(oneshot)&#123;</span><br><span class="line">        event.events |= EPOLLONESHOT;</span><br><span class="line">    &#125;</span><br><span class="line">    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &amp;event); <span class="comment">//挂到红黑树上</span></span><br><span class="line">    setnonblocking(fd); <span class="comment">//设置非阻塞 主要用在读写上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重置EPOLLONESHOT事件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reset_oneshot</span><span class="params">(<span class="type">int</span> epollfd, <span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLET | EPOLLONESHOT;</span><br><span class="line">    epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, &amp;event); <span class="comment">//修改注册事件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工作线程</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">worker</span><span class="params">(<span class="type">void</span>* arg)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sockfd = ((fds*)arg)-&gt;sockfd;</span><br><span class="line">    <span class="type">int</span> epollfd = ((fds*)arg)-&gt;epollfd;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;start new thread to receive data on fd: %d\n&quot;</span>, sockfd);</span><br><span class="line">    <span class="type">char</span> buf[MAX_SIZE];</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="string">&#x27;\0&#x27;</span>, MAX_SIZE);</span><br><span class="line">    <span class="comment">//循环读取sockfd上的数据 直到收到EAGAIN</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> ret = recv(sockfd, buf, MAX_SIZE<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">0</span>)&#123;</span><br><span class="line">            close(sockfd);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foreiner closed the connection\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(errno == EAGAIN)&#123;</span><br><span class="line">                reset_oneshot(epollfd ,sockfd);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;read later\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;get connection: %s\n&quot;</span>, buf);</span><br><span class="line">            <span class="comment">//休眠5s模拟数据处理过程</span></span><br><span class="line">            sleep(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;end thread receiving data on fd: %d\n&quot;</span>, sockfd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//命令行参数指定IP和端口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(argc &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;at least 3 arguments: file ip port, but you give %d\n&quot;</span>, argc);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> port = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> lfd, cfd, ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>, <span class="title">clie_addr</span>;</span></span><br><span class="line">lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">//创建套接字</span></span><br><span class="line">    assert(lfd &gt;= <span class="number">0</span>);</span><br><span class="line">serv_addr.sin_family = AF_INET;</span><br><span class="line">serv_addr.sin_port = htons(port);</span><br><span class="line">    inet_pton(AF_INET, ip, &amp;serv_addr.sin_addr);</span><br><span class="line">    <span class="comment">//端口复用 此处没有卵用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt)); </span><br><span class="line"></span><br><span class="line">    ret = bind(lfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr) );</span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line">ret = listen(lfd, <span class="number">128</span>); <span class="comment">//最大同时连接数</span></span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line">    epoll_event events[MAX_SIZE]; <span class="comment">//返回的数组上限</span></span><br><span class="line">    <span class="type">int</span> epollfd = epoll_create(<span class="number">10</span>);</span><br><span class="line">    assert(epollfd != <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//注意监听的套接字不能设置为oneshot</span></span><br><span class="line">    addfd(epollfd, lfd, <span class="literal">false</span>); <span class="comment">//挂上红黑树监听</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;addfd\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        ret = epoll_wait(epollfd, events, MAX_SIZE, <span class="number">-1</span>); <span class="comment">//永远不超时</span></span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;epoll failure\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ret; i++)&#123; <span class="comment">//循环处理有响应的事件</span></span><br><span class="line">            <span class="type">int</span> sockfd = events[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span>(sockfd == lfd)&#123; <span class="comment">//如果是监听事件则建立新的连接</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;lfd\n&quot;</span>);</span><br><span class="line">                <span class="type">socklen_t</span> clie_addr_len; <span class="comment">//套接字长度</span></span><br><span class="line">                clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">                cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clie_addr, &amp;clie_addr_len );</span><br><span class="line">                assert(cfd &gt;= <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//注册为oneshot事件</span></span><br><span class="line">                addfd(epollfd, cfd, <span class="literal">true</span>); <span class="comment">//刚刚这里加入的事件加错了</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(events[i].events &amp; EPOLLIN)&#123;</span><br><span class="line">                <span class="type">pthread_t</span> tid;</span><br><span class="line">                fds fds_for_new_worker;</span><br><span class="line">                fds_for_new_worker.epollfd = epollfd;</span><br><span class="line">                fds_for_new_worker.sockfd = sockfd;</span><br><span class="line">                <span class="comment">//新启动一个线程为sockfd服务</span></span><br><span class="line">                pthread_create(&amp;tid, <span class="literal">NULL</span>, worker, (<span class="type">void</span>*)&amp;fds_for_new_worker);</span><br><span class="line">                <span class="comment">// pthread_detach(tid); //线程分离</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">close(lfd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="信号屏蔽字">信号屏蔽字</h2><p>主要函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sigaddset()</span><br><span class="line">sigprocmask()</span><br><span class="line">sigpending()</span><br></pre></td></tr></table></figure><p>使用kill发送信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">-6</span> PID</span><br></pre></td></tr></table></figure><p>测试程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">sigset_t</span>* ped)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sigismember(ped, i)==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">sigset_t</span> myset, oldset, ped;</span><br><span class="line">    sigemptyset(&amp;myset);</span><br><span class="line">    <span class="comment">//设置自定义信号集</span></span><br><span class="line">    sigaddset(&amp;myset, SIGINT);</span><br><span class="line">    sigaddset(&amp;myset, SIGSEGV);</span><br><span class="line">    sigaddset(&amp;myset, SIGQUIT);</span><br><span class="line">    sigaddset(&amp;myset, SIGABRT);</span><br><span class="line">    <span class="comment">//设置信号屏蔽字</span></span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;myset, &amp;oldset);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        sigpending(&amp;ped);</span><br><span class="line">        print(&amp;ped);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="sigaction信号捕捉函数">sigaction信号捕捉函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">docatch</span><span class="params">(<span class="type">int</span> signo)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d signal has been catched!\n&quot;</span>, signo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">    act.sa_handler = docatch;</span><br><span class="line">    sigemptyset(&amp;act.sa_mask);</span><br><span class="line">    sigaddset(&amp;act.sa_mask, SIGINT);</span><br><span class="line">    </span><br><span class="line">    sigaddset(&amp;act.sa_mask, SIGSEGV);</span><br><span class="line">    sigaddset(&amp;act.sa_mask, SIGQUIT);</span><br><span class="line">    act.sa_flags = <span class="number">0</span>; <span class="comment">//默认属性 在信号函数处理期间 本信号再次到达默认屏蔽</span></span><br><span class="line">    sigaction(SIGINT, &amp;act, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="统一事件源">统一事件源</h2><p>把信号事件的处理放到epoll监听事件中去处理，统一了事件源。当调用信号处理函数时，信号处理函数通过管道将信息传达给epoll上的读端监听事件，再在主循环中处理事件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 1024</span></span><br><span class="line"><span class="comment">//自定义的结构体</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fds</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> epollfd;</span><br><span class="line">    <span class="type">int</span> sockfd;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//设置文件描述符为非阻塞</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setnonblocking</span><span class="params">(<span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    <span class="type">int</span> old_option = fcntl(fd, F_GETFL);</span><br><span class="line">    <span class="type">int</span> new_option = old_option | O_NONBLOCK;</span><br><span class="line">    fcntl(fd, F_SETFL, new_option);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加到epoll内核事件表中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addfd</span><span class="params">(<span class="type">int</span> epollfd, <span class="type">int</span> fd, <span class="type">bool</span> oneshot)</span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLET;</span><br><span class="line">    <span class="keyword">if</span>(oneshot)&#123;</span><br><span class="line">        event.events |= EPOLLONESHOT;</span><br><span class="line">    &#125;</span><br><span class="line">    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &amp;event); <span class="comment">//挂到红黑树上</span></span><br><span class="line">    setnonblocking(fd); <span class="comment">//设置非阻塞 主要用在读写上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//信号处理函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sig_handler</span><span class="params">(<span class="type">int</span> sig)</span>&#123;</span><br><span class="line">    <span class="type">int</span> save_errno = errno;</span><br><span class="line">    <span class="type">int</span> msg = sig; <span class="comment">//我猜想这里重新定义变量的原因在于传的是指针 同时为了保证可重入</span></span><br><span class="line">    send(pipefd[<span class="number">1</span>], (<span class="type">char</span>*)&amp;msg, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//pipefd[1]是非阻塞的如果发不出去直接返回</span></span><br><span class="line">    errno = save_errno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置信号处理</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addsig</span><span class="params">(<span class="type">int</span> sig)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sa</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;sa, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(sa));</span><br><span class="line">    sa.sa_handler = sig_handler;</span><br><span class="line">    sa.sa_flags |= SA_RESTART;</span><br><span class="line">    sigfillset(&amp;sa.sa_mask);</span><br><span class="line">    <span class="comment">// sigaddset(&amp;sa.sa_mask, SIGSEGV);</span></span><br><span class="line">    assert(sigaction(sig, &amp;sa, <span class="literal">NULL</span>) != <span class="number">-1</span>); <span class="comment">//注册监听的信号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行参数指定IP和端口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(argc &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;at least 3 arguments: file ip port, but you give %d\n&quot;</span>, argc);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> port = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> lfd, cfd, ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>, <span class="title">clie_addr</span>;</span></span><br><span class="line">lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">//创建套接字</span></span><br><span class="line">    assert(lfd &gt;= <span class="number">0</span>);</span><br><span class="line">serv_addr.sin_family = AF_INET;</span><br><span class="line">serv_addr.sin_port = htons(port);</span><br><span class="line">    inet_pton(AF_INET, ip, &amp;serv_addr.sin_addr);</span><br><span class="line">    <span class="comment">//端口复用 此处没有卵用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt)); </span><br><span class="line"><span class="comment">//忽略SIGPIPE信号</span></span><br><span class="line">    signal(SIGPIPE, SIG_IGN);</span><br><span class="line">    ret = bind(lfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr) );</span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line">ret = listen(lfd, <span class="number">128</span>); <span class="comment">//最大同时连接数</span></span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line">    epoll_event events[MAX_SIZE]; <span class="comment">//返回的数组上限</span></span><br><span class="line">    <span class="type">int</span> epollfd = epoll_create(<span class="number">10</span>);</span><br><span class="line">    assert(epollfd != <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//注意监听的套接字不能设置为oneshot</span></span><br><span class="line">    addfd(epollfd, lfd, <span class="literal">false</span>); <span class="comment">//挂上红黑树监听</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*使用socketpair创建全双工的管道*/</span></span><br><span class="line">    ret = socketpair(PF_UNIX, SOCK_STREAM, <span class="number">0</span>, pipefd);</span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line">    setnonblocking(pipefd[<span class="number">1</span>]); <span class="comment">//把写入的管道端置为非阻塞</span></span><br><span class="line">    addfd( epollfd, pipefd[<span class="number">0</span>], <span class="literal">false</span>); <span class="comment">//设置为oneshot</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置一些信号的处理函数*/</span></span><br><span class="line">    addsig(SIGHUP);</span><br><span class="line">    addsig(SIGCHLD);</span><br><span class="line">    addsig(SIGTERM);</span><br><span class="line">    addsig(SIGINT);</span><br><span class="line">    addsig(SIGSEGV);</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> stop_server = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stop_server)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;epoll_wait...\n&quot;</span>);</span><br><span class="line">        ret = epoll_wait(epollfd, events, MAX_SIZE, <span class="number">-1</span>); <span class="comment">//永远不超时</span></span><br><span class="line">        <span class="keyword">if</span>((ret &lt; <span class="number">0</span>) &amp;&amp; (errno != EINTR))&#123; <span class="comment">//这里要设置 被系统调用打断的不算失败 errno不是ret</span></span><br><span class="line">            perror(<span class="string">&quot;epoll failure&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ret; i++)&#123; <span class="comment">//循环处理有响应的事件</span></span><br><span class="line">            <span class="type">int</span> sockfd = events[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span>(sockfd == lfd)&#123; <span class="comment">//如果是监听事件则建立新的连接</span></span><br><span class="line">                </span><br><span class="line">                <span class="type">socklen_t</span> clie_addr_len; <span class="comment">//套接字长度</span></span><br><span class="line">                clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">                cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clie_addr, &amp;clie_addr_len );</span><br><span class="line">                assert(cfd &gt;= <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//注册为oneshot事件</span></span><br><span class="line">                addfd(epollfd, cfd, <span class="literal">true</span>); </span><br><span class="line"></span><br><span class="line">                <span class="comment">/*如果就绪的文件描述符是pipefd[0],就处理信号*/</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((sockfd == pipefd[<span class="number">0</span>]) &amp;&amp;(events[i].events &amp; EPOLLIN))&#123;</span><br><span class="line">                <span class="type">char</span> buf[MAX_SIZE];</span><br><span class="line">                <span class="type">int</span> num = recv(pipefd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(num == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//可能管道有多个信号满足 每次读出一个字符进行处理</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; num; j++)&#123;</span><br><span class="line">                        <span class="keyword">switch</span>(buf[j])&#123;</span><br><span class="line">                            <span class="keyword">case</span> SIGSEGV: <span class="built_in">puts</span>(<span class="string">&quot;段错误信号已处理，收到请回答！&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> SIGCHLD:</span><br><span class="line">                            <span class="keyword">case</span> SIGHUP: <span class="keyword">continue</span>;</span><br><span class="line">                            <span class="keyword">case</span> SIGTERM:</span><br><span class="line">                            <span class="keyword">case</span> SIGINT: stop_server = <span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;close fds\n&quot;</span>);</span><br><span class="line">    close(lfd);</span><br><span class="line">    close(pipefd[<span class="number">0</span>]);</span><br><span class="line">    close(pipefd[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="单例模式">单例模式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></span><br><span class="line">    private: <span class="comment">//无法调用构造函数</span></span><br><span class="line">        Singleton();</span><br><span class="line">        Singleton(<span class="type">const</span> Singleton&amp; other);</span><br><span class="line">    public:</span><br><span class="line">        <span class="type">static</span> Singleton* <span class="title function_">getInstance</span><span class="params">()</span>;</span><br><span class="line">        <span class="type">static</span> Singleton* m_instance;</span><br><span class="line">&#125;</span><br><span class="line">Singleton* Singleton::m_instance = nullptr;</span><br><span class="line"><span class="comment">//懒汉式 单线程版</span></span><br><span class="line">Singleton* <span class="title function_">Singleton::getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_instance == nullptr)&#123;</span><br><span class="line">        m_instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多线程版</span></span><br><span class="line">Singleton* <span class="title function_">Singleton::getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    LOCK lock;</span><br><span class="line">    <span class="keyword">if</span>(m_instance == nullptr)&#123;</span><br><span class="line">        m_instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="当前时间">当前时间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">time_t</span> tm;</span><br><span class="line">    time(&amp;tm);</span><br><span class="line">    <span class="type">char</span> time_string[<span class="number">128</span>];</span><br><span class="line">    ctime_r(&amp;tm, time_string);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, time_string);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初阶日志系统">初阶日志系统</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span>&#123;</span></span><br><span class="line">    public:</span><br><span class="line">        <span class="type">static</span> Logger* <span class="title function_">get_instance</span><span class="params">()</span>;</span><br><span class="line">        <span class="type">static</span> Logger* <span class="built_in">log</span>;</span><br><span class="line">        <span class="type">static</span> mutex log_mutex;</span><br><span class="line">        <span class="type">static</span> <span class="type">void</span> <span class="title function_">write_log</span><span class="params">(<span class="type">int</span> level, <span class="type">char</span>* s)</span>;</span><br><span class="line">        <span class="type">static</span> <span class="type">void</span> <span class="title function_">create_file</span><span class="params">()</span>;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> fd;</span><br><span class="line">    private:</span><br><span class="line">        Logger();</span><br><span class="line">        Logger(<span class="type">const</span> Logger&amp; other);</span><br><span class="line">        ~Logger();</span><br><span class="line">&#125;;</span><br><span class="line">Logger* Logger::<span class="built_in">log</span> = <span class="literal">NULL</span>;</span><br><span class="line">mutex Logger::log_mutex;</span><br><span class="line"><span class="type">int</span> Logger::fd = <span class="number">0</span>;</span><br><span class="line">Logger::Logger()&#123;&#125;;</span><br><span class="line">Logger::~Logger()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">log</span> != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        delete <span class="built_in">log</span>;</span><br><span class="line">        <span class="built_in">log</span> = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line">Logger* <span class="title function_">Logger::get_instance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">log</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        log_mutex.lock();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">log</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">log</span> = new Logger();</span><br><span class="line">        &#125;</span><br><span class="line">        log_mutex.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">log</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Logger::create_file</span><span class="params">()</span>&#123;</span><br><span class="line">    fd = open(<span class="string">&quot;logger.txt&quot;</span>, O_RDWR|O_CREAT|O_TRUNC, <span class="number">777</span>);</span><br><span class="line">    assert(fd &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Logger::write_log</span><span class="params">(<span class="type">int</span> level, <span class="type">char</span>* s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    log_mutex.lock();</span><br><span class="line">    write(fd, s, n);</span><br><span class="line">    log_mutex.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式-2">单例模式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++11 atomic</span></span><br><span class="line"><span class="built_in">std</span>::atomic&lt;Logger*&gt; Logger::<span class="built_in">log</span>;</span><br><span class="line"><span class="built_in">std</span>::mutex Logger::log_mutex;</span><br><span class="line">Logger* <span class="title function_">Logger::get_instance</span><span class="params">()</span>&#123;</span><br><span class="line">    Logger* tmp = <span class="built_in">log</span>.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">    <span class="built_in">std</span>::atomic_thread_fence(<span class="built_in">std</span>::memory_order_acquire); <span class="comment">//获取内存fence</span></span><br><span class="line">    <span class="keyword">if</span>(tmp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title function_">lock</span><span class="params">(log_mutex)</span>;</span><br><span class="line">        tmp = <span class="built_in">log</span>.load(<span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span>(tmp == NUll)&#123;</span><br><span class="line">            tmp = new Logger;</span><br><span class="line">            <span class="built_in">std</span>::atomic_thread_fence(<span class="built_in">std</span>::memory_order_release); <span class="comment">//释放内存fence</span></span><br><span class="line">            <span class="built_in">log</span>.store(tmp, <span class="built_in">std</span>::memory_order_relaxed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主线程测试">主线程测试</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;logger.h&quot;</span></span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">func</span><span class="params">(<span class="type">void</span>* arg)</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;thread id: %lu, process id: %u\n&quot;</span>, pthread_self(), getpid());</span><br><span class="line">    Logger::<span class="built_in">log</span>-&gt;write_log(<span class="number">2</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid; <span class="comment">//重命名的unsigned long 类型</span></span><br><span class="line">    Logger::<span class="built_in">log</span>-&gt;create_file();</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>, ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="comment">// int t = i;</span></span><br><span class="line">        ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, func, <span class="literal">NULL</span>); </span><br><span class="line">            <span class="keyword">if</span>(ret != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s pthread_create error&quot;</span>, strerror(ret));</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        pthread_detach(tid);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(n<span class="number">-4</span>); <span class="comment">//主线程 等待子线程执行完毕</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间堆">时间堆</h2><p>把监听文件描述符加入后，就启动定时器。</p><h2 id="exec函数族">exec函数族</h2><p>在一个程序中运行另一个程序。当进程调用exec函数时，该进程的用户空间代码和数据完全被新程序替换。调用exec并不创建新进程，所以调用exec前后进程的ID并不改变。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;fork error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        execlp(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;anythingok&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;-a&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;parent over!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管道">管道</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> fd[<span class="number">2</span>];</span><br><span class="line">    pipe(fd); <span class="comment">//创建管道</span></span><br><span class="line">    <span class="type">int</span> ret = fork();</span><br><span class="line">    <span class="keyword">if</span>(ret &gt; <span class="number">0</span>)&#123; <span class="comment">//父进程 父写 fd[0]读 fd[1]写</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">char</span> *str =<span class="string">&quot;hello world\n&quot;</span>;</span><br><span class="line">        write(fd[<span class="number">1</span>], str, <span class="built_in">strlen</span>(str));</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)&#123; <span class="comment">//子进程 子读 fd[1]关闭</span></span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> n = read(fd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="comment">//写到显示器上</span></span><br><span class="line">        write(<span class="number">1</span>, buf, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CGI使用管道和exec实现">CGI使用管道和exec实现</h2><p>hello里面的输入和输出都被重定向了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> agrc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> bf[<span class="number">100</span>];</span><br><span class="line">    read(STDIN_FILENO, bf, <span class="keyword">sizeof</span>(bf));</span><br><span class="line">    <span class="built_in">sprintf</span>(bf, <span class="string">&quot;Content-Type:text/html;\r\n\r\nhello world, 你好!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, bf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主进程调用已经编译完毕的hello可执行文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid; </span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="type">int</span> cgi_input[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> cgi_output[<span class="number">2</span>];</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">/*创建输入管道*/</span></span><br><span class="line">    <span class="keyword">if</span>(pipe(cgi_input) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*创建输出管道*/</span></span><br><span class="line">    <span class="keyword">if</span>(pipe(cgi_output) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*创建子进程*/</span></span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;fork error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123; </span><br><span class="line">        dup2(cgi_input[<span class="number">0</span>], <span class="number">0</span>); <span class="comment">/*将子进程的STDIN重定向到cgi_input[0]*/</span></span><br><span class="line">        dup2(cgi_output[<span class="number">1</span>], <span class="number">1</span>); <span class="comment">/*将子进程的STDOUT重定向到cgi_output[1]*/</span></span><br><span class="line">        <span class="comment">/*关闭剩余的两端*/</span></span><br><span class="line">        close(cgi_input[<span class="number">1</span>]);</span><br><span class="line">        close(cgi_output[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">/*执行exec文件 即cgi*/</span></span><br><span class="line">        execl(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;anythingok&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;  <span class="comment">/*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/</span></span><br><span class="line">        <span class="comment">/*关闭不用的两个端口*/</span></span><br><span class="line">        close(cgi_input[<span class="number">0</span>]); </span><br><span class="line">        close(cgi_output[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">char</span> tmp[<span class="number">100</span>]=<span class="string">&quot;hello child process&quot;</span>;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(tmp);</span><br><span class="line">        <span class="comment">/*父进程先写数据*/</span></span><br><span class="line">        write(cgi_input[<span class="number">1</span>], tmp, len);</span><br><span class="line">        <span class="comment">/*父进程阻塞等待读入*/</span></span><br><span class="line">        <span class="type">int</span> n = read(cgi_output[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="type">int</span> ret = write(STDOUT_FILENO, buf, n);</span><br><span class="line">        <span class="comment">/*关闭管道*/</span></span><br><span class="line">        close(cgi_input[<span class="number">1</span>]);</span><br><span class="line">        close(cgi_output[<span class="number">0</span>]);</span><br><span class="line">        waitpid(pid, &amp;status, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程服务器">多线程服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_PORT 9999</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 2048</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wait_child</span><span class="params">(<span class="type">int</span> signo)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(waitpid(<span class="number">0</span>, <span class="literal">NULL</span>, WNOHANG) &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">createlistenfd</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">int</span> fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">//创建套接字</span></span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化servaddr结构体</span></span><br><span class="line">    bzero(&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_port = htons(SERV_PORT);</span><br><span class="line">    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    <span class="comment">//端口复用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line">    <span class="comment">//绑定端口</span></span><br><span class="line">    ret = bind(fd, (<span class="keyword">struct</span> sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置监听上限</span></span><br><span class="line">    ret = listen(fd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret==<span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">work</span><span class="params">(<span class="type">int</span> cfd, <span class="type">char</span>* s)</span>&#123;</span><br><span class="line">    <span class="type">char</span> filename[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sscanf</span>(s, <span class="string">&quot;GET /%s&quot;</span>, filename);</span><br><span class="line">    <span class="type">char</span> *mime;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strstr</span>(s, <span class="string">&quot;.html&quot;</span>)) mime = <span class="string">&quot;text/html&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strstr</span>(s, <span class="string">&quot;.jpg&quot;</span>)) mime=<span class="string">&quot;image/jpeg&quot;</span>;</span><br><span class="line">    <span class="comment">//构建响应头 发给客户端</span></span><br><span class="line">    <span class="comment">// printf(&quot;%s\n&quot;, filename);</span></span><br><span class="line">    <span class="type">char</span> response[MAXSIZE];</span><br><span class="line">    <span class="built_in">sprintf</span>(response, <span class="string">&quot;HTTP/1.1 200 OK\r\nContent-Type: %s\r\n\r\n&quot;</span>, mime);</span><br><span class="line">    <span class="comment">//读取具体的文件内容</span></span><br><span class="line">    <span class="type">int</span> filefd = open(filename, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(filefd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        sleep(<span class="number">0.5</span>);</span><br><span class="line">        filefd = open(filename, O_RDONLY); <span class="comment">//很奇怪 为什么睡几秒钟之后再打开就不会出错了</span></span><br><span class="line">        <span class="keyword">if</span>(filefd == <span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(response);</span><br><span class="line">    <span class="type">int</span> n = read(filefd, response+len, <span class="keyword">sizeof</span>(response)-len); </span><br><span class="line">    write(cfd, response, len+n);</span><br><span class="line">    close(filefd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> lfd = createlistenfd();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientaddr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> clientaddrlen = <span class="keyword">sizeof</span>(clientaddr); <span class="comment">//这是一个传出参数</span></span><br><span class="line">    <span class="comment">//accept接受连接请求</span></span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> cfd;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr *)&amp;clientaddr, &amp;clientaddrlen);</span><br><span class="line">        <span class="keyword">if</span> (cfd == <span class="number">-1</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建子线程 主线程负责监听和回收子进程</span></span><br><span class="line">        pid = fork(); </span><br><span class="line">        <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            close(cfd); <span class="comment">//关闭接收文件描述符</span></span><br><span class="line">            signal(SIGCHLD, wait_child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        close(lfd); <span class="comment">//关闭监听文件描述符</span></span><br><span class="line">        <span class="comment">//打印客户端IP和port</span></span><br><span class="line">        <span class="type">char</span> buf[MAXSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;client IP: %s, client port: %d\n&quot;</span>,</span><br><span class="line">            inet_ntop(AF_INET, &amp;clientaddr.sin_addr, buf, <span class="keyword">sizeof</span>(buf)),</span><br><span class="line">            ntohs(clientaddr.sin_port));</span><br><span class="line">        <span class="type">int</span> n = read(cfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            close(cfd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// write(1, buf, n);</span></span><br><span class="line">        <span class="keyword">else</span> work(cfd, buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理客户端注册信息的cgi">处理客户端注册信息的cgi</h2><ul><li>存在一些问题，每个网页好像没有传输完成，浏览器总是转圈。</li><li>需要结合上面hello程序查询数据库，hello程序的注册还没完善，只能做到查询。等以后有空再做吧。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 1024</span></span><br><span class="line"><span class="comment">//自定义的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fds</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> epollfd;</span><br><span class="line">    <span class="type">int</span> sockfd;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//设置文件描述符为非阻塞</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setnonblocking</span><span class="params">(<span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    <span class="type">int</span> old_option = fcntl(fd, F_GETFL);</span><br><span class="line">    <span class="type">int</span> new_option = old_option | O_NONBLOCK;</span><br><span class="line">    fcntl(fd, F_SETFL, new_option);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加到epoll内核事件表中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addfd</span><span class="params">(<span class="type">int</span> epollfd, <span class="type">int</span> fd, <span class="type">bool</span> oneshot)</span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLET;</span><br><span class="line">    <span class="keyword">if</span>(oneshot)&#123;</span><br><span class="line">        event.events |= EPOLLONESHOT;</span><br><span class="line">    &#125;</span><br><span class="line">    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &amp;event); <span class="comment">//挂到红黑树上</span></span><br><span class="line">    setnonblocking(fd); <span class="comment">//设置非阻塞 主要用在读写上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除epoll事件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">removefd</span><span class="params">(<span class="type">int</span> epollfd, <span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, <span class="literal">NULL</span>);</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重置EPOLLONESHOT事件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reset_oneshot</span><span class="params">(<span class="type">int</span> epollfd, <span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLET | EPOLLONESHOT;</span><br><span class="line">    epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, &amp;event); <span class="comment">//修改注册事件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">accept_request</span><span class="params">(<span class="type">int</span> epollfd, <span class="type">int</span> sockfd, <span class="type">char</span> *s)</span>&#123;</span><br><span class="line">    <span class="type">char</span> method[<span class="number">32</span>], filename[<span class="number">32</span>], account[<span class="number">32</span>], password[<span class="number">32</span>], phone[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">sscanf</span>(s, <span class="string">&quot;%s /%s&quot;</span>, method, filename);</span><br><span class="line">    <span class="keyword">if</span>(strcasecmp(method, <span class="string">&quot;POST&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">2</span>&lt;len &amp;&amp; s[i]==<span class="string">&#x27;\n&#x27;</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="string">&#x27;\r&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        i=i+<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; s[i+j]!=<span class="string">&#x27;&amp;&#x27;</span>; j++) account[j] = s[j+i];</span><br><span class="line">        i = i+j+<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; s[i+j]!=<span class="string">&#x27;&amp;&#x27;</span>; j++) password[j] = s[j+i];</span><br><span class="line">        <span class="comment">/*2020.4.7成功解析出来账号和密码*/</span></span><br><span class="line">        <span class="type">pid_t</span> pid; </span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line">        <span class="type">int</span> cgi_input[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> cgi_output[<span class="number">2</span>];</span><br><span class="line">        <span class="type">char</span> buff[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">/*创建输入管道*/</span></span><br><span class="line">        <span class="keyword">if</span>(pipe(cgi_input) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;pipe error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*创建输出管道*/</span></span><br><span class="line">        <span class="keyword">if</span>(pipe(cgi_output) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;pipe error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*创建子进程*/</span></span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;fork error!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123; </span><br><span class="line">            dup2(cgi_input[<span class="number">0</span>], <span class="number">0</span>); <span class="comment">/*将子进程的STDIN重定向到cgi_input[0]*/</span></span><br><span class="line">            dup2(cgi_output[<span class="number">1</span>], <span class="number">1</span>); <span class="comment">/*将子进程的STDOUT重定向到cgi_output[1]*/</span></span><br><span class="line">            <span class="comment">/*关闭剩余的两端*/</span></span><br><span class="line">            close(cgi_input[<span class="number">1</span>]);</span><br><span class="line">            close(cgi_output[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">/*执行exec文件 即cgi*/</span></span><br><span class="line">            execl(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;anythingok&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;  <span class="comment">/*父进程先给子进程发送数据 然后等待子进程执行完 再读数据*/</span></span><br><span class="line">            <span class="comment">/*关闭不用的两个端口*/</span></span><br><span class="line">            close(cgi_input[<span class="number">0</span>]); </span><br><span class="line">            close(cgi_output[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">/*父进程先写数据*/</span></span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">strlen</span>(account);</span><br><span class="line">            write(cgi_input[<span class="number">1</span>], account, len);</span><br><span class="line">            <span class="comment">/*父进程阻塞等待读入*/</span></span><br><span class="line">            <span class="type">int</span> n = read(cgi_output[<span class="number">0</span>], buff, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(buff, password)==<span class="number">0</span>&amp;&amp;<span class="built_in">strlen</span>(password) != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;密码正确&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">                <span class="built_in">strcpy</span>(filename, <span class="string">&quot;register.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// int ret = write(STDOUT_FILENO, buf, n);</span></span><br><span class="line">            <span class="comment">/*关闭管道*/</span></span><br><span class="line">            close(cgi_input[<span class="number">1</span>]);</span><br><span class="line">            close(cgi_output[<span class="number">0</span>]);</span><br><span class="line">            waitpid(pid, &amp;status, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">puts</span>(filename);</span><br><span class="line">    <span class="type">char</span> mime[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strstr</span>(s, <span class="string">&quot;.html&quot;</span>)) <span class="built_in">strcpy</span>(mime,<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strstr</span>(s, <span class="string">&quot;.jpg&quot;</span>)) <span class="built_in">strcpy</span>(mime,<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    <span class="type">char</span> response[MAX_SIZE+MAX_SIZE];</span><br><span class="line">    <span class="built_in">sprintf</span>(response, <span class="string">&quot;HTTP/1.1 200 OK\r\nContent-Type: %s\r\n\r\n&quot;</span>, mime);</span><br><span class="line">    <span class="type">int</span> filefd = open(filename, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(filefd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(response);</span><br><span class="line">    <span class="type">int</span> n = read(filefd, response+len, <span class="keyword">sizeof</span>(response)-len); </span><br><span class="line">    write(sockfd, response, len+n);</span><br><span class="line">    close(filefd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工作线程</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">worker</span><span class="params">(<span class="type">void</span>* arg)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sockfd = ((fds*)arg)-&gt;sockfd;</span><br><span class="line">    <span class="type">int</span> epollfd = ((fds*)arg)-&gt;epollfd;</span><br><span class="line">    <span class="type">char</span> buf[MAX_SIZE];</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="string">&#x27;\0&#x27;</span>, MAX_SIZE);</span><br><span class="line">    <span class="comment">//循环读取sockfd上的数据 直到收到EAGAIN</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> ret = recv(sockfd, buf, MAX_SIZE<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">0</span>)&#123;</span><br><span class="line">            removefd(epollfd, sockfd);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;foreiner closed the connection\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(errno == EAGAIN)&#123;</span><br><span class="line">                <span class="comment">// reset_oneshot(epollfd ,sockfd);</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;read later\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;get connection:\n&quot;</span>);</span><br><span class="line">            <span class="comment">//休眠5s模拟数据处理过程</span></span><br><span class="line">            accept_request(epollfd, sockfd, buf);</span><br><span class="line">            sleep(<span class="number">5</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//命令行参数指定IP和端口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;at least 2 arguments: file port, but you give %d\n&quot;</span>, argc);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> port = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> lfd, cfd, ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>, <span class="title">clie_addr</span>;</span></span><br><span class="line">lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">//创建套接字</span></span><br><span class="line">    assert(lfd &gt;= <span class="number">0</span>);</span><br><span class="line"> <span class="comment">/*初始化服务器端的套接字地址*/</span></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(port);</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    <span class="comment">//端口复用 此处没有卵用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt)); </span><br><span class="line"></span><br><span class="line">    ret = bind(lfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr) );</span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line">ret = listen(lfd, <span class="number">128</span>); <span class="comment">//最大同时连接数</span></span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line">    epoll_event events[MAX_SIZE]; <span class="comment">//返回的数组上限</span></span><br><span class="line">    <span class="type">int</span> epollfd = epoll_create(<span class="number">10</span>);</span><br><span class="line">    assert(epollfd != <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//注意监听的套接字不能设置为oneshot</span></span><br><span class="line">    addfd(epollfd, lfd, <span class="literal">false</span>); <span class="comment">//挂上红黑树监听</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        ret = epoll_wait(epollfd, events, MAX_SIZE, <span class="number">-1</span>); <span class="comment">//永远不超时</span></span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;epoll failure\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ret; i++)&#123; <span class="comment">//循环处理有响应的事件</span></span><br><span class="line">            <span class="type">int</span> sockfd = events[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span>(sockfd == lfd)&#123; <span class="comment">//如果是监听事件则建立新的连接</span></span><br><span class="line">                <span class="type">socklen_t</span> clie_addr_len; <span class="comment">//套接字长度</span></span><br><span class="line">                clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">                cfd = accept(lfd, (<span class="keyword">struct</span> sockaddr*)&amp;clie_addr, &amp;clie_addr_len );</span><br><span class="line">                assert(cfd &gt;= <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//注册为oneshot事件</span></span><br><span class="line">                addfd(epollfd, cfd, <span class="literal">false</span>); <span class="comment">//刚刚这里加入的事件加错了</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(events[i].events &amp; EPOLLIN)&#123;</span><br><span class="line">                <span class="type">pthread_t</span> tid;</span><br><span class="line">                fds fds_for_new_worker;</span><br><span class="line">                fds_for_new_worker.epollfd = epollfd;</span><br><span class="line">                fds_for_new_worker.sockfd = sockfd;</span><br><span class="line">                <span class="comment">//新启动一个线程为sockfd服务</span></span><br><span class="line">                pthread_create(&amp;tid, <span class="literal">NULL</span>, worker, (<span class="type">void</span>*)&amp;fds_for_new_worker);</span><br><span class="line">                <span class="comment">// pthread_detach(tid); //线程分离</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">close(lfd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程中调用fork函数">线程中调用fork函数</h2><p>pthread_atfork函数确保fork调用后父进程和子进程都拥有一个清楚的锁状态。每个线程都可以独立的设置信号掩码。</p><h2 id="waitpid回收子进程">waitpid回收子进程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigchild_handler</span><span class="params">(<span class="type">int</span> sig)</span>&#123;</span><br><span class="line">    <span class="comment">//在执行SIGCHLD信号期间 可能有多个SIGCHLD到达，但是未决信号集只记录一次。</span></span><br><span class="line">    <span class="comment">//所以需要调用while循环回收再退出</span></span><br><span class="line">    <span class="keyword">while</span>(waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;回收成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>, i;</span><br><span class="line">    signal(SIGCHLD, sigchild_handler);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//子进程 直接退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; n)&#123; <span class="comment">//子进程</span></span><br><span class="line">        sleep(i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am %dth child.\n&quot;</span>, i);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123; <span class="comment">//父进程不退出</span></span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;I am parent %u\n&quot;</span>, getpid());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自旋锁">自旋锁</h2><p>线程同步的一种方式。使用自旋锁的线程会反复检查锁变量是否可用。自旋锁不会让出CPU，一种忙等待状态。死循环等待锁被释放。<strong>自旋锁避免了进程或线程上下文的开销</strong>。自旋锁不适合在单CPU中使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e7</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">pthread_spinlock_t</span> spin_lock;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *)</span>&#123; </span><br><span class="line">    <span class="type">int</span> times = N;</span><br><span class="line">    <span class="keyword">while</span>(times--)&#123;</span><br><span class="line">        pthread_spin_lock(&amp;spin_lock);</span><br><span class="line">        ++num;</span><br><span class="line">        pthread_spin_unlock(&amp;spin_lock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">comsumer</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    <span class="type">int</span> times = N;</span><br><span class="line">    <span class="keyword">while</span>(times--)&#123;</span><br><span class="line">        pthread_spin_lock(&amp;spin_lock);</span><br><span class="line">        --num;</span><br><span class="line">        pthread_spin_unlock(&amp;spin_lock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    pthread_spin_init(&amp;spin_lock, <span class="number">0</span>);</span><br><span class="line">    <span class="type">pthread_t</span> th1, th2;</span><br><span class="line">    pthread_create(&amp;th1, <span class="literal">NULL</span>, &amp;producer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;th2, <span class="literal">NULL</span>, &amp;comsumer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(th1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(th2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num =  %d\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="条件变量">条件变量</h2><p>条件变量本身不是锁，但它可以造成线程阻塞。通常与互斥锁配合使用。给多线程提供一个汇合的场所。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pthread_cond_wait(&amp;cond, &amp;mutex)</span><br><span class="line"><span class="number">1.</span> 阻塞等待该条件变量直到满足 <span class="number">2.</span>释放已经掌握的互斥锁 <span class="number">3.</span>满足条件后重新拿锁</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_BUF = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *)</span>&#123; </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">       pthread_mutex_lock(&amp;mutex);</span><br><span class="line">       <span class="keyword">while</span>(num &gt;= MAX_BUF)&#123; <span class="comment">//由于阻塞解除时，只有一个物品可用 但是却有多个线程解除阻塞 所以需要循环检测一次</span></span><br><span class="line">           <span class="comment">//满了 等待消费者消费</span></span><br><span class="line">           pthread_cond_wait(&amp;cond, &amp;mutex);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;缓冲区满了 等待消费者消费\n&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//生产一个物品</span></span><br><span class="line">        ++num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;生产一个产品，当前产品数量为：%d\n&quot;</span>, num);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        <span class="comment">//通知消费者可消费了</span></span><br><span class="line">        pthread_cond_signal(&amp;cond);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;通知消费者...\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">comsumer</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">       pthread_mutex_lock(&amp;mutex);</span><br><span class="line">       <span class="keyword">while</span>(num &lt;= <span class="number">0</span>)&#123; </span><br><span class="line">           <span class="comment">//缓冲区为空 等待生产者生产</span></span><br><span class="line">           pthread_cond_wait(&amp;cond, &amp;mutex);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;缓冲区空了 等待生产者生产\n&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//生产一个物品</span></span><br><span class="line">        --num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;消费一个产品，当前产品数量为：%d\n&quot;</span>, num);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        <span class="comment">//通知消费者可消费了</span></span><br><span class="line">        pthread_cond_signal(&amp;cond);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;通知生产者...\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> th1, th2;</span><br><span class="line">    pthread_create(&amp;th1, <span class="literal">NULL</span>, &amp;producer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;th2, <span class="literal">NULL</span>, &amp;comsumer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(th1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(th2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num =  %d\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
          <category> C++项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> C++项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面经】CVTE</title>
      <link href="/HEXO/2025/09/07/0306CVTE/"/>
      <url>/HEXO/2025/09/07/0306CVTE/</url>
      
        <content type="html"><![CDATA[<ol><li>自我介绍</li><li>项目web服务器提问(跟socket相关的事件有哪些？epoll监听了socket哪些事件？用的什么模式水平触发还是边沿触发模式？你用的是阻塞IO还是非阻塞IO，为什么用非阻塞?)</li><li>C++多态是怎么实现的？答到虚函数表指针就就结束了</li><li>构造函数可以是虚函数吗？不可以，为什么？</li><li>析构函数可以是虚函数吗？可以。根据我回答扩展的一个问题：父类析构不是虚函数，他的子类有一个父类指针指向子类的对象，然后我释放这个父类指针的时候会调用子类的虚构函数吗？不会。我觉得应该应该回答继承时的虚构顺序，当时没想起。如果不会调用析构函数，子类会被释放吗？不会。面试官主动放弃该话题。</li><li>简单说一下new/delete和malloc和free</li><li>C++11用过哪些？auto, unordered_map, 智能指针</li><li>TCP黏包问题如何解决？</li><li>TCP的拥塞控制？我答了拥塞窗口。他想听慢重传和快恢复</li><li>TIME_WAIT状态解释一下，如何解决这个问题？端口复用</li><li>A和B建立连接以后，A拔掉网线,那这个时候B和A的连接还在吗？哪一方会发现呢？不要答心跳包。面试官主动放弃该话题。</li><li>说一下多进程和多线程的区别。线程共享哪些内容。</li><li>又TM扯到项目中的线程数了。线程的模型是什么样的。</li><li>还有什么想问我的？问了他这个岗位做啥的。面向企业的视频会议。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 面经 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面经】腾讯成都</title>
      <link href="/HEXO/2025/09/07/0402%E8%85%BE%E8%AE%AF%E6%88%90%E9%83%BD/"/>
      <url>/HEXO/2025/09/07/0402%E8%85%BE%E8%AE%AF%E6%88%90%E9%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="腾讯成都">腾讯成都</h2><ol><li>自我介绍</li><li>详细讲一下你的项目</li><li>并发量和数据传输效率</li><li>TCP拥塞机制</li><li>进程有几种状态</li><li>事务要满足几个特性</li><li>B+树特征是什么样的</li><li>B+树查询过程</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 面经 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面经】腾讯深圳</title>
      <link href="/HEXO/2025/09/07/0408%E8%85%BE%E8%AE%AF%E6%B7%B1%E5%9C%B3/"/>
      <url>/HEXO/2025/09/07/0408%E8%85%BE%E8%AE%AF%E6%B7%B1%E5%9C%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="腾讯深圳4月8号">腾讯深圳4月8号</h2><ol><li>在你看来epoll是个什么样的东西，边沿触发和水平触发的模式</li><li>epoll的通知机制</li><li>线程和进程的区别</li><li>多线程和多进程的选择上以什么作为考量</li><li>堆的数据结构（可能应该写一个类，然后封装一些函数）</li><li>C++内存模型</li><li>static会被放在导出符号表里吗</li><li>网络层和传输层最大的区别是什么</li><li>TCP头部有哪些</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 面经 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面经】字节跳动</title>
      <link href="/HEXO/2025/09/07/0418%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
      <url>/HEXO/2025/09/07/0418%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>2020.4.18</p><h2 id="一面-50min">一面 50min</h2><ol><li>在C++里面我们什么时候会把析构函数写为虚函数呢</li><li>C++中引用和指针有什么样的区别</li><li>右值引用，移动语义和完美转发在C++11中起到的作用</li><li>简单介绍一下RAII这个机制</li><li>简单介绍一下http请求和响应的结构</li><li>状态码分为几个类别</li><li>301和302这两个状态码有什么样的区别呢</li><li>断点续传的功能206</li><li>服务器什么时候返回304这个状态码，需要带上一些什么样的特征呢</li><li>能简单的介绍一下chunk transfer是一种什么样的传输方式呢</li><li>简单介绍一下linux下常用的IO多路复用模型</li><li>用epoll实现一个server时浏览器主动关闭了一个连接那么epoll收到的是什么事件呢</li><li>简单介绍一下惊群的现象是一个什么样的现象，有什么的办法解决这个现象呢</li><li>linux下单进程最大连接数受到哪些因素的限制呢</li><li>time_wait起到的作用，有什么办法降低这种状态的数量</li><li>编程题：编辑距离</li></ol><h2 id="二面-60min">二面 60min</h2><ol><li>讲一下进程和线程的区别</li><li>分页和分段的区别是什么</li><li>死锁和如何避免死锁</li><li>介绍一下TCP协议和UDP协议的区别</li><li>客户端发起连接以后，突然断电了，客户端断开了连接，会产生什么影响</li><li>TCP半连接状态解释一下</li><li>https密钥交互过程</li><li>close_wait的状态</li><li>499状态码</li><li>myisam和innoDB的区别</li><li>B+的调整过程</li><li>联合索引和最左原则</li><li>我们有哪些分表原则，在什么情况下使用这些分表原则</li><li>深浅拷贝解释一下，深浅拷贝的效率上有什么区别呢</li><li>栈溢出的原因</li><li>讲一下堆和栈的区别</li><li>编程题：判环和leetcode原题简化路径</li></ol><h2 id="三面-30min">三面 30min</h2><ol><li>输入网址后发生了什么</li><li>我经常会用一些CDN进行静态和动态的加速这个了解吗</li><li>DNS解析的时候DNS污染是怎么回事</li><li>mysql在分表时是怎么做的</li><li>mysql出现慢查询都有哪些原因</li><li>什么样的sql会产生IO瓶颈，什么样的sql会产生CPU瓶颈</li><li>TCP改成两次握手会产生什么现象，会有问题吗</li><li>http和https的区别是什么</li><li>编程题：矩阵中最长递增路径</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 面经 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【面经】网易互娱</title>
      <link href="/HEXO/2025/09/07/0421%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1/"/>
      <url>/HEXO/2025/09/07/0421%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1/</url>
      
        <content type="html"><![CDATA[<ol><li>自我介绍</li><li>python有过深入了解吗？</li><li>面向过程和面向对象哪一块用的比较多？那你用面向对象做了哪些工作</li><li>说一下C++的编译过程，编译过程中宏定义和const的区别是什么？在大型工程中用const好一些还是宏定义好一些？</li><li>内联函数有了解过吗？讲一下。</li><li>虚函数</li><li>内联函数和虚函数谁的执行效率更快？为什么？那静态函数呢</li><li>静态函数和普通函数运行效率有什么差距吗？</li><li>进程和线程？进程内存分布讲一下</li><li>堆和栈的区别</li><li>堆里面申请内存有哪些方式？new和malloc的区别</li><li>在构造函数里面能调用虚函数吗？为什么？如果子类在构造函数中调用了父类的虚函数会发生什么？</li><li>在析构函数里面能不能抛出异常？如果抛出会发生什么</li><li>C++内存泄漏有哪些？一个类既不继承也不是子类，内部也没有虚函数，那他的析构函数需要声明为虚函数吗</li><li>C++发生内存泄漏有什么好的办法来解决这个问题？</li><li>智能指针的实现原理是什么？循环引用如何解决</li><li>TCP和UDP的区别？</li><li>平时玩游戏吗？LOL。你觉得LOL的战斗逻辑是如何发送到客户端上的？TCP还是UDP</li><li>平时有了解过帧同步和状态同步吗？</li><li>设计模式有了解过吗？单例模式主要用于什么情况</li><li>比较大型的MVCC了解过吗</li><li>如果让你来设计一个LOL商城系统，有一些商城的数据，你会如何用代码来建这个商城？</li><li>有1W个数字，找出最大的10个数字</li><li>O(N)的排序有哪些？讲一下基数排序和桶排序</li><li>20G的字符串，只有4G的内存，找到出现最多的前10个的字符串？</li><li>GPU的渲染(管线)了解过吗？图形学有学过吗？</li><li>你为什么会选择来做游戏？更倾向于做客户端还是服务器的？</li><li>dota了解吗</li><li>给我简单介绍了一下帧同步和状态同步，然后有一个moba的游戏，使用帧同步还是状态同步？</li><li>玩游戏时掉帧后恢复是使用的帧同步还是状态同步？</li><li>提问环节：比较关注实习生的哪些技能和知识？核心的还是学习和反应能力，反应快的，有面向对象的大工程的经验。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 面经 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++其他相关问题</title>
      <link href="/HEXO/2025/09/07/%E3%80%90C++%E3%80%91%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98/"/>
      <url>/HEXO/2025/09/07/%E3%80%90C++%E3%80%91%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="string转char">string转char*</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *str = <span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(str.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure><h2 id="深拷贝">深拷贝</h2><p>浅拷贝就是一个对象拷贝另一个对象的内容以后，其中一个对象的改变还会影响另一个对象的内容。</p><p><strong>编译器默认拷贝构造函数是浅拷贝，如果在类中分配了堆内存，可能导致内存的重复释放。</strong></p><p><strong>为了解决浅拷贝的问题，通常需要自己实现拷贝构造函数，变为深拷贝。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> height)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;height = <span class="keyword">new</span> <span class="built_in">int</span>(height);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = p.age;</span><br><span class="line"><span class="keyword">this</span>-&gt;height = <span class="keyword">new</span> <span class="built_in">int</span>(*p.height); </span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Person</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;析构&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">delete</span> height;</span><br><span class="line">height = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span>* height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>,<span class="number">190</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">cout&lt;&lt;p<span class="number">2.</span>age&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*p<span class="number">2.</span>height&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="linux常用命令">linux常用命令</h2><ul><li><p>awk 参数 脚本 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print  NR NF &quot;\t&quot;  $0, $1 &#125;&#x27;</span><br></pre></td></tr></table></figure></li><li><p>wc -c 字符数 -l 行数 -w 单词数</p></li><li><p>sort</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sort -r coin.txt 逆序</span><br><span class="line">sort -n coin.txt 数值</span><br></pre></td></tr></table></figure></li></ul><h2 id="partition函数">partition函数</h2><p>快排中的partition函数在algorithm库中有实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//按照关键字划分 返回不满足条件的首个位置下标</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; v&#123;<span class="number">19</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> key = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">auto</span> t = partition(v.begin(), v.end(), [key](<span class="type">int</span> a)&#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; key;</span><br><span class="line">    &#125;) - v.begin();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x: v) <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bind函数">bind函数</h2><p>参数绑定。通用的函数适配器。接受一个可调用对象，生成一个新的可调用对象。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">using <span class="built_in">std</span>::placeholders::_1;</span><br><span class="line">using <span class="built_in">std</span>::placeholders::_2;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">( <span class="type">int</span> a,  <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//使用bind()将函数转换为仿函数</span></span><br><span class="line">    <span class="comment">//从大到小</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">99</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    sort(v.begin(), v.end(), bind(cmp, _1, _2));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x: v) <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda表达式">lambda表达式</h2><p>未命名的内联函数。一般来说应该减少捕获的数据量，避免捕获指针和引用。捕获列表和函数体是必不可少的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//lambda表达式 匿名函数对象</span></span><br><span class="line">    <span class="keyword">auto</span> f = [](<span class="type">const</span> <span class="type">int</span> &amp;a)&#123;</span><br><span class="line">        <span class="keyword">return</span> a*a;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f(<span class="number">5</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="function函数">function函数</h2><p>函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//function是一个模板 相当于函数指针 function&lt;return(args)&gt; ff = func;</span></span><br><span class="line">    function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; ff = f;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ff(<span class="number">55</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tuple函数">tuple函数</h2><p>优势在于传输一次性的一组数据，如果要大量使用，实际上不及结构体清晰明了。</p><p>可以将tuple用在map中作为多索引值。可以用来比较两个tuple类型的字典序大小。</p><p><strong>tuple可以存引用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//usage</span></span><br><span class="line">    <span class="built_in">std</span>::tuple&lt;<span class="type">int</span>, <span class="built_in">string</span>, <span class="type">char</span>&gt; <span class="title function_">t</span><span class="params">(<span class="number">32</span>, <span class="string">&quot;Penny&quot;</span>, <span class="string">&#x27;A&#x27;</span>)</span>;</span><br><span class="line">    <span class="comment">//output</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;get&lt;<span class="number">0</span>&gt;(t)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//32</span></span><br><span class="line">    get&lt;<span class="number">1</span>&gt;(t) = <span class="string">&quot;Alex&quot;</span>; <span class="comment">//reference</span></span><br><span class="line">    <span class="comment">//assignment </span></span><br><span class="line">    tuple&lt;<span class="type">int</span>, <span class="built_in">string</span>, <span class="type">char</span>&gt; t2;</span><br><span class="line">    t2 = tuple&lt;<span class="type">int</span>, <span class="built_in">string</span>, <span class="type">char</span>&gt;(<span class="number">24</span>, <span class="string">&quot;Alex&quot;</span>, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    t2 = make_tuple(<span class="number">17</span>, <span class="string">&quot;Jun&quot;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="comment">//tuple can store reference </span></span><br><span class="line">    <span class="built_in">string</span> st = <span class="string">&quot;In for a penny&quot;</span>;</span><br><span class="line">    tupel&lt;<span class="built_in">string</span>&amp;&gt; <span class="title function_">t3</span><span class="params">(st)</span>;</span><br><span class="line">    t3 = make_tuple(ref(st));</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">string</span> y;</span><br><span class="line">    <span class="type">char</span> z;</span><br><span class="line">    make_tuple(ref(x), ref(y), ref(z)) = t2;</span><br><span class="line">    tie(x, y, z) = t2; <span class="comment">// doing the same thing</span></span><br><span class="line">    tie(x, <span class="built_in">std</span>::ignore, z) = t2;</span><br><span class="line">    <span class="keyword">auto</span> t4 = tuple_cat(t2, t3); <span class="comment">//concatenate two string</span></span><br><span class="line">    <span class="comment">//tuple traits</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;tuple_size&lt;decltype(t4)&gt;::value&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    tuple_element&lt;<span class="number">1</span>, decltype(t4)&gt;::type d;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//Advantage</span></span><br><span class="line">    <span class="comment">//comparison of tuples </span></span><br><span class="line">    tuple&lt;<span class="type">int</span>, <span class="type">int</span> , <span class="type">int</span> &gt; time1, time2; <span class="comment">//hours mintues seconds</span></span><br><span class="line">    <span class="keyword">if</span>(time1 &gt; time2) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time1 is a later time&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//multi index map</span></span><br><span class="line">    <span class="built_in">map</span>&lt;tuple&lt;<span class="type">int</span>, <span class="type">char</span>, <span class="type">float</span>&gt;, <span class="built_in">string</span>&gt; mp;</span><br><span class="line">    mp[make_tuple(<span class="number">18</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">3.14</span>)] = <span class="string">&quot;Curiosity kills the cat&quot;</span>;</span><br><span class="line">    <span class="comment">//fast change value</span></span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    tie(c, b, a) = make_tuple(a, b, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一致性哈希">一致性哈希</h2><p>通过是为了解决传统哈希算法上的不足而提出来的。主要是增减机器是，传统哈希算法对于数据迁移的成本很高。一致性哈希也是使用取模的思想，只不过将哈希值空间组织成一个圆环，然后每个机器顺时针负责一段数据的存储，当增加机器或者减少机器时，把对应的数据迁移到附近的机器上就行，其他机器不用发生改动。但是存在一个不足，当机器数量比较少时，无法做到在环上均匀分布。于是引入虚拟节点，每个物理机器有相同数量的虚拟节点，通过虚拟节点去寻找位置，然后映射到物理机上。</p><h2 id="海量数据问题">海量数据问题</h2><p>小根堆+归并</p><h2 id="生成随机数">生成随机数</h2><p>线性同余算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//x_&#123;n+1&#125; = a*x_n + c mod m</span></span><br><span class="line"><span class="comment">//a = 48271 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a = <span class="number">48271</span>, c = <span class="number">0</span>, x = <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> m = INT_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">x = (a*x+c) % m;</span><br><span class="line">cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="什么是socket">什么是socket</h2><p>socket是linux文件的一种类型。socket通过绑定IP和端口可以实现在进程间通信。创建一个socket文件描述符指向两个缓冲区，所以可以实现全双工通信。</p><h2 id="epoll的优势">epoll的优势</h2><p>连接的文件描述符比较多，但是活跃的文件描述符比较少时，比select和poll效率更高。</p><p>epoll三个主要的函数：</p><ol><li>epoll_create()</li><li>epoll_ctl()</li><li>epoll_wait()</li></ol><h2 id="ET和LT的区别">ET和LT的区别</h2><ol><li>ET称为边沿触发，在调用epoll_wait函数监听的时候，如果有满足的事件，则该函数进行返回，返回值是满足监听事件的文件描述符数量。ET模式下，只会响应一次，即使部分文件描述符的事件没有进行处理。<strong>当发送接收缓冲区状态发生改变时，触发读写事件。边沿触发模式要求一直读写，直到读写完或者返回EAGAIN</strong></li><li>LT称为水平触发，如果epoll_wait有满足条件的事件，会一直返回。增加了epoll_wait函数的调用次数。所以通常在并发服务器上，多使用ET模式。如果系统中有大量不需要读写的就绪文件描述符，而它每次都会返回，这样会大大降低检索自己关心的就绪文件描述符的效率。<strong>接收缓冲区不为空，有数据可读，读事件一直触发。发送缓冲区不为满，有数据可写，则写事件一直触发。</strong></li></ol><h2 id="ET为什么要用非阻塞而不是阻塞">ET为什么要用非阻塞而不是阻塞</h2><ol><li>阻塞模式，程序在读取数据时无法知道什么时候读完，会一直阻塞在read函数上，即使已经读完了数据。</li><li>非阻塞模式，<strong>程序使用while循环读取数据，读完以后read会返回，errno被设置为EAGAIN。</strong></li></ol><h2 id="五种网络IO模型">五种网络IO模型</h2><ol><li>阻塞IO</li><li>非阻塞IO</li><li>IO多路复用</li><li>信号驱动IO</li><li>异步IO</li></ol><blockquote><p>前4个都是同步IO。IO多路复用也是阻塞的，但是没有阻塞在send和recv上，而是阻塞在select，poll和epoll上。</p></blockquote><ol><li>同步：进程在数据由内核空间复制回进程缓冲区时不能干别的事。</li><li>异步：在数据准备完成，由内核缓冲区拷贝到进程缓冲区后通知进程，在等待通知的这段事件里，进程可以干别的事情。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础知识</title>
      <link href="/HEXO/2025/09/07/%E3%80%90C++%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/HEXO/2025/09/07/%E3%80%90C++%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="volatile">volatile</h2><p>用来告诉编译器不要对该变量做任何优化，编译器每次操作该变量时，一定要从内存中取出，而不是使用寄存器中与存在的值，因为值可能已经发生了改变。</p><p>应用场景：</p><ol><li>并行设备的硬件寄存器（如状态寄存器）。</li><li>多线程中共享变量。</li></ol><h2 id="const">const</h2><p>用于限定变量，函数和指针不可改变。</p><ol><li>const限定全局变量时，变量放在静态区。const限定局部变量时，变量放在栈区。</li><li>const修饰类中的成员函数时，表示不可对类的对象更改，如果需要更改类中的成员变量，可以使用mutable关键字。</li></ol><h2 id="内联函数和宏定义">内联函数和宏定义</h2><ol><li>宏定义在预编译时展开，内联函数在编译时展开。</li><li>宏定义只是简单的文本替换，不进行参数的有效性检查。内联函数会进行类型检查，然后将函数体嵌入到目标代码中。</li><li>宏定义不加括号容易出错。内联函数没有普通函数的栈操作，效率很高，但是不正确的时候内联函数会导致代码体积过大。</li></ol><h2 id="static">static</h2><p>静态全局变量，静态局部变量，静态成员变量，静态成员函数</p><ol><li>静态全局变量和静态局部变量都放在静态区，只在声明时初始化一次，仅在本文件中可见，变量在程序运行期间一直存在。静态局部变量的作用域范围仅在局部，下次调用紧接着上次调用的结果值改变。</li><li>静态成员函数和静态成员变量没有this指针，必须通过类名才能访问。</li></ol><h2 id="malloc-和-new">malloc 和 new</h2><ol><li>malloc和free是库函数，new和delete是运算符，可以重载。</li><li>malloc申请内存时需要指定内存大小，返回一个void*类型，通常需要强转。new申请内存时无需指定内存大小，返回一个对应类型的指针。</li><li>malloc不进行初始化。new在创建非内部类型的对象时，调用构造函数初始化，消亡时会调用析构函数。</li><li>malloc申请失败时返回null指针，new申请失败时抛出异常。</li></ol><h2 id="指针和引用">指针和引用</h2><ol><li>引用创建时必须初始化，初始化后不可以改变。指针创建时可以不初始化，初始化时需要分配内存，初始化后也可以改变。引用比指针安全。</li><li>引用不存在空值引用，指针可以指向空值</li><li>引用的本质是指针常量，由编译器完成转换。</li></ol><h2 id="extern">extern</h2><ol><li>可以被其他源文件调用。</li><li>告诉编译器，extern限定的代码使用C语言的编译和连接方式。因为C++支持重载，而C不支持，所以可能导致函数编译后的名称不一致，从而找不到对应的函数。</li></ol><h2 id="多态的原理">多态的原理</h2><p>多态分为静态多态和动态多态。静态多态是通过重载和模板实现的，动态多态是通过继承和虚函数实现的。</p><p>动态多态是让基类的指针或引用指向派生类的对象实现的。定义为虚函数的基类，编译器会自动创建一个虚函数表，派生类在继承时会继承这个虚函数表，每个创建的对象拥有一个虚函数表指针，这个指针指向虚函数表，如果派生类重写了基类的虚函数，则对应的虚函数表入口地址发生了更新。虚函数表为所有对象所共享，通常放在代码段。</p><h2 id="什么是进程">什么是进程</h2><p>进程是分配资源的基本单位，是程序运行的实例。进程通常分为数据段，代码段和进程控制块。进程的地址空间相互独立，一个进程不可访问另一个进程的数据。进程切换时的开销相对于线程来说比较大，需要保存寄存器的值和刷新块表，切换地址空间等。</p><h2 id="进程间的通信方式">进程间的通信方式</h2><ol><li>有名管道pipe</li><li>无名管道fifo</li><li>消息队列</li><li>共享内存</li><li>信号量</li><li>信号</li><li>套接字</li></ol><h2 id="线程是什么">线程是什么</h2><p>线程是CPU调度的基本单位。线程是进程的一个执行流程。一个进程中可以由多个线程。线程共享进程的地址空间。线程自身几乎不拥有系统资源，除了栈和寄存器。线程间的通信较为容易。但是需要同步。常用的同步机制有互斥锁，读写锁，信号量，条件变量。</p><h2 id="线程共享">线程共享</h2><ol><li>进程打开的文件描述符表</li><li>进程ID和组ID</li><li>信号的处理方式</li><li>打开的工作目录</li><li>进程的地址空间(堆区，栈区，共享区)</li></ol><h2 id="线程独享">线程独享</h2><ol><li>线程ID</li><li>线程的寄存器</li><li>线程的栈</li><li>信号屏蔽字</li><li>线程优先级</li><li>错误返回码errno</li></ol><h2 id="信号">信号</h2><p>信号是一种不精确的通信方式。常用的信号有15号信号，杀死进程 29号进程 11号段错误</p><h2 id="http和https的区别">http和https的区别</h2><p>https是安全版的http协议。</p><h2 id="get和post的区别">get和post的区别</h2><p>get用来获取资源，post用来创建资源。</p><p>get将数据放在url地址栏中，使用问号与url分割，数据间用取地址符分割。post将数据放在请求体中。</p><p>安全性上get放在url容易暴露隐私信息，而post放在请求体中可以适当的避免。</p><p>get在传输的数据受url地址栏的限制，post不受这种限制</p><p>get的操作是幂等的，多次操作产生的影响相同，而post是非幂等的</p><h2 id="B树和B-树的区别">B树和B+树的区别</h2><p>B树是多叉平衡树，**M阶的B树，每个节点最多有M-1个关键字，**每个节点的关键字都按照从小到大的顺序排列，因此查询时可以使用二分查找法。</p><p><strong>B树中所有叶子节点都位于同一层，每个节点都存有索引和数据。</strong></p><p><strong>B树的优点在于查询单个数据时，由于每个key都存有对应的date，查询到后可以直接取回。</strong></p><p>B+树非叶子节点只存索引不存数据，每个叶子节点增加一个指向相邻接叶子节点的指针，所有的节点都存在叶子节点。B+树的优点在于范围查询时，可以利用相邻的指针获得指定范围内的数据。</p><h2 id="网络拥塞">网络拥塞</h2><ol><li>慢启动</li><li>拥塞避免</li><li>快速重传</li><li>快恢复</li></ol><h2 id="TCP和udp的区别">TCP和udp的区别</h2><p>tcp面向连接的可靠的流式协议，具有超时重传和确认等机制。</p><p>udp面向无连接的报文协议，发出去就不管了，收则全收，丢则全丢。</p><h2 id="智能指针">智能指针</h2><p>unique_ptr</p><p>shared_ptr</p><p>weak_ptr</p><h2 id="四种强制类型转换">四种强制类型转换</h2><p>const_cast去掉const属性的转换，包括const指针和引用</p><p>static_cast用于低风险的转换，比如字符型转整形</p><p>dynamic_cast 用于具有继承关系的派生类和子类的转换，当基类转为子类时，如果转换失败会返回NULL</p><p>reinterpret_cast 任何类型都能转，风险较高</p><h2 id="post和put的区别">post和put的区别</h2><p>post用来创建资源，put用来更新资源</p><p>post是非幂等的，put是幂等的。</p><p>8中请求方法：</p><p>http 1.0: get post head</p><p>http 1.1: put delete options connect trace</p><h2 id="mmu内存管理器">mmu内存管理器</h2><p>主要作用：虚拟内存到物理内存的地址映射。 设置修改内存访问级别。</p><h2 id="虚拟内存的作用">虚拟内存的作用</h2><ol><li>解决主存容量有限</li><li>分隔进程，保证进程空间彼此独立不受干扰</li><li>基于局部性原理进行页面替换</li></ol><p>虚拟内存的大小由计算机的地址总线决定</p><p>cache名字和TLB命中没有必然联系，是两种独立的机制。</p><p>CPU和Cache之间交换的单位是字节，Cache和内存之间交换的单位是块。</p><h2 id="coredump文件">coredump文件</h2><p>gdb可以用于分析coredump文件。coredump文件含有进程被终止时内存/CPU寄存器和各种函数调用栈的信息。</p><p>产生coredump文件的原因：</p><ol><li>内存访问越界</li><li>多线程使用了线程不安全的函数</li><li>多线程读写的数据未加锁保护</li><li>栈溢出</li></ol><p>core文件没有符号表信息，必须结合可执行文件才可调试</p><h2 id="模板特化">模板特化</h2><p>全特化：模板参数被指定未确定的类型</p><p>偏特化：模板参数没有被全部确定，需要编译器在编译时进行确定。只能偏特化类模板，不能偏特化函数模板。</p><p>别名模板和变量模板属于语法糖</p><h2 id="元编程">元编程</h2><p>在<strong>编译时</strong>计算出<strong>运行时</strong>需要的常数，类型和代码的方法。</p><h2 id="右值引用">右值引用</h2><p>右值引用指向要被销毁的对象。右值要么是字面常量，要么是在表达式求值过程中创建的临时对象。</p><p>move函数将左值转换为右值，调用move函数后源对象只能赋值或销毁。</p><h2 id="override">override</h2><p>override在子类中标记某个函数，表示想要覆盖已有的虚函数，如果没有覆盖，编译器会报错。</p><p>加作用域运算符调用特定类的虚函数</p><h2 id="内联函数的优劣">内联函数的优劣</h2><ol><li>优点：减少函数调用的开销，包括寄存器值的保存和实参的拷贝等。</li><li>缺点：增加函数体积，可能导致cache装不下，从而减少了cache的命中率。</li></ol><p>inline只是一个请求，编译器有权拒绝。</p><h2 id="拷贝构造函数">拷贝构造函数</h2><p>调用场景：</p><ol><li>一个对象以值传递传参</li><li>一个对象以值传递的方式从函数返回</li><li>一个对象通过另一个对象初始化</li></ol><h2 id="空类">空类</h2><p>占有一个字节</p><p>有构造，析构，拷贝，赋值运算符，取地址运算符。</p><p>构造函数可以被重载，析构函数不可以被重载且不能带参数。</p><h2 id="explicit">explicit</h2><p>explicit取消隐式转换，类中构造函数默认是implicit</p><p>explicit关键字的作用是防止类构造哈桑农户的隐式自动转换，只对有一个参数的构造函数有效。</p><h2 id="堆和栈的区别">堆和栈的区别</h2><ol><li>申请方式不同。栈由操作系统自动分配，堆需要程序员自己申请。</li><li>生长方向不同。栈由高地址向地址生长，是一块连续的内存区域。堆由地址向高地址生长，是不连续的内存区域。在一个链表中记录空间内存地址。</li><li>分配速度。栈由系统分配，速度较快。堆使用new分配，速度较慢，且容易产生内部碎片。</li></ol><h2 id="C-和python的区别">C++ 和python的区别</h2><p>python是解析性语言，无需编译，方便快捷，跨平台性很好。</p><p>C++是编译型语言，先编译后执行，编译后通常不能跨平台。</p><p>python使用严格的缩进来表示不同级别的代码块，在C++中使用花括号。</p><h2 id="索引">索引</h2><p>select语句调用函数后就不会用到索引</p><h2 id="static的作用">static的作用</h2><p>static可以用来修饰函数和变量。修饰全局变量和局部变量时都是放在静态区，static变量只初始化一次，在程序结束时销毁，全局和局部的区别在于作用域不同。static可以修饰普通成员函数，表明这个函数只在本文件中有效。static修饰类成员变量是，这些变量为这个类所共享，static修饰类成员函数时，也是所有对象共享这个函数，该函数中没有this指针。同时static类成员函数中只能调用static修饰的函数。</p><h2 id="静态存储区">静态存储区</h2><ol><li>存放的static修饰的全局变量和局部变量，const修饰的变量以及字符串。</li></ol><h2 id="数据段和静态区的区别">数据段和静态区的区别</h2><p>数据段存放的是代码的二进制指令。静态区是变量。</p><h2 id="虚函数的实现机制">虚函数的实现机制</h2><p>每个含有虚函数的类都有一个虚函数表，类创建的对象都由编译器自动生成一个虚函数表指针来指向虚函数表。子类继承时会继承这个虚函数表，在子类中如果重写了父类定义的虚函数，这个虚函数中的对应内容会替换为重写的内容。当父类指针或引用指向子类对象时，调用对用对应的虚函数时会根据虚函数表指针找到虚函数表，然后从表中找到重写的虚函数入口地址，然后实现对应的行为。虚函数使代码更具有扩展性。</p><h2 id="python的多态">python的多态</h2><p>子类继承父类，子类重写父类的函数，调用时就自动调用了子类的函数。</p><h2 id="C-和python的区别-2">C++和python的区别</h2><ol><li>C++是编译型语言，需要先编译再执行，编译后通常不可以跨平台。</li><li>python是解释型语言，直接运行，跨平台好。上手快，容易浮于表面不够深入。</li></ol><h2 id="python带来的收益">python带来的收益</h2><p>快速上手机器学习和深度学习，直接调用大量的库函数。</p><h2 id="STL底层容器和实现原理">STL底层容器和实现原理</h2><ol><li>vector是动态数组，分配连续的内存，2倍扩容。</li><li>list双向表，插入删除效率高。</li><li>map和set红黑树，有序的容器。</li><li>stack和queue底层可能都是数组实现</li><li>unordered_map和unordered_set哈希表。</li><li>array栈上分配的数组执行效率快。</li><li>tuple元组多数据类型的集合。</li></ol><h2 id="快排">快排</h2><p>基于交换和分治的算法， 平均nlogn 最坏n平方</p><h2 id="四次挥手">四次挥手</h2><p>主动关闭方发送FIN标志位，自身状态进入FIN_WAIT_1被动关闭方收到FIN后，发送ACK确认，自身进入CLOSE_WAIT状态，当主动关闭方收到ACK后，进入FIN_WAIT_2状态，此时主动关闭方只能接收数据，不能发送数据，因为TCP是全双工的，所以要等待被动关闭方关闭后才结束。此时进行了两次挥手，双方进入半关闭状态。当被动关闭方需要关闭时，发送FIN标志位，发出后自身状态进入LAST_ACK状态，如果对方收到FIN标志位后，发送ACK应答，自身进入TIME_WAIT状态，等待2MSL后关闭连接。等待的2MSL是报文在网络传输中一个来回的长度。确保最后一个ACK能被对方收到。</p><h2 id="static关键字">static关键字</h2><p>static可以修饰普通函数变量和类成员函数和变量。</p><ol><li>static修饰普通变量时，分为全局变量和局部变量，两者都保存在静态区，并且只初始化一次，在整个程序运行期间一直存在。全局变量和局部变量的区别是作用域不同。</li><li>static修饰普通函数时，说明此函数只在本文件中可见，防止多个文件的同名冲突。</li><li>static修饰类中的成员变量时，必须在类中声明，在类外初始化，初始化的时候分配内存，所有的static成员变量为所有对象共享。</li><li>static修饰类中的成员函数时，只能调用static的变量和函数，没有this指针，所有对象共享这个函数，可以使用类名直接调用。</li></ol><p>变量分为全局变量和局部变量，static修饰全局变量时，表示这个变量只在本文件中可见</p><h2 id="const关键字">const关键字</h2><p>const用于限定变量指针和函数不可改变，方便编译器做类型检查。</p><ol><li>cons修饰<strong>变量</strong>时必须初始化。const全局变量通常放在静态区，const局部变量放在栈区。</li><li>cosnt修饰<strong>成员函数</strong>时，函数中的成员变量不可更改，如果要修改成员变量需要声明为mutable</li><li>const修饰<strong>指针</strong>有两种，常量指针和指针常量，常量指针是指针的指向的值不可改变，而指针的指向可以改变。指针常量是指向不可变，而值可变。</li></ol><h2 id="const和define的区别">const和define的区别</h2><ol><li>const明确指定类型，编译器对类型做检查，而define没有类型也不 检查。</li><li>const分配内存，而define不分配。</li><li>const在编译期处理，而define在预编译期进行宏替换。define的宏替换不加括号会产生严重的影响。</li></ol><h2 id="指针和引用的区别">指针和引用的区别</h2><ol><li>指针保存的是所指对象的地址，而引用是所指对象的别名。指针通过解引用间接访问所指的对象，而引用直接访问。</li><li>指针可以有多级，而引用最多两级。当有两个取地址符时，是右值引用，右值引用可以减少深拷贝的次数。</li><li>指针定义时可以不初始化，即使初始化后也可以改变。而引用定义时必须初始化，初始化后不可以改变。</li><li>引用的本质是指针常量，编译器帮助转换。指针常量的指向不可以改变，值可以变。</li></ol><h2 id="define与内联函数的区别">define与内联函数的区别</h2><ol><li>内联函数是一个函数，在编译期插入到调用的地方，而define在预处理期进行替换。</li><li>内联函数避免了函数调用时的压栈和参数拷贝等操作，提高了性能。</li><li>内联函数对参数有类型检查。define不加括号容易出错。</li></ol><h2 id="new和malloc的区别">new和malloc的区别</h2><ol><li>malloc是库函数，new是运算符</li><li>malloc只分配内存不初始化，而new不仅分配内存也初始化。new分配内存以后自动调用构造函数。</li><li>malloc分配内存时必须指定内存大小，而new可以自动计算。malloc分配完成后返回的是void*类型，需要强转，而new返回的是对应类型的指针。</li><li>malloc分配内存失败时返回NULL，而new分配内存失败时抛出bad_alloc异常。</li></ol><h2 id="http和https的区别-2">http和https的区别</h2><p>两者都是用于客户端和服务器端通信。</p><p>https是http的安全版。</p><p>主要区别在于：</p><ol><li>http是明文传输，https是密文传输。</li><li>http默认端口是80， https的默认443</li><li>https需要验证服务器端的身份，如果CA证书不正确则会中断通信。</li><li>CA证书需要成本，加密解密的过程增加CPU和内存的开销。</li></ol><p>https增加了ssl层，用于确保传输的安全性。</p><p>通信前先进行ssl层的握手，首先客户端ssl版本号和加密组件发送给服务器端。</p><p>服务器端筛选出可用的ssl版本号和加密算法同时加上CA证书发送给客户端。</p><p>客户端验证CA证书的有效性，如果无效则中断通信。</p><p>若有效客户端发送加密的pre-master secret随机密码串，这一步使用的是非对称加密，用于协商后面对称加密的密钥，所以这一步不能被篡改和截获。客户端得到服务器端的响应后，且验证通过后，后续就使用对称加密加密算法进行加密。然后进行TCP三次握手。</p><h2 id="http1-0和http1-1的区别">http1.0和http1.1的区别</h2><p>http1.0只支持短连接，即一次通信完成后就立即断开</p><p>http1.1支持长连接，一次TCP建立以后，可以进行多次请求。</p><p>http1.0只提供了三种请求方法：get post head</p><p>http1.1增加了五种请求方法：put delete connect trace options</p><p>http1.1增加了许多状态码，比如100 continue 表示已经收到，等待后续的资源。206 partial content 部分资源</p><p>http1.1支持一个物理主机上可以有多个虚拟主机共用一个IP</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【readme】C++求职</title>
      <link href="/HEXO/2025/09/07/README/"/>
      <url>/HEXO/2025/09/07/README/</url>
      
        <content type="html"><![CDATA[<h2 id="后端开发">后端开发</h2><ol start="4"><li>操作系统</li><li>计算机网络</li><li>C++基础知识</li><li>数据库</li></ol><h2 id="笔试常考类型">笔试常考类型</h2><ol><li>模拟 ★★★★★ 可难可易 大部分题都是模拟中使用某个算法优化</li><li>贪心 ★★★ 按照某种规则排序</li><li>字符串 ★★★ 输入输出容易搞人 双指针处理字符串空格单词</li><li>DFS/BFS ★★★ 有多少种组合数 图的最短时间</li><li>滑动窗口/双指针 ★★ 最短或最长的子串 最多可变k次</li><li>DP ★★ 看运气 背包问题居多 遍历时维护最值</li><li>堆 ★★  学会自定义数据的排序规则</li><li>并查集 ★★ 寻找连通分量和最大集合数量</li><li>找规律/数学 ★  看运气</li><li>前缀和  ★  子数组范围较小时直接用</li><li>二分法  ★   灵活运用库函数lower_bound和upper_bound</li><li>单调栈  ★ 通常跟数组有关</li><li>迪杰斯特拉算法/弗洛伊德 ★ 通常不考</li><li>字典树  ★ 出现前缀字符串查询或者异或值直接用</li><li>高精度 ★ 大数乘法或大数加法</li></ol><h2 id="注意">注意</h2><ol><li>数值较大的结果考虑用long long</li><li>动态规划写不来，先写暴力过部分测试样例</li><li>特殊输出先提交一下，骗点分了再说</li><li>练习处理诡异输入的能力</li></ol><h2 id="面试常考类型">面试常考类型</h2><p>剑指offer先刷 + leetcode以下各类型至少10道+leetcode前200道</p><ol><li>链表</li><li>数组</li><li>搜索</li><li>DP</li><li>双指针</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 求职技巧 </category>
          
          <category> 八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> C++项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON 基础</title>
      <link href="/HEXO/2025/09/07/%E3%80%90JSON%E3%80%91%E5%9F%BA%E7%A1%80/"/>
      <url>/HEXO/2025/09/07/%E3%80%90JSON%E3%80%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>本文章为java的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</p><p>文档链接: <a href="https://www.mubu.com/doc/6gTu88fgiFL">JSON基础</a></p><p>【如果遇到密码，统一为：1230】</p><p>下面内容为文章目录，可以先预览后再决定是否详细查看文档</p><h4 id="一、简介"><strong>一、简介</strong></h4><p>1.1 JSON 基本概念<br>　1.1.1 定义与用途（JavaScript 对象表示法）<br>　1.1.2 优势（轻量、易读、跨语言支持）<br>1.2 JSON 与 XML 对比<br>　1.2.1 共同点（纯文本、层级结构、AJAX 兼容）<br>　1.2.2 差异（无结束标签、解析速度、数据类型支持）<br>1.3 AJAX 与 JSON 的关系<br>　1.3.1 AJAX 异步通信机制<br>　1.3.2 JSON 在 AJAX 中的应用场景</p><hr><h4 id="二、语法规则"><strong>二、语法规则</strong></h4><p>2.1 JSON 基本语法<br>　2.1.1 名称/值对（键值对定义）<br>　2.1.2 分隔符（逗号、大括号、中括号）<br>　2.1.3 转义字符（反斜杠 <code>\</code> 的使用）<br>2.2 JSON 数据结构<br>　2.2.1 对象（无序键值对集合）<br>　　2.2.1.1 对象语法（<code>&#123;&#125;</code> 包裹，键为字符串）<br>　　2.2.1.2 值类型（字符串、数字、布尔、null、嵌套对象/数组）<br>　2.2.2 数组（有序值集合）<br>　　2.2.2.1 数组语法（<code>[]</code> 包裹，逗号分隔）<br>　　2.2.2.2 值类型（支持多种数据类型嵌套）</p><hr><h4 id="三、JSON-对象与数组"><strong>三、JSON 对象与数组</strong></h4><p>3.1 JSON 对象操作<br>　3.1.1 访问对象值<br>　　3.1.1.1 点号访问（<code>obj.key</code>）<br>　　3.1.1.2 中括号访问（<code>obj[&quot;key&quot;]</code>）<br>　3.1.2 遍历对象（<code>for-in</code> 循环）<br>　3.1.3 删除属性（<code>delete</code> 关键字）<br>3.2 JSON 数组操作<br>　3.2.1 数组定义与语法<br>　3.2.2 多维数组（嵌套对象与数组）</p><hr><h4 id="四、JSON-解析与序列化"><strong>四、JSON 解析与序列化</strong></h4><p>4.1 JSON 解析方法<br>　4.1.1 <code>JSON.parse()</code><br>　　4.1.1.1 语法与参数（<code>text</code>、<code>reviver</code> 函数）<br>　　4.1.1.2 处理日期与函数（字符串转换与 <code>reviver</code> 应用）<br>　4.1.2 <code>eval()</code> 的安全问题<br>　　4.1.2.1 潜在风险与替代方案（原生 JSON 解析器）<br>4.2 JSON 序列化方法<br>　4.2.1 <code>JSON.stringify()</code><br>　　4.2.1.1 语法与参数（<code>value</code>、<code>replacer</code>、<code>space</code>）<br>　　4.2.1.2 处理日期与函数（自动转换与过滤）</p><hr><h4 id="五、JSON-实际应用"><strong>五、JSON 实际应用</strong></h4><p>5.1 数据交换与存储<br>　5.1.1 Web 服务端数据传输（AJAX 请求）<br>　5.1.2 本地存储（浏览器与文件读写）<br>5.2 JSONP 跨域通信<br>　5.2.1 JSONP 原理（绕过同源策略）<br>　5.2.2 实现步骤<br>　　5.2.2.1 服务端返回格式（回调函数包裹数据）<br>　　5.2.2.2 客户端回调函数定义与调用</p><hr><h4 id="六、工具与扩展"><strong>六、工具与扩展</strong></h4><p>6.1 JSON 工具<br>　6.1.1 在线格式化工具（JSON 美化与校验）<br>6.2 高级应用场景<br>　6.2.1 复杂数据结构（树形结构、配置管理）<br>　6.2.2 与其他技术结合（RESTful API、前端框架）</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 语法语言 </category>
          
          <category> JSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏引擎开发</title>
      <link href="/HEXO/2025/09/07/%E3%80%90Unity%E3%80%91%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8D%E5%85%A8/"/>
      <url>/HEXO/2025/09/07/%E3%80%90Unity%E3%80%91%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8D%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>本文章为游戏引擎开发的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</p><p>文档链接: <a href="https://www.mubu.com/doc/2FLf9VC-W9L">游戏网络编程</a></p><p>【如果遇到密码，统一为：1230】</p><p>下面内容为文章目录，可以先预览后再决定是否详细查看文档</p><h4 id="一、游戏网络编程"><strong>一、游戏网络编程</strong></h4><p>1.1 同步Echo程序<br>　1.1.1 环境配置与程序创建<br>　　1.1.1.1 .NET SDK安装与验证<br>　　1.1.1.2 创建EchoServer控制台应用<br>　1.1.2 套接字通信实现<br>　　1.1.2.1 TCP/IP终结点（IPEndPoint）<br>　　1.1.2.2 客户端Socket连接与数据传输<br>　　1.1.2.3 服务器Socket监听与响应<br>　1.1.3 同步阻塞问题<br>　　1.1.3.1 单客户端处理限制<br>　　1.1.3.2 同步API的性能瓶颈</p><p>1.2 网络编程基础<br>　1.2.1 Socket概念与通信模型<br>　　1.2.1.1 C/S架构（客户端-服务器模型）<br>　　1.2.1.2 Socket组成（IP地址与端口号）<br>　　1.2.1.3 通信流程（监听、连接、数据交换）<br>　1.2.2 Socket类型与协议<br>　　1.2.2.1 流式套接字（TCP协议）<br>　　1.2.2.2 数据报套接字（UDP协议）<br>　　1.2.2.3 原始套接字（底层协议操作）</p><p>1.3 异步Echo程序<br>　1.3.1 非阻塞通信实现<br>　　1.3.1.1 客户端异步发送文本<br>　　1.3.1.2 服务器多客户端并发处理<br>　1.3.2 Unity客户端集成<br>　　1.3.2.1 UI设计与异步事件绑定</p><p>1.4 异步与多路复用<br>　1.4.1 I/O模型分类<br>　　1.4.1.1 阻塞式I/O<br>　　1.4.1.2 非阻塞式I/O（轮询机制）<br>　　1.4.1.3 I/O复用（Select与Poll）<br>　　1.4.1.4 异步I/O（内核通知完成）<br>　　1.4.1.5 信号驱动式I/O（SIGIO）<br>　1.4.2 异步编程实现<br>　　1.4.2.1 <code>async</code>与<code>await</code>关键字<br>　　1.4.2.2 <code>Task&lt;T&gt;</code>与异步操作管理<br>　　1.4.2.3 异步操作性能优化</p><hr><h4 id="二、TCP数据收发问题与解决方案"><strong>二、TCP数据收发问题与解决方案</strong></h4><p>2.1 粘包与拆包问题<br>　2.1.1 粘包问题分析<br>　　2.1.1.1 原因（Nagle算法、缓冲区累积）<br>　　2.1.1.2 实验模拟与现象复现<br>　2.1.2 拆包问题分析<br>　　2.1.2.1 原因（MSS限制、网络拥塞）<br>　　2.1.2.2 实验模拟与现象复现<br>　2.1.3 解决方案<br>　　2.1.3.1 长度信息法（头部添加长度字段）<br>　　2.1.3.2 固定长度法（填充补齐数据包）<br>　　2.1.3.3 特殊字符分隔法（边界标识符）</p><p>2.2 数据丢失与重传机制<br>　2.2.1 数据丢失原因<br>　　2.2.1.1 网络拥塞与缓冲区溢出<br>　　2.2.1.2 操作系统发送机制限制<br>　2.2.2 应用层解决方案<br>　　2.2.2.1 数据校验与队列管理<br>　　2.2.2.2 重传机制实现（ByteArray封装）</p><p>2.3 大小端问题<br>　2.3.1 大小端存储差异<br>　　2.3.1.1 大端模式与小端模式定义<br>　　2.3.1.2 数值存储示例（如258的存储）<br>　2.3.2 兼容性处理<br>　　2.3.2.1 强制小端编码转换<br>　　2.3.2.2 系统检测与动态调整</p><p>2.4 高效数据接收<br>　2.4.1 性能问题分析<br>　　2.4.1.1 <code>Array.Copy</code>的时间复杂度问题<br>　2.4.2 优化方案<br>　　2.4.2.1 <code>ByteArray</code>动态缓冲区设计<br>　　2.4.2.2 偏移量管理（<code>readIdx</code>与<code>writeIdx</code>）</p><hr><h4 id="三、C-语言核心机制"><strong>三、C#语言核心机制</strong></h4><p>3.1 委托（Delegate）<br>　3.1.1 委托定义与使用<br>　　3.1.1.1 委托声明与方法绑定<br>　　3.1.1.2 实例化方式（new、匿名函数、Lambda）<br>　3.1.2 多播委托<br>　　3.1.2.1 委托链（+=与-=操作）<br>　　3.1.2.2 异常处理与调用列表（<code>GetInvocationList</code>）</p><p>3.2 抽象类与接口<br>　3.2.1 抽象类（Abstract Class）<br>　　3.2.1.1 定义与继承规则<br>　　3.2.1.2 抽象方法实现（<code>override</code>关键字）<br>　3.2.2 接口（Interface）<br>　　3.2.2.1 接口与抽象类的区别<br>　　3.2.2.2 多重继承与实现约束</p><p>3.3 反射机制<br>　3.3.1 反射核心类<br>　　3.3.1.1 <code>Type</code>类（类型信息获取）<br>　　3.3.1.2 <code>Assembly</code>、<code>MethodInfo</code>、<code>PropertyInfo</code><br>　3.3.2 反射应用场景<br>　　3.3.2.1 动态对象创建与调用<br>　　3.3.2.2 元数据操作（字段、方法、属性）</p><hr><h4 id="四、Unity网络框架与游戏开发"><strong>四、Unity网络框架与游戏开发</strong></h4><p>4.1 游戏网络框架设计<br>　4.1.1 客户端框架<br>　　4.1.1.1 消息队列与事件驱动<br>　　4.1.1.2 网络模块与UI模块解耦<br>　4.1.2 服务器端框架<br>　　4.1.2.1 高并发处理（异步Socket）<br>　　4.1.2.2 数据持久化与缓存策略</p><p>4.2 Unity网络框架集成<br>　4.2.1 Netcode for GameObjects<br>　　4.2.1.1 基础组件与同步机制<br>　　4.2.1.2 大乱斗游戏案例实现<br>　4.2.2 多玩家同步优化<br>　　4.2.2.1 状态同步与插值算法<br>　　4.2.2.2 延迟补偿与预测技术</p><p>4.3 VR游戏开发（VR Rowling）<br>　4.3.1 场景与交互设计<br>　　4.3.1.1 VRTK工具集成<br>　　4.3.1.2 运动控制与物理反馈<br>　4.3.2 动画与特效<br>　　4.3.2.1 角色动画状态机<br>　　4.3.2.2 粒子系统与光影效果</p><hr><h4 id="五、游戏实现模块"><strong>五、游戏实现模块</strong></h4><p>5.1 游戏关卡与场景<br>　5.1.1 场景切换逻辑<br>　　5.1.1.1 异步加载与进度管理<br>　　5.1.1.2 资源释放与内存优化<br>　5.1.2 关卡设计<br>　　5.1.2.1 敌人AI行为树<br>　　5.1.2.2 动态难度调整</p><p>5.2 游戏角色与动画<br>　5.2.1 角色控制<br>　　5.2.1.1 输入处理（键盘、手柄、VR设备）<br>　　5.2.1.2 物理碰撞与运动模拟<br>　5.2.2 动画系统<br>　　5.2.2.1 骨骼动画与混合树<br>　　5.2.2.2 动画事件与状态切换</p><p>5.3 游戏特效与音效<br>　5.3.1 特效实现<br>　　5.3.1.1 粒子系统与Shader效果<br>　　5.3.1.2 屏幕后处理（Bloom、Motion Blur）<br>　5.3.2 音效管理<br>　　5.3.2.1 背景音乐与动态音效<br>　　5.3.2.2 空间音效（3D音频定位）</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 游戏开发 </category>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Unity </tag>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql数据库</title>
      <link href="/HEXO/2025/09/07/%E3%80%90MySql%E3%80%91%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/HEXO/2025/09/07/%E3%80%90MySql%E3%80%91%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>本文章为MySql数据库的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</p><p>文档链接: <a href="https://www.mubu.com/doc/148g0aV8wVL">MySql数据库</a></p><p>【如果遇到密码，统一为：1230】</p><p>下面内容为文章目录，可以先预览后再决定是否详细查看文档</p><h3 id="目录">目录</h3><h4 id="基础"><strong>基础</strong></h4><ol><li><p><strong>SQL通用</strong><br>1.1 SQL语句书写规范<br>1.2 注释</p><ul><li>1.2.1 单行注释</li><li>1.2.2 多行注释<br>1.3 数值类型<br>1.4 MySQL大小写规则</li></ul></li><li><p><strong>SQL语言分类</strong><br>2.1 DDL（数据库定义语言）</p><ul><li>2.1.1 表操作<ul><li>创建表</li><li>修改表（数据类型、字段名等）</li><li>删除表</li></ul></li><li>2.1.2 库操作<ul><li>查询所有数据库</li><li>创建/删除数据库</li><li>使用数据库<br>2.2 DML（数据库操作语言）</li></ul></li><li>2.2.1 添加数据（INSERT）</li><li>2.2.2 修改数据（UPDATE）</li><li>2.2.3 删除数据（DELETE）<br>2.3 DQL（数据库查询语言）</li><li>2.3.1 基本查询（SELECT）</li><li>2.3.2 条件查询（WHERE）</li><li>2.3.3 聚合函数</li><li>2.3.4 分组（GROUP BY）</li><li>2.3.5 排序（ORDER BY）</li><li>2.3.6 分页（LIMIT）</li><li>2.3.7 执行顺序<br>2.4 DCL（数据库控制语言）</li><li>2.4.1 用户管理</li><li>2.4.2 权限控制</li></ul></li><li><p><strong>循环结构</strong><br>3.1 IF<br>3.2 CASE<br>3.3 WHILE<br>3.4 REPEAT<br>3.5 LOOP</p></li><li><p><strong>函数</strong><br>4.1 字符串函数<br>4.2 数值函数<br>4.3 日期函数<br>4.4 流程控制函数</p></li><li><p><strong>约束</strong><br>5.1 非空约束（NOT NULL）<br>5.2 唯一约束（UNIQUE）<br>5.3 主键约束（PRIMARY KEY）<br>5.4 默认约束（DEFAULT）<br>5.5 检查约束（CHECK）<br>5.6 外键约束（FOREIGN KEY）</p></li><li><p><strong>多表查询</strong><br>6.1 多表关系</p><ul><li>一对多</li><li>多对多</li><li>一对一<br>6.2 连接查询</li><li>内连接（INNER JOIN）</li><li>外连接（LEFT/RIGHT JOIN）</li><li>自连接<br>6.3 子查询</li><li>标量子查询</li><li>列子查询</li><li>行子查询</li><li>表子查询<br>6.4 联合查询（UNION）</li></ul></li><li><p><strong>事务</strong><br>7.1 事务简介<br>7.2 事务操作（BEGIN/COMMIT/ROLLBACK）<br>7.3 事务特性（ACID）<br>7.4 并发事务问题</p><ul><li>脏读</li><li>不可重复读</li><li>幻读<br>7.5 事务隔离级别</li></ul></li></ol><hr><h4 id="进阶"><strong>进阶</strong></h4><ol><li><p><strong>存储引擎</strong><br>1.1 存储引擎特点</p><ul><li>InnoDB</li><li>MyISAM</li><li>Memory<br>1.2 存储引擎选择</li></ul></li><li><p><strong>索引</strong><br>2.1 索引结构</p><ul><li>B-Tree</li><li>B+Tree</li><li>Hash<br>2.2 索引分类</li><li>主键索引</li><li>唯一索引</li><li>常规索引<br>2.3 索引语法（创建/查看/删除）<br>2.4 索引优化</li><li>联合索引</li><li>覆盖索引</li><li>前缀索引<br>2.5 索引设计原则</li></ul></li><li><p><strong>SQL优化</strong><br>3.1 插入数据优化<br>3.2 主键优化<br>3.3 ORDER BY优化<br>3.4 GROUP BY优化<br>3.5 LIMIT优化<br>3.6 UPDATE优化</p></li><li><p><strong>视图（VIEW）</strong><br>4.1 视图语法（创建/查询/修改/删除）<br>4.2 视图检查选项（CASCADED/LOCAL）<br>4.3 视图更新限制</p></li><li><p><strong>存储过程（PROCEDURE）</strong><br>5.1 存储过程语法<br>5.2 变量与流程控制<br>5.3 游标与异常处理</p></li><li><p><strong>触发器（TRIGGER）</strong><br>6.1 触发器语法（创建/查看/删除）<br>6.2 OLD与NEW关键字</p></li><li><p><strong>锁</strong><br>7.1 全局锁<br>7.2 表级锁</p><ul><li>表锁</li><li>元数据锁（MDL）</li><li>意向锁<br>7.3 行级锁</li><li>行锁（Record Lock）</li><li>间隙锁（Gap Lock）</li><li>临键锁（Next-Key Lock）</li></ul></li><li><p><strong>InnoDB引擎</strong><br>8.1 逻辑存储结构<br>8.2 事务原理</p><ul><li>Redo Log</li><li>Undo Log<br>8.3 MVCC（多版本并发控制）</li><li>隐藏字段</li><li>ReadView</li><li>版本链</li></ul></li><li><p><strong>MySQL管理</strong><br>9.1 系统数据库<br>9.2 常用工具</p><ul><li>mysqladmin</li><li>mysqldump</li><li>mysqlbinlog</li><li>mysqlimport</li></ul></li><li><p><strong>运维相关</strong><br>10.1 主从复制<br>10.2 分库分表（MyCat）<br>10.3 读写分离</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 后端开发 </category>
          
          <category> MySql数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql数据库 </tag>
            
            <tag> 后端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析</title>
      <link href="/HEXO/2025/09/07/%E5%9F%BA%E4%BA%8E%E3%80%90notebook%E3%80%91%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/HEXO/2025/09/07/%E5%9F%BA%E4%BA%8E%E3%80%90notebook%E3%80%91%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>基础</p><h1>〇概述</h1><p>本文章是基于anaconda中notebook的python语言，其中涉及到众多python库，包括不限于<em>NumPy，Pandas，Matplotlib，Seaborn，Bokeh，jieba，nltk</em>等，软件相关具体插件请到<a href="https://www.%20anaconda.com/download/">Anaconda官网</a>下载</p><p><strong>注意：本文章主要是一个总结整理，因为不太会利用这种方式编辑，所以可读性非常差，若是真心学习，请移步至相关文档。</strong></p><p><strong><s># I数据分析的流程</s></strong></p><h2 id="1-需求分析">1.需求分析</h2><pre><code>        需求分析一词来源于产品设计，主要是指从用户提出的需求出发，挖掘用户内心的真实意图，并转化为产品需求的过程。        数据分析中的需求分析是数据分析环节的第一步，也是非常重要的一步，决定了后续的分析方向和方法。        数据分析中的需求分析的主要内容是，根据业务、生产和财务等部门的需要，结合现有的数据情况，提出数据分析需求的整体分析方向、分析内容，最终和需求方达成一致意见。</code></pre><h2 id="2-数据获取">2. 数据获取</h2><pre><code>        数据获取是数据分析工作的基础，是指根据需求分析的结果提取、收集数据。        数据获取主要有两种方式：            网络数据是指存储在互联网中的各类视频、图片、语音和文字等信息。本地数据则是指存储在本地数据库中的生产、营销和财务等系统的数据。            本地数据按照数据时间又可以划分为两部分，分别是历史数据与实时数据。                历史数据是指系统在运行过程中遗存下来的数据，其数据量随系统运行时间的增加而增长                实时数据是指最近一个单位时间周期（月、周、日、小时等）内产生的数据。</code></pre><h2 id="3-数据预处理">3. 数据预处理</h2><pre><code>        数据预处理的定义： 数据预处理是指对数据进行一系列操作的过程，包括数据合并、数据清洗、数据标准化和数据变换，以便将数据准备好用于后续的分析和建模工作。        数据合并： 数据合并是将多张互相关联的表格或数据集合并为一张，以便在后续分析中使用。        数据清洗： 数据清洗包括去除重复、缺失、异常或不一致的数据，确保数据质量符合分析和建模的要求。        数据标准化： 数据标准化是为了消除不同特征之间的量纲差异，使得数据在相同的数值尺度上进行比较和分析。        数据变换： 数据变换通过离散化、哑变量处理等技术，使得数据更符合后续分析与建模的需求，如改善数据分布的对称性或者满足特定模型的假设条件。        数据预处理过程中的交叉操作： 在实际数据分析中，数据预处理的各个过程往往是互相交叉进行的，并没有固定的先后顺序，具体操作顺序可以根据数据的特点和分析的需求来灵活调整。</code></pre><h2 id="4-分析与建模">4. 分析与建模</h2><pre><code>        1.分析与建模的定义：分析与建模是通过多种分析方法和模型算法，从数据中发现有价值的信息并得出结论的过程。        2.数据获取方式的依据：具体使用哪种数据获取方式取决于需求分析的结果，即根据分析目标来选择适合的方法。        3.分析与建模方法的分类：根据不同的分析目标，分析与建模方法可以分为几大类，包括描述型数据分析、关联规则、序列规则、聚类模型以及分类预测模型和回归预测模型等。        4.描述型数据分析方法：适合描述客户行为模式等情况，可以结合关联规则、序列规则和聚类模型等方法来分析数据。        5.预测分析模型：预测分析模型分为分类预测模型和回归预测模型两大类，用于量化未来某事件发生概率或预测连续型数据，如欺诈与否、股票价格等。        6.分类预测模型和回归预测模型的应用场景：分类预测模型适合处理目标特征为二元数据的情况，如欺诈与否、流失与否等；而回归预测模型则适合处理目标特征为连续型数据的情况，如股票价格预测等。</code></pre><h2 id="5-模型评价与优化">5. 模型评价与优化</h2><pre><code>        1. 模型评价的定义：模型评价是针对已建立的一个或多个模型，根据其类别使用不同指标来评估模型性能优劣的过程。        2. 聚类模型评价指标：常用的聚类模型评价指标包括ARI评价法（兰德系数）、AMI评价法（互信息）、V-measure评分、FMI评价法和轮廓系数等，用于衡量聚类结果的质量和聚类算法的效果。        3. 分类模型评价指标：常用的分类模型评价指标包括准确率（Accuracy）、精确率（Precision）、召回率（Recall）、F1值（F1 Score）、ROC曲线和AUC（曲线下面积）等，用于评估分类模型的分类准确性和预测效果。        4. 回归模型评价指标：常用的回归模型评价指标有平均绝对误差（MAE）、均方误差（MSE）、中值绝对误差（MedAE）和可解释方差值（Explained Variance Score）等，用于衡量回归模型预测结果的准确性和拟合程度。        5. 模型优化的定义：模型优化是指在经过模型评价后发现模型在实际应用中表现不理想时，对模型进行重构与优化的过程。通常涉及调整模型参数、改进特征工程、优化算法选择等方法，以提高模型在生产环境中的表现。        6. 模型优化与分析与建模过程的关系：大多数情况下，模型优化过程与分析与建模过程密切相关，因为优化过程往往建立在对模型评价结果的基础上，以进一步改进模型的预测能力和泛化能力。</code></pre><h2 id="6-部署">6. 部署</h2><pre><code>        部署是指将数据分析结果与结论应用至实际生产系统的过程。        根据需求的不同，部署阶段可以是一份包含了现状具体整改措施的数据分析报告，也可以是将模型部署在整个生产系统的解决方案。        在多数项目中，数据分析师提供的是一份数据分析报告或一套解决方案，实际执行与部署的是需求方。</code></pre><h1></h1><h1>II科学计算库NumPy</h1><h2 id="2-1创建数组，数组运算，索引与切片">2.1创建数组，数组运算，索引与切片</h2><p>2.1.1.认识NumPy数组对象</p><pre><code>        N维数组对象        ｜ 即ndarray（别名array）</code></pre><p>2.1.2.创建NumPy数组</p><pre><code>arange()函数        ｜ 通过arange()函数可以创建一个等差数组，它的功能类似于range()，只不过arange()函数返回的结果是数组，而不是列表。        大家可能注意到，有些数组元素的后面会跟着一个小数点，而有些元素后面没有，比如1和1.，产生这种现象，主要是因为元素的数据类型不同所导致的。</code></pre><p>2.1.3.查看数据类型</p><blockquote><p>｜ NumPy的数据类型是由一个类型名和元素位长的数字组成。<br>ndarray.dtype<br>｜ ndarray.dtype可以创建一个表示数据类型的对象，如果希望获取数据类型的名称，则需要访问name属性进行获取。<br>e.gdata_one.dtype.name</p></blockquote><pre><code>        常用数据类型            特征码            ｜ 每一个NumPy内置的数据类型都有一个特征码，它能唯一标识一种数据类型。        astype()函数        ｜ ndarray对象的数据类型可以通过astype()方法进行转换。            e.gdata = np.array([[1, 2, 3], [4, 5, 6]]) data.dtype# 数据类型转换为float64float_data = data.astype(np.float64)float_data.dtype</code></pre><p>2.1.4.数组运算</p><blockquote><p>矢量化运算<br>｜ 形状相同的数组<br>形状相等的数组之间的任何算术运算都会应用到元素级，即只用于位置相同的元素之间，所得的运算结果组成一个新的数组。<br>｜ 即每个位置逐个计算</p></blockquote><pre><code>        广播机制        ｜ 形状不同的数组            当形状不相等的数组执行算术计算的时候，就会出现广播机制，该机制会对数组进行扩展，使数组的shape属性值一样，这样就可以进行矢量化运算了            广播机制需要满足如下任意一个条件即可：                                          （1）两个数组的某一维度等长。（2）其中一个数组为一维数组。                广播机制需要扩展维度小的数组                ｜ 使得它与维度最大的数组的shape值相同，以便使用元素级函数或者运算符进行运算。        数组与标量运算        ｜ 标量            标量运算会产生一个与数组具有相同行和列的新矩阵，其原始矩阵的每个元素都被相加、相减、相乘或者相除。</code></pre><p>2.1.5.ndarray的索引和切片</p><blockquote><p>2.1.5.1整数索引和切片的基本使用<br>一维数组<br>与Python列表的功能相差不大</p><pre><code>            多维数组                索引                    在二维数组中，每个索引位置上的元素不再是一个标量了，而是一个一维数组。                    如果想获取二维数组的单个元素，则需要通过形如“arr[x，y]”的索引来实现，其中x表示行号，y表示列号。                切片                    多维数组的切片是沿着行或列的方向选取元素的，我们可以传入一个切片，也可以传入多个切片，还可以将切片与整数索引混合使用。</code></pre></blockquote><pre><code>        2.1.5.2花式（数组）索引的基本使用</code></pre><blockquote><p>如果用两个花式索引操作数组，则会将第1个作为行索引，第2个作为列索引，以二维数组索引的方式选取其对应位置的元素。<br>｜ 非坐标！<br># 获取索引为(1,1)和(3,2)的元素demo_arr[[1, 3], [1, 2]]</p></blockquote><pre><code>        2.1.5.3布尔型索引的基本使用</code></pre><blockquote><p>布尔型索引指的是将一个布尔数组作为数组索引，返回的数据是布尔数组中True对应位置的值。</p></blockquote><h2 id="2-2利用数组进行数据处理">2.2利用数组进行数据处理</h2><p>2.2.1NumPy通用函数</p><blockquote><p>通用函数（ufunc）是一种针对ndarray中的数据执行元素级运算的函数，函数返回的是一个新的数组。<br>｜ 我们将ufunc中接收一个数组参数的函数称为一元通用函数，接受两个数组参数的则称为二元通用函数。</p></blockquote><p>2.2.2利用NumPy数组进行数据处理</p><blockquote><p>将条件逻辑转为数组运算<br>NumPy的where()函数是三元表达式x if condition else y的矢量化版本。<br>｜ 类bool</p></blockquote><pre><code>        数组统计运算        数组排序            sort()            对任何一个轴上的元素进行排序，则需要将轴的编号作为sort()方法的参数传入                e.garr.sort(0)        检索数组元素            all()函数            ｜ 用于判断整个数组中的元素的值是否全部满足条件，如果满足条件返回True，否则返回False。                e.gnp.all(arr &gt; 0)                ｜ # arr的所有元素是否都大于0            any()函数            ｜ 用于判断整个数组中的元素至少有一个满足条件就返回True，否则就返回False。                e.gnp.any(arr &gt; 0)                ｜ # arr的所有元素是否有一个大于0        唯一化及其他集合逻辑            unique()函数                针对一维数组，NumPy提供了unique()函数来找出数组中的唯一值，并返回排序后的结果。                ｜ 即消除相同的元素            inld()函数            ｜ 数字1                用于判断数组中的元素是否在另一个数组中存在，该函数返回的是一个布尔型的数组                    e.garr = np.array([12, 11, 34, 23, 12, 8, 11])np.in1d(arr, [11, 12])            其他函数</code></pre><h2 id="2-3转置和轴对称，通用函数">2.3转置和轴对称，通用函数</h2><pre><code>    数组的转置和轴对称        转置        ｜ 数组的转置指的是将数组中的每个元素按照一定的规则进行位置变换。        方法        ｜ T属性和transpose()方法            简单的转置可以使用T属性，它其实就是进行轴对换而已。            ｜ 即x与y轴对换            当使用transpose()方法对数组的shape进行调换时，需要以元组的形式传入shape的编号                如果我们不输入任何参数，直接调用transpose()方法，则其执行的效果就是将数组进行转置，作用等价于transpose(2,1,0)。            有时可能只需要转换其中的两个轴，这时可以使用swapaxes()方法，该方法需要接受一对轴编号，比如(1,0)。            多学一招                高维数据执行某些操作（如转置）时，需要指定维度编号，这个编号是从0开始的，然后依次递增1。其中，位于纵向的轴（y轴）的编号为0，位于横向的轴（x轴）的编号为1，以此类推。</code></pre><h2 id="2-4数据类型，线性代数模块，随机数模块">2.4数据类型，线性代数模块，随机数模块</h2><pre><code>    线性代数模块        numpy.linalg模块            有一组标准的矩阵分解运算以及诸如逆和行列式之类的东西。            ｜ 例如，矩阵相乘，如果我们通过“*”对两个数组相乘的话，得到的是一个元素级的积，而不是一个矩阵点积。            提供的其他函数        dot()方法        ｜ 用于矩阵乘法            ｜ （看不懂就是线性代数没学好）        矩阵点积的条件是矩阵A的列数等于矩阵B的行数    随机数模块        random模块        ｜ 与Python的random模块相比，NumPy的random模块功能更多，它增加了一些可以高效生成多种概率分布的样本值的函数。            rand()函数隶属于numpy.random模块，它的作用是随机生成N维浮点数组            seed（）函数                可以保证生成的随机数具有可预测性，也就是说产生的随机数相同。                ｜ 当调用seed()函数时，如果传递给seed参数的值相同，则每次生成的随机数都是一样的。当传递的参数值不同或者不传递参数时，则seed()函数的作用跟rand()函数相同，即多次生成随机数且每次生成的随机数都不同。                    e.gnumpy.random.seed(seed=None)                    ｜ 上述函数中只有一个seed参数，用于指定随机数生成时所用算法开始的整数值。            其他函数</code></pre><h1>Ⅲ数据分析工具Pandas</h1><p>3.1 Pandas数据结构<br>3.1.1 Series</p><blockquote><p>｜ 一维的数据结构。<br>class pandas.Series（data = None，index = None，dtype = None，name = None，copy = False，fastpath = False）<br>｜  data：表示传入的数据。 index：表示索引，唯一且与数据长度相等，默认会自动创建一个从0~N的整数索引。<br>ser_obj = pd.Series([1, 2, 3, 4, 5],                  index=[‘a’, ‘b’, ‘c’, ‘d’, ‘e’])<br>｜ # 创建Series类对象，并指定索引<br>year_data = {2001: 17.8, 2002: 20.1, 2003: 16.5}ser_obj2 = pd.Series(year_data)<br>｜ # 除了使用列表构建Series类对象外，还可以使用dict进行构建。<br>ser_obj.index         # 获取ser_obj的索引<br>ser_obj.values       # 获取ser_obj的数据<br>ser_obj[3]            # 获取位置索引3对应的数据</p></blockquote><pre><code>        3.1.2 DataFrame</code></pre><blockquote><p>｜ 二维的、表格型（类似excel）的数据结构。<br>pandas.DataFrame（data = None，index = None，columns = None，dtype = None，copy = False ）<br>｜ index：表示行标签。若不设置该参数，则默认会自动创建一个从0~N的整数索引。columns：列标签。<br>demo_arr = np.array([[‘a’, ‘b’, ‘c’], [‘d’, ‘e’, ‘f’]])<br>｜ # 创建数组<br>df_obj = pd.DataFrame(demo_arr)<br>｜ # 基于数组创建DataFrame对象<br>df_obj = pd.DataFrame(demo_arr, columns=[‘No1’, ‘No2’, ‘No3’])<br>｜ # 创建DataFrame对象，指定列索引<br>element = df_obj[‘No2’]  # 通过列索引的方式获取一列数据<br>element = df_obj.No2  # 通过属性获取列数据<br>df_obj[‘No4’] = [‘g’, ‘h’] # 通过列索引赋值<br>del df_obj[‘No3’]  # 删除No3一列数据</p></blockquote><pre><code>    3.2 索引操作及高级索引</code></pre><blockquote><p>3.2.1 索引对象<br>Pandas中的索引都是Index类对象，又称为索引对象，该对象是不可以进行修改的，以保障数据的安全。<br>Pandas还提供了很多Index的子类，常见的有如下几种：<br>（1）Int64Index：针对整数的特殊Index对象。<br>（2）MultiIndex：层次化索引，表示单个轴上的多层索引。<br>（3）DatetimeIndex：存储纳秒寄时间戳。</p></blockquote><pre><code>        3.2.2 重置索引</code></pre><blockquote><p>reindex()<br>DataFrame.reindex（labels = None，index = None，columns = None，axis = None，method = None，copy = True，level =<br>None，fill_value = nan，limit = None，tolerance = None ）<br>｜  index：用作索引的新序列。 method：插值填充方式。 fill_value：引入缺失值时使用的替代值。 limit：前向或者后向填充时的最大填充量。<br>ser_obj2 = ser_obj.reindex([‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’], fill_value = 6)     # 重新索引时指定填充的缺失值<br>｜ 如果不想填充为NaN，则可以使用fill_value参数来指定缺失值。<br>ser_obj3 = pd.Series([1, 3, 5, 7], index=[0, 2, 4, 6])     # 创建Series对象，并为其指定索引<br>ser_obj3.reindex(range(6), method = ‘ffill’) # 重新索引，前向填充值<br>ser_obj3.reindex(range(6), method = ‘bfill’)# 重新索引，后向填充值</p></blockquote><pre><code>        3.2.3 索引操作</code></pre><blockquote><p>ser_obj[2]    # 使用索引位置获取数据<br>ser_obj[‘c’]   # 使用索引名称获取数据<br>ser_obj[2: 4]           # 使用位置索引进行切片<br>ser_obj[‘c’: ‘e’]        # 使用索引名称进行切片<br>ser_obj[[0, 2, 4]]    # 通过不连续位置索引获取数据集<br>ser_obj[[‘a’, ‘c’, ‘d’]]    # 通过不连续索引名称获取数据集<br>ser_bool = ser_obj &gt; 2   # 创建布尔型Series对象<br>ser_obj[ser_bool]  # 获取结果为True的数据<br>行索引：index，列索引：columns<br>df_obj[: 2]               # 使用切片获取第0~1行的数据<br># 使用多个切片先通过行索引获取第0~2行的数据，再通过不连续列索引获取第b、d列的数据<br>｜ df_obj[: 3][[‘b’, ‘d’]]<br>｜</p><pre><code>            多学一招：操作索引                loc：基于标签索引（索引名称），用于按标签选取数据。当执行切片操作时，既包含起始索引，也包含结束索引。                    dataframe_obj.loc[:, [&quot;c&quot;, &quot;a&quot;]]                iloc：基于位置索引（整数索引），用于按位置选取数据。当执行切片操作时，只包含起始索引，不包含结束索引。                    dataframe_obj.iloc[:, [2, 0]]</code></pre></blockquote><pre><code>    3.3算术运算与数据对齐</code></pre><blockquote><p>obj_one.add(obj_two, fill_value = 0)    # 执行加法运算，补充缺失值<br>｜ Pandas执行算术运算时，会按照索引进行对齐后进行相应的运算，没有对齐的位置会用NaN进行补齐。         如果希望不使用NAN填充缺失数据，则可以在调用add方法时提供fill_value参数的值，fill_value将会使用对象中存在的数据进行补充。</p></blockquote><pre><code>    3.4数据排序</code></pre><blockquote><p>3.4.1 按索引排序<br>ser_obj.sort_index()        # 按索引进行升序排列<br>ser_obj.sort_index(ascending = False)  # 按索引进行降序排列</p></blockquote><pre><code>        3.4.2 按值排序            ser_obj.sort_values()   # 按值升序排列            df_obj.sort_values(by = 2)  # 对列索引值为2的数据进行排序    3.5统计计算与描述</code></pre><blockquote><p>3.5.1 常用的统计计算<br>df_obj.sum()          # 计算每列元素的和<br>df_obj.max()         # 获取每列的最大值<br>df_obj.min(axis=1)   # 沿着横向轴，获取每行的最小值</p></blockquote><pre><code>        3.5.2 统计描述（descript）            df_obj.describe()            ｜ percentiles：输出中包含的百分数，位于[0,1]之间。如果不设置该参数，则默认为[0.25,0.5,0.75]，返回25%，50%，75%分位数。    3.6 层次化索引</code></pre><blockquote><p>3.6.1 认识层次化索引<br>在一个轴方向上具有多层索引<br>在创建层次化索引对象时，嵌套函数中两个列表的长度必须是保持一致的，否则将会出现ValueError错误。<br>创建层次化索引的方法：<br>MultiIndex.from_tuples()：将元组列表转换为MultiIndex。<br>｜ 其中元组的第一个元素作为外层索引，元组的第二个元素作为内层索引<br>MultiIndex.from_arrays()：将数组列表转换为MultiIndex。<br>｜ 其中嵌套的第一个列表将作为外层索引，嵌套的第二个列表将作为内层索引<br>MultiIndex.from_product()：从多个集合的笛卡尔乘积中创建一个MultiIndex。</p></blockquote><pre><code>        3.6.2 层次化索引的操作            ser_obj['小说']     # 获取所有外层索引为“小说”的数据            ser_obj[:,'自在独行']       # 获取内层索引对应的数据            ser_obj.swaplevel()               # 交换外层索引与内层索引位置            使用sort_index()方法排序时，会按外层索引，内层索引进行排序。</code></pre><p>3.7读写数据操作<br>3.7.1 读写文本文件（.csv/.txt）</p><blockquote><p>CSV<br>CSV文件是一种纯文本文件，可以使用任何文本编辑器进行编辑，它支持追加模式，节省内存开销。</p><pre><code>            to_csv(path_or_buf=None,sep=',',na_rep='',float_format=None,columns=None,header=True,</code></pre><p>index=True, index_label=None, mode=‘w‘, …)<br>｜ path_or_buf：文件路径。index：默认为True，若设为False，则将不会显示索引。sep：分隔符，默认用“，”隔开。<br>df.to_csv(r’E:/数据分析/itcast.csv’,index=False)</p><pre><code>            read_csv(filepath_or_buffer,sep=',', delimiter=None, header='infer', names=None, index_col=None, usecols=None, prefix=None,</code></pre><p>…)           # 转换成DataFrame对象<br>｜ sep：指定使用的分隔符，默认用“，”分隔。header：指定行数用来作为列名。names：用于结果的列名列表。如果文件不包含标题行，则应该将该参数设置为None。<br>read_csv()与read_table()函数的区别在于使用的分隔符不同，前者使用“，”作为分隔符，而后者使用“\t”作为分隔符。<br>如果希望读取Text文件，既可以用前面提到的read_csv()函数，也可以使用read_table()函数。</p></blockquote><pre><code>        3.7.2 读写Excel文件</code></pre><blockquote><p>to_excel(excel_writer,sheet_name=‘Sheet1’,na_rep=‘’,float_format=None,<br>columns=None, header=True, index=True, …)<br>｜ excel_writer：表示读取的文件路径。sheet_name：表示工作表的名称，默认为“Sheet1”。na_rep：表示缺失数据。index：表示是否写行索引，默认为True。<br>pandas.read_excel(io,sheet_name=0,header=0,names=None,index_col=None,<br>**kwds)                       # 转换成DataFrame对象<br>｜ io：表示路径对象。sheet_name：指定要读取的工作表，默认为0。header：用于解析DataFrame的列标签。names：要使用的列名称。<br>建议<br>excel_path =r’E:/数据分析/itcast.xlsx’                                                        data = pd.read_excel(excel_path)</p></blockquote><pre><code>        3.7.3 读取HTML表格数据</code></pre><blockquote><p>html_data =<br>requests.get(‘<a href="http://kaoshi.edu.sina.com.cn/college/majorlist/">http://kaoshi.edu.sina.com.cn/college/majorlist/</a>’)html_table_data<br>= pd.read_html(html_data.content,encoding=‘utf-8’)</p></blockquote><pre><code>        3.7.4读写数据库</code></pre><blockquote><p>from sqlalchemy import create_engine # mysql账号为root  密码为123456<br>数据名：info   # 数据表名称：person_infoengine =<br>create_engine(‘mysql+mysqlconnector://root:123456@127.0.0.1/info’)pd.read_sql(‘person_info’,engine)<br>from sqlalchemy import create_engine# mysql账号为root  密码为123456 数据名：info# 数据表名称：person_info# 创建数据库引擎# mysql+pymysql<br>表示使用Mysql数据库的pymysql驱动engine =<br>create_engine(‘mysql+mysqlconnector://root:123456@127.0.0.1/info’)sql<br>= 'select * from person_info where id &gt;3;'pd.read_sql(sql,engine)<br>from sqlalchemy import create_enginefrom sqlalchemy.types import *df =<br>DataFrame({“班级”:[“一年级”,“二年级”,“三年级”,“四年级”],<br>“男生人数”:[25,23,27,30],<br>“女生人数”:[19,17,20,20]})# 创建数据库引擎# mysql+pymysql 表示使用Mysql数据库的pymysql驱动#<br>账号：root 密码：123456 数据库名：studnets_info# 数据表的名称：<br>studentsengine=create_engine(‘mysql+mysqlconnector://root:123456@127.0.0.1/students_info’)df.to_sql(‘students’,engine)</p></blockquote><h1>Ⅳ数据处理</h1><pre><code>    4.1数据清洗</code></pre><blockquote><p>4.1.1空值和缺失值的处理<br>pd.isnull(series_obj)       # 检查是否为空值或缺失值<br>pd.notnull(series_obj)       # 检查是否不为空值或缺失值<br>df_obj.dropna()     # 删除数据集中的空值和缺失值<br>df_obj.fillna(‘66.0’)   # 使用66替换缺失值<br>df_obj.fillna({‘A’: 4.0, ‘B’: 5.0})  # 指定列填充数据<br>df.fillna(method=‘ffill’)   # 使用前向填充的方式替换空值或缺失值</p></blockquote><pre><code>        4.1.2重复值的处理</code></pre><blockquote><p>person_info.duplicated()         # 从前向后查找和判断是否有重复值<br>person_info. drop_duplicates()    # 删除重复值</p></blockquote><pre><code>        4.1.3异常值的处理</code></pre><blockquote><p>mean_value = ser1.mean()     # 求平均值<br>std_value = ser1.std()     # 求标准差<br>rule = (mean_value - 3 * std_value &gt; ser1) | (ser1.mean() + 3 * ser1.std() &lt; ser1)             #3σ判定<br>｜ # 位于(μ-3σ,μ+3σ)区间的数据是正常的，不在这个区间的数据为异常的    # ser1中的数值小于μ-3σ或大于μ+3σ均为异常值    # 一旦发现有异常值，就标注为True，否则标注为False<br>index = np.arange(ser1.shape[0])[rule]   # 返回异常值的位置索引<br>outrange = ser1.iloc[index]    # 获取异常数据</p></blockquote><pre><code>        4.1.4更改数据类型</code></pre><blockquote><p>df.dtypes  # 查看数据的类型<br>df[‘B’].astype(dtype=‘int’)  # 强制转换为int类型<br>pd.to_numeric(ser_obj, errors=‘raise’)     # 转换object类型为float类型</p></blockquote><pre><code>    4.2数据合并</code></pre><blockquote><p>4.2.1轴向堆叠数据<br>pd.concat([df1, df2], join=‘outer’, axis=1)      # 横向堆叠合并df1和df2，采用外连接的方式<br>pd.concat([first, second], join=‘inner’, axis=0)</p><p>4.2.2主键合并数据<br>pd.merge(left, right, on=‘key’)<br>pd.merge(left, right, on=[‘key’, ‘B’])<br>pd.merge(left,right,how=‘outer’,left_index=True,right_index=True)</p><p>4.2.3索引合并数据<br>left.join(right, how=‘outer’)</p></blockquote><pre><code>    4.3数据重塑</code></pre><blockquote><p>4.3.1重塑层次化索引</p></blockquote><pre><code>            stack（）                可以将数据的列索引转换为行索引            unstack（）            res = df.stack()  #　将df重塑为Series对象            res.unstack()      #　将Series对象转换成df（DataFrame）            df.stack(level=0)   # 旋转外层索引        4.3.2轴向旋转            df.pivot(index='', columns='', values='')</code></pre><p>4.4转换数据<br>4.4.1 重命名轴索引</p><blockquote><pre><code>            df.rename(columns=&#123;'A':'a', 'B':'b', 'C':'c'&#125;, inplace=True)    # 重命名列索引的名称，并且在原有数据上进行修改            df.rename(str.lower, axis='columns')            df.rename(index=&#123;1: 'a', 2: 'b'&#125;, inplace=True)</code></pre></blockquote><pre><code>        4.4.2 离散化连续数据</code></pre><blockquote><pre><code>            cuts = pd.cut(arr1, arr2)    # 使用pandas的cut函数划分组            pd.cut(arr1, arr2=arr2, right=False)</code></pre></blockquote><pre><code>        4.4.3 哑变量处理类别型数据</code></pre><blockquote><pre><code>            pd.get_dummies(df1, prefix=['col_前缀'])  # 哑变量处理</code></pre></blockquote><p>数据分析</p><h1>V分组与聚合原理</h1><h2 id="5-1分组与聚合的原理">5.1分组与聚合的原理</h2><pre><code>        分组是指使用特定的条件将原数据划分为多个组，聚合在这里指的是，对每个分组中的数据执行某些操作，最后将计算的结果进行整合。        Pandas官方参考文档地址是http://pandas.pydata.org/pandas-docs/stable/groupby.html。        过程大概分为三步：            拆分            ｜ 将数据集按照一些标准拆分为若干个组。            应用            ｜ 将某个函数或方法(内置和自定义均可)应用到每个分组            合并            ｜ 将产生的新值整合到结果对象中。</code></pre><h2 id="5-2通过groupby（）方法拆分数据">5.2通过groupby（）方法拆分数据</h2><pre><code>        df.groupby(by='Key')  # 按Key列进行分组        groupby_obj = df.groupby(len)     # 使用内置函数len进行分组        for i in group_obj:    print(i) # 遍历分组对象</code></pre><h2 id="5-3数据的聚合">5.3数据的聚合</h2><pre><code>        5.3.1使用内置统计方法聚合数据            df.groupby('key1').mean() # 按key1进行分组，求每个分组的平均值        5.3.2面向列的聚合方法（agg）            data_group.agg(sum)# 求每个分组的列和            data_group.agg(range_data_group)  # 使用自定义函数聚合分组数据            ｜ def range_data_group(arr):            ｜     return arr.max()-arr.min()            ｜             data_group.agg([(&quot;极差&quot;, range_data_group), (&quot;和&quot;, sum)])  # 对一列数据用两种函数聚合            data_group.agg(&#123;'a': 'sum', 'b': 'mean', 'c': range_data_group&#125;)  # 每列使用不同的函数聚合分组数据</code></pre><h2 id="5-4分组级运算">5.4分组级运算</h2><pre><code>        5.4.1数据转型(transform)            df.groupby(key).transform('mean')  # 以key为分组依据，对df对象进行分组            ｜ key = ['one','one','two',' two',' two']        5.4.2数据应用(apply)            dict([x for x in data_by_group])['a']# 打印分组数据            data_by_group.apply(max)# 调用apply()方法聚合，求每个分组中的最大值</code></pre><h1>VI可视化分析</h1><h2 id="6-1数据可视化的概述">6.1数据可视化的概述</h2><pre><code>        6.1.1常见的图表类型</code></pre><ul><li><p>直方图，又称作质量分布图，它是由一系列高度不等的纵向条纹或线段表示数据分布的情况，一般用横轴表示数据的类型，纵轴表示分布情况。<br>｜ 直方图可以利用方块的高度来反映数据的差异,只适用于中小规模的数据集，不适用于大规模的数据集。<br>折线图是用直线段将各数据点连接起来而组成的图形，以折线的方式显示数据的变化趋势。<br>｜ 折线图可以显示随时间变化的连续数据，适用于显示在相等时间间隔下数据的趋势。<br>条形图是用宽度相同的条形的高度或者长短来表示数据多少的图形，可以横置或纵置，纵置时也称为柱形图。<br>饼图可以显示一个数据序列中各项的大小与各项总和的比例，每个数据序列具有唯一的颜色或图形，并且与图例中的颜色是相对应的。<br>｜ 饼图可以很清晰地反映出各数据系列的百分比情况。<br>在回归分析中，散点图是指数据点在直角坐标系平面上的分布图，通常用于比较跨类别的数据。散点图包含的数据点越多，比较的效果就会越好。<br>｜ 散点图中每个坐标点的位置是由变量的值决定的，用于表示因变量随自变量而变化的大致趋势，以判断两种变量的相关性。<br>箱形图又称为盒须图、盒式图或箱线图，是一种用作显示一组数据分散情况资料的统计图。<br>｜ 箱形图提供了一种只用5个点对数据集做简单总结的方式。</p><pre><code>         区别         ｜ 直方图：适于比较数据之间的多少。         ｜ ​折线图：反映一组数据的变化趋势。         ｜ ​条形图：显示各个项目之间的比较情况，和直方图有类似的作用。         ｜ ​散点图：显示若干数据系列中各数值之间的关系。         ｜ ​箱形图：识别异常值方面有一定的优越性</code></pre></li></ul><h2 id="6-2Matplotlib绘制图表">6.2Matplotlib绘制图表</h2><pre><code>    ｜ Python2D绘图库</code></pre><p>6.2.1通过figure（）函数创建画布</p><blockquote><p>如果不希望在默认的画布上绘制图形，则可以调用figure()函数构建一张新的空白画布。<br>matplotlib.pyplot.figure(num = None,figsize = None,dpi = None,facecolor = None,edgecolor = None, …,** kwargs)<br>｜     num   – 表示图形的编号或名称。<br>｜ figsize   – 用于设置画布的尺寸。<br>｜ ​facecolor – 用于设置画板的背景颜色。<br>｜ ​edgecolor – 用于显示边框颜色。</p><pre><code>            调用figure()函数创建新的空白画布。            ｜ figure_obj = plt.figure()</code></pre></blockquote><pre><code>        6.2.2通过subplot（）函数创建单个子图</code></pre><blockquote><p>Figure对象允许划分为多个绘图区域，每个绘图区域都是一个Axes对象，它拥有属于自己的坐标系统，被称为子图。<br>要想在画布上创建一个子图，则可以通过subplot()函数实现。<br>subplot(nrows, ncols, index, **kwargs)<br>｜ nrows，ncols – 表示子区网格的行数、列数。<br>｜ ​ index – 表示矩阵区域的索引。</p><pre><code>            subplot()函数会将整个绘图区域等分为“nrows （行）* ncols（列）”的矩阵区域，之后按照从左到右、从上到下的顺序对每个区域进行编号。其中，位于左上角的子区域编号为1，依次递增。            如果nrows、ncols和index这三个参数的值都小于10，则可以把它们简写为一个实数。</code></pre></blockquote><pre><code>        6.2.3通过subplots（）函数创建多个子图</code></pre><blockquote><p>如果希望一次性创建一组子图，则可以通过subplots()函数进行实现。<br>subplots(nrows = 1,ncols = 1,sharex = False,sharey = False,squeeze = True,subplot_kw = None,gridspec_kw = None,** fig_kw)<br>｜   nrows，ncols – 表示子区网格的行数、列数。<br>｜ ​sharex，sharey – 表示控制x或y轴是否共享。</p><pre><code>            subplots()函数会返回一个元组，元组的第一个元素为Figure对象（画布），第二个元素为Axes对象（子图，包含坐标轴和画的图）或Axes对象数组。如果创建的是单个子图，则返回的是一个Axes对象，否则返回的是一个Axes对象数组。</code></pre></blockquote><pre><code>        6.2.4通过add_subplot()函数来添加和选中子图</code></pre><blockquote><p>还可以通过Figure类的add_subplot()方法添加和选中子图。<br>add_subplot(* args,** kwargs )<br>｜ 上述方法中，args参数表示一个三位数的实数或三个独立的实数，用于描述子图的位置。比如“a, b, c”，其中a和b表示将Figure对象分割成ab大小的区域，c表示当前选中的要操作的区域。</p><pre><code>            每调用一次add_subplot()方法只会规划画布划分子图，且只会添加一个子图。当调用plot()函数绘制图形时，会画在最后一次指定子图的位置上。</code></pre></blockquote><pre><code>        6.2.5添加各类图标        6.2.6绘制常见图表        6.2.7多学一招：图表正确显示中文</code></pre><blockquote><p>｜ 如果要设置的图表标题中含有中文字符，<br>｜ ​则会变成方格子而无法正确显示。<br>在python脚本中动态设置matplotlibrc，这样就可以避免由于更改配置文件而造成的麻烦。<br># 设置显示中文字体<br>｜ from pylab import mpl<br>｜ ​mpl.rcParams[‘font.sans-serif] = [‘SimHei’]</p><pre><code>            另外，由于字体更改以后，会导致坐标轴中的部分字符无法正常显示，这时需要更改axes.unicode_minus参数。                # 设置正常显示符号                ｜ mpl.rcParams['axes.unicode_minus'] = False</code></pre></blockquote><pre><code>        6.2.8多学一招：颜色、线型、标记的位置</code></pre><blockquote><p>｜ 在使用绘制图表的函数（比如plot等）画图时，可以设定线条的相关参数，包括颜色、线型和标记风格。<br>线条颜色使用color参数控制，它支持如下表所列举的颜色值。</p><pre><code>            线型使用linestyle参数控制，它支持如下表所列举的线型值。            标记风格使用marker参数控制，它支持如右表所列举的标记值。</code></pre></blockquote><pre><code>        6.2.9多学一招：本地保存图形</code></pre><blockquote><p>｜ 在Jupyter Notebook中还可以在图形上右击另存为图片，或在PyCharm显示图形的窗口中，点击保存按钮进行保存。<br>要想保存当前生成的图表，可以调用savefig()函数进行保存。<br>｜ savefig(fname, dpi=None, facecolor=‘w’, edgecolor=‘w’, …)<br>fname参数是一个包含文件名路径的字符串，或者是一个类似于Python文件的对象。如果format 参数设为None且fname参数是一个字符串，则输出格式将根据文件名的扩展名推导出来。</p></blockquote><h2 id="6-3Seaborn绘制统计图形">6.3Seaborn绘制统计图形</h2><blockquote><p>6.3.1可视化数据的分布<br>Seaborn基于Matplotlib核心库进行了更高级的API封装，可以轻松地画出更漂亮的图形，而Seaborn的漂亮主要体现在配色更加舒服，以及图形元素的样式更加细腻。<br>｜ import seaborn as sns<br>另外，也可以在Jupyter Notebook中使用如下魔术命令绘图。<br>｜ %matplotlib inline<br>当处理一组数据时，通常先要做的就是了解变量是如何分布的。<br>｜ 对于单变量的数据来说，采用直方图或核密度曲线是个不错的选择。<br>｜ 对于双变量来说，可采用多面板图形展现，比如散点图、二维直方图、核密度估计图形等。<br>Seaborn中提供了一个distplot()函数，它默认绘制的是一个带有核密度估计曲线的直方图。<br>｜ <strong>distplot(a, bins = None，hist = True,kde = True,rug = False, …</strong>)<br>｜    a – 表示要观察的数据。<br>｜ bins – 用于控制条形的数量。<br>｜ hist – 表示是否绘制（标注）直方图。<br>｜  kde** – 表示是否绘制高斯核密度估计曲线。<br>｜ ​rug – 表示是否在支持的轴方向上绘制rugplot。<br>如果希望使用Seaborn用Matplotlib的默认样式，则需要显式地调用set()或set_style()、set_context()和set_palette()中的一个或多个函数，以获取Seaborn或者Matplotlib默认的绘图样式。<br>e.g<br>｜ # 显式调用set()获取默认绘图sns.set()<br>｜ ​np.random.seed(0)<br>｜ ​arr = np.random.randn(100)<br>｜ ​# 绘制直方图<br>｜ ​ax = sns.distplot(arr, bins=10)</p><pre><code>                核密度估计是在概率论中用来估计未知的密度函数，属于非参数检验方法之一，可以比较直观的看出数据样本本身的分布特征。                ｜ 直方图会因为条柱数量的不同导致图表的效果有着很大的差异，为了解决这个问题，可以绘制核密度估计曲线进行展现。                    e.g                    ｜ array_random = np.random.randint(0, 100, 500)                    ｜ ​# 绘制核密度估计曲线                    ｜ ​sns.distplot(array_random, hist=False, rug=True)                通过jointplot()函数可以创建一个多面板图形，以显示两个变量之间的关系及每个变量在单独坐标轴上的单变量分布。                ｜ seaborn.jointplot(x, y, data=None, kind='scatter', color=None, size=6, ratio=5, space=0.2, dropna=True,</code></pre><p>xlim=None, ylim=None, …, **kwargs)<br>e.g<br>｜ dataframe_obj = pd.DataFrame({“x”:np.random.randn(500), “y”: np.random.randn(500)})#<br>绘制散布图sns.jointplot(x=“x”, y=“y”, data=dataframe_obj)</p><pre><code>                调用jointplot()函数时只要传入kind=“hex”可以绘制二维直方图。                ｜ # 绘制二维直方图sns.jointplot(x=&quot;x&quot;, y=&quot;y&quot;, data=dataframe_obj, kind=&quot;hex&quot;)                调用jointplot()函数时只要传入kind=“kde”可以绘制核密度估计图形。                ｜ `# 核密度估计                ｜ sns.jointplot(x=&quot;x&quot;, y=&quot;y&quot;, data=dataframe_obj, kind=&quot;kde&quot;)                ｜ `                要想在数据集中绘制多个成对的双变量分布，则可以使用pairplot()函数实现，该函数会创建一个坐标轴矩阵，并且显示DataFrame对象中每对变量的关系。</code></pre></blockquote><pre><code>        6.3.2用分类数据绘图</code></pre><blockquote><p>数据集中的数据类型有很多种，除了连续的特征变量之外，最常见的就是类目型的数据类型了。<br>Seaborn针对分类数据提供了专门的可视化函数，这些函数大致可以分为如下三种：<br>分类数据散点图:<br>通过stripplot()函数可以画一个散点图。<br>stripplot(x = None, y = None,hue = None,data = None,order = None,hue_order = None,jitter = False, …,**<br>kwargs)<br>｜ x，y，hue – 用于绘制长格式数据的输入。<br>｜ data – 用于绘制的数据集。如果x和y不存在，则它将作为宽格式，否则将作为长格式。order，hue_order – 用于绘制分类的级别。<br>｜ ​ jitter – 表示抖动的程度（仅沿类别轴）。<br>e.g<br>｜ # 加载内置的数据集tipstips = sns.load_dataset(“tips”)# 绘制散点图sns.stripplot(x=“day”, y=“total_bill”,<br>data=tips)<br>可以在调用stripplot()函数时传入jitter参数，以调整横坐标的位置。<br>｜ # 加载内置的数据集tipstips = sns.load_dataset(“tips”)# 绘制散点图sns.stripplot(x=“day”, y=“total_bill”,<br>data=tips, jitter=True)</p><pre><code>                    还可以调用swarmplot() 函数绘制散点图，该函数的好处就是所有的数据点都不会重叠。                        e.g                        ｜ # 加载内置的数据集tipstips = sns.load_dataset(&quot;tips&quot;)# 绘制散点图sns.swarmplot(x=&quot;day&quot;, y=&quot;total_bill&quot;,</code></pre><p>data=tips)</p></blockquote><pre><code>                分类数据的分布图：</code></pre><blockquote><p>｜ 直观地反映出各个分类的数据分布<br>seaborn中用于绘制箱形图的函数为boxplot()。<br>seaborn.boxplot(x = None, y = None,hue = None,data = None,orient = None, palette = None,saturation = 0.75, …,<br>** kwargs)<br>｜     orient – 表示数据垂直或水平显示，取值为“v” | “h”。<br>｜ ​palette --用于设置不同级别色相的颜色变量。<br>｜ ​saturation – 用于设置数据显示的颜色饱和度。<br>e.g<br>｜ # 加载内置的数据集tipstips = sns.load_dataset(“tips”)# 绘制箱形图sns.boxplot(x=“day”, y=“total_bill”,<br>data=tips)</p><pre><code>                    通过violinplot()函数可以绘制提琴图。                        seaborn.violinplot(x = None,y = None,hue = None,data = None,order = None,hue_order = None,bw ='scott',cut =</code></pre><p>2,scale =‘area’,scale_hue = True,gridsize = 100,width = 0.8,inner<br>=‘box’,split = False,dodge = True,orient = None,linewidth = None,color = None,palette = None,saturation = 0.75,ax = None,** kwargs)<br>e.g<br>｜ # 加载内置的数据集tipstips = sns.load_dataset(“tips”)# 绘制提琴图sns.violinplot(x=“day”, y=“total_bill”,<br>data=tips)</p></blockquote><pre><code>                分类数据的统计估算图:                ｜ 查看每个分类的集中趋势</code></pre><blockquote><p>默认情况下，barplot()函数会在整个数据集上使用均值进行估计。<br>｜ 若每个类别中有多个类别时（使用了hue参数），则条形图可以使用引导来计算估计的置信区间，并使用误差条来表示置信区间。<br>｜ ​置信区间，是指由样本统计量所构造的总体参数的估计区间。<br>e.g<br>｜ # 加载内置的数据集tipstips = sns.load_dataset(“tips”)# 绘制条形图sns.barplot(x=“day”, y=“total_bill”,<br>data=tips)</p><pre><code>                    点图，可以调用pointplot()函数进行绘制。                    ｜ pointplot()函数会用高度估计值对数据进行描述，而不是显示完整的条形，它只会绘制点估计和置信区间。                        e.g                        ｜ # 加载内置的数据集tipstips = sns.load_dataset(&quot;tips&quot;)# 绘制条形图sns.pointplot(x=&quot;day&quot;, y=&quot;total_bill&quot;,</code></pre><p>data=tips)</p></blockquote><h2 id="6-4Bokeh交互式可视化库">6.4Bokeh交互式可视化库</h2><blockquote><p>6.4.1认识Bokeh库<br>Bokeh是针对浏览器使用的交互式可视化库，它旨在提供优雅、简洁的通用图形，帮助程序员快速地、轻松地创建交互图、数据应用程序等。<br>Bokeh库捆绑了多种语言，包括Python、R语言、lua和Julia，结合这些语言产生了JSON文档，此文档将作为BokehJS（JavaScript库）的输入，之后将数据展示到Web浏览器上面。<br>Bokeh提供了强大而灵活的功能，使其操作简单且高度定制化，它为用户提供了多个可视化界面，具体包含以下接口：<br>｜ 高级接口<br>｜ Charts<br>｜ 中级接口<br>｜ Plotting<br>｜ 底层接口<br>｜ Models<br>｜</p></blockquote><pre><code>        Plotting是以构建视觉符号为核心的接口，可以结合各种视觉元素和工具创建可视化图形。</code></pre><blockquote><p>｜ 使用plotting创建图表的基本步骤如下：<br>｜ 第1步：导入Bokeh库中用到的一些方法或函数。<br>｜ 第2步：准备数据，可以Python列表,NumPy数组或Series对象。<br>｜ 第3步：选择输出方式:(1)使用output file()函数生成HTMML文档。(2)使用outputnotebook()函数用在JupyterNotebook上.<br>｜ 第4步：调用figure()创建一个具有典型默认选项的图形并且可以轻松地定制标题、工具和坐标轴标签<br>｜ 第5步：添加渲染器。<br>｜ 第6步：显示或保存图表，通过调用show()或save()函数将画好的图形保存到HTML文件，或选择性地将其显示在浏览器中，<br>｜<br>有关Bokeh库的使用大同小异，都是基于上述的基本步骤完成的，大家可以参考官方文档（<a href="https://bokeh.pydata.org/en/latest/%EF%BC%89%E7%BB%98%E5%88%B6%E4%B8%80%E4%BA%9B%E5%85%B6%E5%AE%83%E7%9A%84%E5%9B%BE%E5%BD%A2%E3%80%82">https://bokeh.pydata.org/en/latest/）绘制一些其它的图形。</a></p></blockquote><h1>VII时间序列数据分析</h1><h2 id="7-1时间序列基础">7.1时间序列基础</h2><pre><code>        7.1.1创建时间序列数据            pd.to_datetime('20180828')   # 将datetime转换为Timestamp对象            ｜ #可传入多个datetime字符串            date_index[0]      # 取出第一个时间戳            date_ser = pd.Series([11, 22, 33], index=date_index)       # 创建时间序列类型的Series对象            # 指定索引为多个datetime的列表            ｜ date_list = [datetime(2018, 1, 1), datetime(2018, 1, 15),             datetime(2018, 2, 20), datetime(2018, 4, 1),             datetime(2018, 5, 5), datetime(2018, 6, 1)]time_se = pd.Series(np.arange(6), index=date_list)        7.1.2通过时间戳索引选取子集            date_se = pd.Series(np.arange(6), index=date_index)   # 创建以DatetimeIndex 为索引的Series对象            ｜ # 指定索引为多个日期字符串的列表date_list = ['2015/05/30', '2017/02/01',             '2015.6.1', '2016.4.1',             '2017.6.1', '2018.1.23']#接受多格式时间表达            ｜ ​# 将日期字符串转换为DatetimeIndex date_index = pd.to_datetime(date_list)            time_se[3]   # 根据位置索引获取数据            date_se['20150530']    #通过数据索引            date_se['2015']  # 获取2015年的数据            sorted_se.truncate(before='2016-1-1')   # 扔掉2016-1-1之前的数据            ｜ after=之后</code></pre><h2 id="7-2固定频率的时间序列">7.2固定频率的时间序列</h2><pre><code>        7.2.1创建固定频率的时间序列            # 创建DatetimeIndex对象时，只传入开始日期与结束日期pd.date_range('2018/08/10', '2018/08/20'            # 创建DatetimeIndex对象时，传入start/end与periods参数pd.date_range(start='2018/08/10', periods=5)            ｜ periods：时间段（长度）            dates_index =             ｜ pd.date_range('2018-01-01',         # 起始日期             ｜                            periods=5,            # 周期            ｜                             freq='W-SUN')         # 频率（D，W，M，Y）            e.g                # 创建DatetimeIndex，并指定开始日期、产生日期个数、默认的频率，以及时区pd.date_range(start='2018/8/1 12:13:30', periods=5,               tz='Asia/Hong_Kong')                #规范化时间戳pd.date_range(start='2018/8/1 12:13:30', periods=5,               normalize=True, tz='Asia/Hong_Kong')        7.2.2时间序列的频率，偏移量             DateOffset(months=4, days=5)            ｜ from pandas.tseries.offsets import *&lt;DateOffset: days=5, months=4&gt;                Week(2) + Hour(10)                ｜ Timedelta('14 days 10:00:00')            # 生成日期偏移量            ｜ date_offset  = Week(2) + Hour(10)            ｜ ​pd.date_range('2018/3/1', '2018/3/31', freq=date_offset)        7.2.3时间序列数据的移动            time_ser.shift(1)   # 向后移动一次            ｜ time_ser = pd.Series(略，略)            ｜ shift（-1）  #向前</code></pre><h2 id="7-3时间周期及计算">7.3时间周期及计算</h2><pre><code>        7.3.1创建时期对象            # 创建Period对象，表示从2018-01-01到2018-12-31之间的时间段pd.Period(2018)            ｜ 等同于p = pd.Period(2018,freq='A-DEC')   % freq ='A-DEC'表一年            # 表示从2017-06-01到2017-06-30之间的整月时间                          period = pd.Period('2017/6')            ｜ period 可以直接+/-M            ｜ period 之间可以+/-        7.3.2时期的频率转换            period.asfreq('M', how='end')            ｜ freq #频率</code></pre><h2 id="7-4重采样">7.4重采样</h2><pre><code>        7.4.1重采样方法（resample）        ｜ 重新            time_ser.resample('W-MON', closed='left').mean()        7.4.2降采样        ｜ 减少            time_ser.resample('7D').ohlc()  # OHLC重采样            time_ser.groupby(lambda x: x.week).mean()# 通过groupby技术实现降采样        7.4.3升采样        ｜ 增加            time_df.resample('D').asfreq()# 填NaN            time_df.resample('D').ffill()# 取上一个数据填入</code></pre><h2 id="7-5数据统计——滑动窗口">7.5数据统计——滑动窗口</h2><pre><code>    ｜ 指的是根据指定的单位长度来框住时间序列，从而计算框内的统计指标。    ｜ 将某个时间点的数据用大约10个单位的数据平均值来代替        每次窗口移动，一次只会移动一个单位的长度，并且窗口的长度始终为10个单位长度，直至移动到末端。        ｜ 通过滑动窗口统计的指标会更加平稳一些，数据上下浮动的范围会比较小。        rolling(window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None)        ｜ window      -- 表示窗口的大小。        ｜ ​min_periods -- 每个窗口最少包含的观测值数量。        ｜ ​center      -- 是否把窗口的标签设置为居中。        ｜ ​win_type    -- 表示窗口的类型。        ｜ ​closed      -- 用于定义区间的开闭。    7.6时序模型——ARIMA    ｜ 时间序列预测模型        介绍            全称叫做差分整合移动平均自回归模型，又称作整合移动平均自回归模型，是一种用于时间序列预测的常见统计模型。            组成                AR，I，MA(p,d,q)模型                ｜ p--代表预测模型中采用的时序数据本身的滞后数，即自回归项数。                ｜ ​d--代表时序数据需要进行几阶差分化，才是稳定的，即差分的阶数。                ｜ ​q--代表预测模型中采用的预测误差的滞后数，即滑动平均项数。        建立的基本步骤            1.获取被观测的时间序列数据。            2.根据时间序列数据进行绘图，观测是否为平稳时间序列。            3.从平稳的时间序列中求得自相关系数ACF和偏自相关系数PACF，得到最佳的阶层p和阶数q。            4.根据上述计算的d、q、p得到ARIMA模型，然后对模型进行检验。        对于一个时间序列来说，如果它的均值没有系统的变化（无趋势），方差没有系统变化，并且严格消除了周期性的变化，就称为是平稳的。</code></pre><h1>Ⅷ文本数据分析</h1><h2 id="8-1文本数据分析工具">8.1文本数据分析工具</h2><pre><code>        8.1.1NLTK与 jieba概述            NLTK全称为Natural Language Toolkit，它是一套基于Python的自然语言处理工具包，可以方便地完成自然语言处理的任务。            ｜ NLTK是一个免费的、开源的、社区驱动的项目，它为超过50个语料库和词汇资源（如WordNet）提供了易于使用的接口，以及一套用于分类、标记化、词干化、解析和语义推理的文本处理库。                作用                NLTK库中附带了许多语料库、玩具语法、训练模型等，完整的信息发布在http：//nltk.org/nltk_data/网上。            “Jieba”：最好的 Python 中文分词组件。                特点                ｜ 支持三种分词模式                ｜ 支持繁体分词                ｜ 支持自定义词典                ｜                 分词模式                ｜ 试图将句子最精确地切开，适合文本分析。                ｜ 精确模式                ｜ 把句子中所有可以成词的词语都扫描出来速度非常快，但是不能解决歧义。                ｜ 全模式                ｜ 在精确模式的基础上对长词再次切分，提高召回率，适合用于搜索引擎分词。                ｜ 搜索引擎模式        8.1.2安装nltk和下载语料库            import nltk    nltk.download()    # 打开NLTK下载器            ｜ 检查包是否齐全            from nltk.corpus import brown       # 导入brown语料库brown.words()                        # 查看brown库中所有的单词        8.1.3jieba的安装            pip install jieba</code></pre><h2 id="8-2文本预处理">8.2文本预处理</h2><pre><code>        8.2.1预处理流程        8.2.2分词        ｜ 将由连续字符组成的语句，        ｜ ​按照一定的规则划分成一个个独立词语的过程。            英文            ｜ 以空格为分隔符            中文            ｜ 没有形式上的分隔符                分词算法                ｜ 按照一一定的策略将待分析的中文句子与一个“充分大的”机器词典中的词条进行匹配                ｜ 基于规则的分词方法                ｜ 它的基本思想是常用的词语是比较稳定的组合。                ｜ 基于统计的分词方法                ｜ 它的基本思想是在分词的同时进行句法、语义分析，利用句法信息和语义信息来处理歧义现象。                ｜ 基于理解的分词方法            nltk                 words = nltk.word_tokenize(sentence)    # 将句子切分为单词            jieba                要想使用jieba对中文句子分词，则可以通过jieba.cut() 函数进行划分                ｜ 该函数接收如下三个参数：                ｜ 需要分词的字符串。                ｜ cut all参数用来控制是否采用全模式。                ｜ HMM 参数用来控制是否使用 HMM 模型。                ｜ ​                    e.g        8.2.3词性标注        ｜ 为分词结果中的每个词标注一个正确的词性。            nltk.pos_tag(words)   # 为列表中的每个单词标注词性            词性是对词语分类的一种方式                英文                ｜ 名词、形容词、动词、代词、数词、副词、介词连词、冠词和感叹词。                中文                ｜ 名词、动词、形容词，数词、量词，代词、介词，副词、连词、感叹词、助词和拟声词。            nltk约定            nltk.pos_tag(words)    # 标注            ｜ 需要先确保已经下载了averaged_perceptron_tagger模块        8.2.4词性归一化        ｜ 找词根            # 导入nltk.stem模块的波特词干提取器            ｜ from nltk.stem.porter import PorterStemmer# 按照波特算法提取词干            ｜ ​porter_stem = PorterStemmer()porter_stem.stem('watched')            # 导入nltk.stem模块的兰卡斯特词干提取器            ｜ from nltk.stem.lancaster import LancasterStemmer            ｜ ​lancaster_stem = LancasterStemmer()# 按照兰卡斯特算法提取词干lancaster_stem.stem('jumped')            # 导入nltk.stem模块的Snowball词干提取器            ｜ from nltk.stem import SnowballStemmer            ｜ ​snowball_stem = SnowballStemmer('english')            ｜ ​snowball_stem.stem('listened')            # 导入nltk.stem模块的WordNetLemmatizer词干还原            ｜ from nltk.stem import WordNetLemmatizer# 创建WordNetLemmatizer对象            ｜ ​wordnet_lem = WordNetLemmatizer()# 还原books单词的基本形式wordnet_lem.lemmatize('books')                wordnet_lem.lemmatize('went', pos='v')   # 指定went的词性为动词        8.2.5删除停用词        ｜ 排除已选好的停用词            words = nltk.word_tokenize(sentence)   # 将英文语句按空格划分为多个单词            stop_words = stopwords.words('english')    # 获取英文停用词列表            e.g                对于其它语言来说，可以参照https://www.ranks.nl/stopwords进行了解。</code></pre><h2 id="8-3文本情感分析">8.3文本情感分析</h2><pre><code>        8.3.1文本情感分析        ｜ 对设定好的语句进行赋分，并用特定方法处理后，形成一个训练模型        ｜             大致思路：            ｜ 对文本进行分词操作，从中找出情感词、否定词以及程度副词。            ｜ 第1步            ｜ 判断每个情感词之前是否有否定词及程度副词，将它之前的否定词和程度副词划分为一组。            ｜ 第2步            ｜ 将所有组的得分加起来，得分大于0的归于正向，小于0的归于负向。            ｜ 第3步            train(cls, labeled_featuresets , estimator = ELEProbDist)   #  主要用于根据训练集来训练模型            ｜  labeled_featuresets -- 表示分类的特征集列表。            ｜             ｜ nltk.classify模块中的NaiveBayesClassifier类实现了朴素贝叶斯分类算法，该类中有一个类方法train()，主要用于根据训练集来训练模型。            e.g</code></pre><h2 id="8-4文本相似度">8.4文本相似度</h2><pre><code>        8.4.1文本相似度        ｜ 分别将两个文本的单词拆分，并记录词频，然后比较            文本相似度的衡量计算方法            ｜ 基于关键字匹配的传统方法，比如N-gram相似度。            ｜ 关键字匹配            ｜ 将文本映射到向最空间，再利用余弦相似度等方法进行计算。            ｜ 映射向量            ｜ 比如卷积神经网络的ConvNet、用户点击数据的深度学习语义匹配模型DSSM等            ｜ 深度学习            实现步骤：            ｜ 通过特征提取的模型或手动实现，找出这两篇文章的关键词。            ｜ 第1步            ｜ 认每篇文章中各取出若干个关键词，再把这些关键词合并成个集合，然后计算每篇文章中各个词对于这个集合中的关键词的词频。            ｜ 第2步            ｜ 生成两篇文章中各自的词频向量。            ｜ 第3步            ｜ 计算两个向量的余弦相似度，值越大则表示越相似。            ｜ 第4步            e.g</code></pre><h2 id="8-5文本分类">8.5文本分类</h2><pre><code>        8.5.1文本分类        ｜ 将文本分为训练数据和测试数据            e.g            文本分类是指按照一定的分类体系或标准，用电脑对文本集进行自动分类标记，主要的目的是将文本或文档自动地归类为一种或多种预定义的类别            实现步骤：            ｜ 包括数据集以及基本的预处理工作，用于将原始语料格式化为同一格式，便于后续进行统一处理。            ｜ 数据准备            ｜ 从文档中抽取出反映文档主题的特征            ｜ 特征抽取            ｜ 分类器模型会在个有标注数据集上进行训练。            ｜ 模型训练            ｜ 分类器的测试结果分析。            ｜ 结果评价</code></pre><h1>IXpyecharts</h1><h2 id="9-1概述">9.1概述</h2><pre><code>    matplotlib作为Python中著名的基础绘图库，它拥有着极其丰富的可视化功能，但其仍存在诸多不足，比如图表无法与用户交互、 API过于复杂等。为此，Python中引入了可视化神器——pyecharts库，使用pyecharts可以快速地生成效果惊艳的Echarts 图表。     与matplotlib相比， pyecharts库具有以下优势：    ｜ 简洁的API使开发者使用起来非常便捷，且支持链式调用。程序可在主流的Jupyter Notebook或JupyterLab工具上运行。程序可以轻松地集成至 Flask、Sanic、Django 等主流的Web框架中。灵活的配置项可以轻松搭配出精美的图表。详细的文档和示例可以帮助开发者快速地上手。400多个地图文件、原生百度地图为地理数据可视化提供强有力的支撑。    Echarts的底层基于ZRender（二维绘图引擎，支持Canvas、SVG、VML等多种渲染方法）创建了坐标系、图例、提示框等基础组件，并基于这些组件创建了丰富的图表，包括常见的折线图、柱形图、散点图、饼图等；用于地理数据可视化的统计地图、热力图等；用于关系数据可视化的树状图、旭日图；用于多维数据可视化的平行坐标；用于BI 的漏斗图、仪表盘，还有任意混搭展现的组合图表。    Echarts    ｜ 标题组件：包括主标题和副标题，位于图表的左上角。     ｜ ​图例组件：位于图表的顶部中心位置，用户通过单击可显示或隐藏图例项对应的图形。    ｜ ​ 提示框组件：用于显示鼠标悬浮在图形上方的提示内容。 数据区域缩放组件：用于供用户选择关注细节的数据信息、概览图形数据的整体或去除离群点的影响 。    ｜ ​视觉映射组件：标识某一数值范围内数值及颜色对应关系的控件，可细分为分段型视觉映射组件和连续型视觉映射组件。     ｜ 时间线组件……</code></pre><h2 id="9-2pyecharts基础知识">9.2pyecharts基础知识</h2><pre><code>    9.2.1快速绘制图表        e.g        ｜ # 创建 Bar 类的对象 , 并指定画布的大小bar = Bar(init_opts=opts.InitOpts(                 width='600px', height='300px' ))# 添加 x 轴和 y 轴的数据bar.add_xaxis([&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;,                         &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;])bar.add_yaxis(&quot;商家A&quot;, [5, 20, 36, 10, 75, 90])# 设置标题、y 轴标签bar.set_global_opts(title_opts=opts.TitleOpts(title=&quot;柱形图示例&quot;),yaxis_opts=opts.AxisOpts(name=&quot;销售额(万元)&quot;, name_location=&quot;center&quot;, name_gap=30))bar.render_notebook()        链式调用是指简化同一对象多次访问属性或调用方法的编码方式，以避免多次重复使用同一个对象变量，使代码变得简洁、易懂。    9.2.2认识图表类                图表类均继承自Base基类，它们都可以使用与类同名的构造方法创建相应的图表实例。例如，Bar类的构造方法的语法格式如下：        ｜ Bar(init_opts=opts.InitOpts())            以上方法的init_opts参数表示初始化配置项，该参数需要接收一个InitOpts类的对象，通过构建的InitOpts类对象为图表指定一些通用的属性，比如画布大小等。            ｜ bar = Bar(init_opts=opts.InitOpts(width='600px', height='300px'))    9.2.3认识配置项        全局配置项            全局配置项是一些针对图表通用属性的配置项，包括初始化属性、标题组件、图例组件、工具箱组件、视觉映射组件、提示框组件、数据区域缩放组件，其中每个配置项都对应一个类。                            若pyecharts需要为图表设置全局配置项（InitOpts除外），则需要将全局配置项传入set_global_options()方法。set_global_options()方法的语法格式如下：                 set_global_opts(self, title_opts=opts.TitleOpts(), legend_opts=opts.LegendOpts(),…, axispointer_opts=None)                ｜ title_opts：表示标题组件的配置项。                ｜ legend_opts：表示图例组件的配置项。                ｜ tooltip_opts：表示提示框组件的配置项。                ｜ toolbox_opts：表示工具箱组件的配置项。                ｜ brush_opts：表示区域选择组件的配置项。                ｜ xaxis_opts，yaxis_opts：表示x、y轴的配置项。                ｜ ​visualmap_opts：表示视觉映射组件的配置项。                ｜ ​datazoom_opts：表示数据区域缩放组件的配置项。                ｜ ​graphic_opts：表示原生图形元素组件的配置项。                ｜ ​axispointer_opts：表示坐标轴指示器组件的配置项。        系列配置项            系列配置项是一些针对图表特定元素属性的配置项，包括图元样式、文本样式、标签、线条样式、标记样式、填充样式等，其中每个配置项都对应一个类。                             前面介绍的系列配置项类都可以通过与之同名的构造方法创建实例。创建一个标签配置项：            label_opts = opts.LabelOpts(is_show=True, position='right', color='gray', font_size=14, rotate=10)            ｜ 以上示例中，LabelOpts()方法的参数is_show设为True，表示显示标签；            ｜ ​参数position设为'right'，表示标注于图形右方；            ｜ ​参数color设为'gray'，表示标签文本的颜色为灰色；            ｜ ​参数font_size设为14，说明标签文本的字体大小为14号；            ｜ ​参数rotate设为10，说明标签逆时针旋转10度。            若pyecharts需要为图表设置系列配置项，则需要将系列配置项传入add()或add_xx()方法（直角坐标系图表一般使用add_yaxis()方法）中。            ｜ bar.add_yaxis(“商家A”, [5, 20, 36, 10, 75, 90],                             label_opts=opts.LabelOpts(is_show=False))            pyecharts可以通过构造方法或字典两种方式创建配置项，两者是等价的。    9.2.4渲染图表        render（）            render()方法用于将图表渲染到HTML文件，默认为位于程序根目录的render.html文件。            render(self, path=&quot;render.html&quot;, template_name=&quot;simple_chart.html&quot;, env=None, **kwargs)            ｜ path：表示生成文件的路径，默认为“render.html”。            ｜ ​template_name：表示模板的路径。            ｜ ​render()方法会返回HTML文件的路径字符串。        render_notebook（）            render_notebook()方法用于将图表渲染到Jupyter Notebook工具中，它无需接收任何参数。            bar.render_notebook()</code></pre><h2 id="9-3绘图">9.3绘图</h2><pre><code>    pyecharts绘制各种图表的过程大致相同    ｜ 可以分为以下几步：    ｜ ​（1）创建与图表对应类的对象。（2）添加图表数据。（3）添加图表系列配置项。（4）添加图表全局配置项。（5）渲染图表。    9.3.1绘制折线图        pyecharts的Line类表示折线图，该类中提供了一个add_yaxis()方法，使用add_yaxis()方法可以为折线图添加数据和配置项。         add_yaxis(self, series_name, y_axis, is_selected=True, is_connect_nones=False, xaxis_index=None, …itemstyle_opts= None)        ｜ series_name：表示系列的名称，显示于提示框和图例中。        ｜ ​y_axis：表示系列数据。        ｜ ​color：表示系列的注释文本的颜色。        ｜ ​is_symbol_show：表示是否显示标记及注释文本，默认为True。    9.3.2绘制饼图和圆环图        pyecharts的Pie类表示饼图，该类中提供了一个add()方法，使用add()方法可以为饼图添加数据和配置项。         add(self, series_name, data_pair, color=None, radius=None, center=None, rosetype=None, is_clockwise=True,…, itemstyle_opts=None)        ｜ series_name：表示系列的名称，显示于提示框和图例中。        ｜ ​data_pair：表示系列数据帧。        ｜ ​radius：表示饼图的半径，可以接收一个包含两个元素的数组，其中数组的第一项为内半径，第二项为外半径。        ｜ ​center：表示饼图的中心坐标。        ｜ ​is_clockwise：表示饼图的扇区是否按顺时针排布。    9.3.3绘制散点图        pyecharts的Scatter类表示散点图，EffectScatter类表示带有涟漪特效的散点图，这两个类中均提供了一个add_yaxis()方法，使用add_yaxis()方法可以为散点图添加数据和配置项。         add_yaxis(self, series_name, y_axis, is_selected=True, xaxis_index=None, yaxis_index=None, color=None,…, itemstyle_opts=None)        ｜ series_name：表示系列的名称，显示于提示框和图例中。        ｜ ​y_axis：表示系列数据。is_selected：表示是否选中图例。        ｜ ​symbol：表示标记的图形。symbol_size：表示标记的大小。    9.3.4绘制3D柱形图        pyecharts的Bar3D类表示3D柱形图，该类中提供了一个add()方法，使用add()方法可以为3D柱形图添加数据和配置项。        add(self, series_name, data, shading=None, itemstyle_opts=None,    ,…,grid3d_opts=opts.Grid3DOpts())        ｜ series_name：表示系列的名称。        ｜ ​data：表示数据。        ｜ ​shading：表示阴影。        ｜ ​xaxis3d_opts：表示x轴的配置项。        ｜ ​yaxis3d_opts：表示y轴的配置项。        ｜ ​zaxis3d_opts：表示z轴的配置项。    9.3.5绘制统计地图        pyecharts的Map类表示统计地图，该类中提供了一个add()方法，使用add()方法可以为统计地图添加数据和配置项。         add(self, series_name, data_pair, maptype=&quot;china&quot;, is_selected=True, is_roam=True, center=None, …, emphasis_itemstyle_opts=None)        ｜ series_name：表示系列的名称。        ｜ ​data_pair：表示数据项，可以为诸如(坐标点名称, 坐标点值)形式的值。        ｜ ​maptype：表示地图的类型。        ｜ ​zoom：表示当前视角的缩放比例，默认值为1。        ｜ ​is_map_symbol_show：表示是否显示标记图形。    9.3.6绘制漏斗图        pyecharts的Funnel类表示漏斗图，该类中提供了一个add()方法，使用add()方法可以为漏斗图添加数据和配置项。         add(self, series_name, data_pair, is_selected=True, color=None, sort_=&quot;descending&quot;, gap=0, , itemstyle_opts=None)        ｜ series_name：表示系列的名称。        ｜ ​data_pair：表示系列数据项。        ｜ ​is_selected：表示是否选中图例。        ｜ ​sort_：表示数据排序，可以取值为'ascending'、'descending'或'none'。        ｜ ​gap：表示数据图形的间距，默认为0。    9.3.7绘制桑基图        pyecharts的Saneky类表示桑基图，该类中提供了一个add()方法，使用add()方法可以为桑基图添加数据和配置项。         add(self, series_name, nodes, links, is_selected=True, node_width=20, node_gap=8, …, tooltip_opts=None)        ｜ series_name：表示系列的名称。        ｜ ​nodes：表示分支的序列。        ｜ ​links：表示链接的序列。        ｜ ​node_width：表示分支的宽度。        ｜ ​node_gap：表示分支的间隔。</code></pre><h2 id="9-4制作组合图表">9.4制作组合图表</h2><pre><code>    除了前面介绍的单图表，pyecharts也支持绘制组合图表，即同一画布显示的多个图表。多个图表按照不同的组合方式，可以分为并行多图、顺序多图、选项卡多图和时间轮播多图。     9.4.1并行多图        pyecharts.charts的Grid类表示并行排列的组合图表，它可以采用左右布局或上下布局的方式显示多个图表。Grid类中包含一个add()方法，使用add()方法可以为组合图表添加图表或配置项。        add(self, chart, grid_opts, grid_index=0, is_control_axis_index=False)        ｜ chart：表示图表。grid_opts：表示直角坐标系配置项。grid_index：表示直角坐标系网格索引，默认为0。is_control_axis_index：表示是否由自己控制坐标轴索引，默认为False。    9.4.2顺序多图        pyecharts.charts的Page类表示顺序显示的组合图表，它可以在同一网页中按顺序渲染多个图表。Page 类的构造方法的语法格式如下所示：         Page(page_title=&quot;Awesome-pyecharts&quot;, js_host= &quot;&quot;, interval=1, layout=PageLayoutOpts())        ｜ page_title：表示HTML网页的标题。js_host：表示远程的主机地址，默认为&quot;https://assets.pyecharts.org/assets/&quot;。interval：表示每个图例之间的间隔，默认为1。layout：表示布局配置项。        Grid类提供了一个add()方法，使用add()方法可以为组合图表添加多个图表实例。        add(*charts)        ｜ charts: 任意图表实例    9.4.3选项卡多图        pyecharts.charts的Tab类表示以选项卡形式显示的组合图表，它可以点击不同的选项卡来切换显示多个图表。Tab类的构造方法的语法格式如下所示：        Tab(page_title=&quot;Awesome-pyecharts&quot;, js_host=&quot;&quot;)        ｜ 以上方法的参数与Page()方法的参数相同，此处不再赘述。        Tab类提供了一个add()方法，使用add()方法可以为组合图表添加图表。add()方法的语法格式如下所示：        add(self, chart, tab_name)        ｜ 以上方法的参数chart表示任意图表，tab_name表示选项卡标签的名称。    9.4.4时间线轮播多图    ｜ 它可以通过点击时间线的时间节点来切换显示多个图表。        add_schema()方法用于为图表添加指定样式的时间线。        add_schema(self, axis_type=&quot;category&quot;, orient=&quot;horizontal&quot;, symbol=None, symbol_size=None, …, itemstyle_opts=None)        ｜ axis_type：表示坐标轴的类型，可以取值为'value'（数值轴）、'category'（类目轴）、'time'（时间轴）、'log'（对数轴）。orient：表示时间线的类型，可以取值为'horizontal'（水平）和'vertical'（垂直）。play_interval：表示播放的速度，单位为ms。        ｜ is_auto_play：表示是否自动播放，默认为False。is_loop_play：表示是否循环播放，默认为True。is_rewind_play：表示是否反向播放，默认为False。is_timeline_show：表示是否显示时间线组件。width：表示时间线区域的宽度。height：表示时间线区域的高度。        add ()方法用于添加图表和时间点。        add(self, chart, time_point)        ｜ chart：表示图表。time_point：表示时间点。</code></pre><h2 id="pyecharts-faker包">pyecharts.faker包</h2><pre><code>        pyecharts.faker是一个pyecharts官方提供的测试数据包，它包含一个_Faker类的对象Faker，通过Faker对象访问属性来获取一些测试数据。                    除此之外，Faker对象还包含两个比较常用的方法：choose()和values()，其中choose()是一个实例方法，用于从前面表格的前7组测试数据中随机获取一组测试数据；values()是一个静态方法，用于生成一个包含7个随机整数n（20&lt;=n&lt;=150）的列表。9.5定制图表主题    pyecharts 内置了十多种不同风格的图表主题，包括LIGHT、DARK、CHALK等，并将这些图表主题封装为全局变量ThemeType引用类的属性中。            前表中列举的属性可以传入InitOpts()方法的theme参数，之后在初始化图表类时将InitOpts类对象传给init_opts参数，如此便修改了图表默认的主题风格。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 前端开发 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> python库 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发</title>
      <link href="/HEXO/2025/09/07/%E3%80%90Web%E3%80%91%E5%9F%BA%E7%A1%80%E5%90%91/"/>
      <url>/HEXO/2025/09/07/%E3%80%90Web%E3%80%91%E5%9F%BA%E7%A1%80%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1>概述</h1><p><em><strong>本文章为Web面向基础的HTML和CSS3的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</strong></em></p><p>思维导图链接：<br><a href="https://www.mubu.com/doc/3x9VGcLvH9L">HTML5</a><br><a href="https://www.mubu.com/doc/2QG8GlfSd9L">CSS上</a><br><a href="https://www.mubu.com/doc/3gR1mwHEBZL">CSS下</a><br><em><strong>【如果遇到密码，统一为：1230】</strong></em></p><p><strong>下面内容为文章目录，可以先预览后再决定是否下载文档</strong></p><h1>HTML5</h1><h2 id="●简介">●简介</h2><p>●1.1  网页概述<br>●1.2  网页制作技术入门<br>●1.3  Dreamweaver工具的使用</p><h2 id="●标签">●标签</h2><p>●带有“&lt; &gt;”符号的元素被称为HTML标签<br>●单标签<br>●双标签<br>●注释标签<br>●页面格式化标签<br>●标签的属性<br>●HTML文档头部相关标签<br>●文本样式标签<br>●文本格式化标签<br>●图片标签<br>●特殊字符标签<br>●超链接<br>●锚点链接</p><h2 id="●布局">●布局</h2><p>●列表（list）<br>●表格<br>●表单<br>●浮动与定位布局</p><h2 id="●网页视听">●网页视听</h2><p>●音视频嵌入技术概述<br>●嵌入音/视频<br>●浏览器对音视频文件的兼容性<br>●控制视频宽高</p><h1>CSS上篇</h1><p><em>基础篇</em></p><p>●简介<br>●CSS样式规则<br>●代码结构的特点<br>●引入CSS样式表<br>●CSS基础选择器<br>●CSS字体样式属性<br>●CSS文本外观属性<br>●CSS复合选择器<br>●CSS层叠性和继承性<br>●CSS优先级</p><h1>CSS下篇</h1><p><em>进阶篇</em></p><p>●div盒子<br>●背景图片<br>●元素类型<br>●CSS控制列表样式<br>●CSS控制超链接样式<br>●CSS控制表格样式<br>●CSS控制表单样式<br>●transition（过渡，转变）<br>●transform（变形）<br>●animation（动画）</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 前端开发 </category>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Web开发 </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理</title>
      <link href="/HEXO/2025/09/07/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF%E3%80%90MATLAB%E3%80%91/"/>
      <url>/HEXO/2025/09/07/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF%E3%80%90MATLAB%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h1>概述</h1><p><em><strong>本文章为Matlib面向基础的数字图像处理技术基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</strong></em><br>（<strong>实话</strong>，这科目没认真听，内容残缺）</p><p>思维导图链接：<br><a href="https://www.mubu.com/doc/1bDgzh31U9L">MATLIB常用操作</a><br><a href="https://www.mubu.com/doc/3tsyxEiRgpL">数字图像处理I</a><br><a href="https://www.mubu.com/doc/7enui9EstFL">数字图像处理II</a></p><p><em><strong>【如果遇到密码，统一为：1230】</strong></em></p><p><strong>下面内容为文章目录，可以先预览后再决定是否下载文档</strong></p><h1>MATLAB常用操作</h1><p>●操作<br>●# 图像读入<br>●写入<br>●显示<br>●排列输出图像m行n列第i个<br>● 直方图<br>●# 通过直方图调整对比度<br>●# 直方图均衡化<br>●# 噪声函数<br>● # 图像平滑<br>● # 中值滤波<br>●# 转化为双精度图像<br>●颜色<br>●RGB<br>●HSV<br>●图像形态学<br>●%腐蚀<br>●%膨胀<br>●开运算<br>●闭运算</p><h1>数字图像处理.I</h1><h2 id="●I绪论">●I绪论</h2><p>●1.1数字图像处理的基本概念<br>●1.2常用文件存储格式<br>●1.5MATLAB图像处理基础</p><p><s>## ●III图像视觉系统与图像采集系统</s></p><h2 id="●IV基本图像变换">●IV基本图像变换</h2><h2 id="●V-图像增强">●V 图像增强</h2><h1>数字图像处理.II</h1><h2 id="●VI图像编码">●VI图像编码</h2><p>●6.1概述<br>●6.2无损压缩编码<br>●6.3无损压缩编码<br>●6.4 限失真压缩编码</p><h2 id="●VII彩色图像处理">●VII彩色图像处理</h2><p>●7.1彩色图形的基本概念<br>●7.2彩色模型<br>●7.3伪彩色增强处理<br>●7.4真彩色图像处理</p><h2 id="●VIII形态学图像处理">●VIII形态学图像处理</h2><p>●7.1预备知识<br>●7.2腐蚀和膨胀<br>●7.3开运算和闭运算<br>●7.4击中和击不中变换<br>●7.5一些基本形态学算法<br>●7.6灰度级形态学</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 游戏开发 </category>
          
          <category> 计算机图形学 </category>
          
          <category> 数字图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLIB </tag>
            
            <tag> 理论原理 </tag>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器简介</title>
      <link href="/HEXO/2025/09/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E7%95%A5%E4%BB%8B%E7%BB%8D/"/>
      <url>/HEXO/2025/09/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E7%95%A5%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>本文章为服务器的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</p><p>文档链接: <a href="https://www.mubu.com/doc/1GZsa8NZApL">服务器</a></p><p>【如果遇到密码，统一为：1230】</p><p>下面内容为文章目录，可以先预览后再决定是否详细查看文档</p><h4 id="一、基本概念"><strong>一、基本概念</strong></h4><p>1.1 服务器定义与分类<br>　1.1.1 服务器核心特性（高性能、高负载、远程部署）<br>　1.1.2 常见类型<br>　　1.1.2.1 ECS（弹性计算服务）<br>　　1.1.2.2 VPS（虚拟专用服务器）<br>　　1.1.2.3 虚拟主机（共享资源与限制）<br>1.2 服务器作用与场景<br>　1.2.1 核心功能（存储、计算、响应请求）<br>　1.2.2 国内外主机对比<br>　　1.2.2.1 备案要求（国内主机限制）<br>　　1.2.2.2 海外主机的优势与挑战</p><hr><h4 id="二、参数指标与配置"><strong>二、参数指标与配置</strong></h4><p>2.1 操作系统与支持环境<br>　2.1.1 主流操作系统（Linux、Windows）<br>　2.1.2 脚本语言支持（ASP、PHP、JSP、.NET）<br>2.2 硬件性能指标<br>　2.2.1 空间容量（存储文件大小限制）<br>　2.2.2 带宽与流量（最大下行速度与访问限流）<br>　2.2.3 并发量（同时请求处理能力）<br>　2.2.4 CPU 与内存（计算能力与运行效率）<br>2.3 网络与安全配置<br>　2.3.1 IP 类型<br>　　2.3.1.1 独立 IP（优势：泛域名绑定、直接访问）<br>　　2.3.1.2 共享 IP（成本低、风险高）<br>　　2.3.1.3 IP 类型对比（价格、安全性、SEO 影响）<br>　2.3.2 扩展性能（伪静态支持、字体兼容性）<br>　2.3.3 安全机制（防火墙、数据备份策略）<br>2.4 CDN 云加速<br>　2.4.1 原理与作用（节点分发、延迟优化）<br>　2.4.2 适用场景（站点加速、直播点播）</p><hr><h4 id="三、服务器选购策略"><strong>三、服务器选购策略</strong></h4><p>3.1 选购步骤与考量<br>　3.1.1 按程序选择（支持语言与运行环境）<br>　3.1.2 按受众选择（网络覆盖与地理位置）<br>　3.1.3 按内容选择（容量需求与扩展性）<br>3.2 质量与性能评估<br>　3.2.1 核心指标（CPU、内存、带宽）<br>　3.2.2 性价比分析（成本 vs 性能）<br>3.3 安全与品牌选择<br>　3.3.1 安全措施（防火墙、备份方案）<br>　3.3.2 主流服务商对比（ECS 与虚拟主机）</p><hr><h4 id="四、技术对比与决策"><strong>四、技术对比与决策</strong></h4><p>4.1 操作系统选择<br>　4.1.1 Windows vs Linux<br>　　4.1.1.1 适用场景（ASP/.NET vs PHP/JSP）<br>　　4.1.1.2 安全性与稳定性对比<br>4.2 服务器类型对比<br>　4.2.1 虚拟主机 vs 独立服务器<br>　　4.2.1.1 成本与维护（中小企业 vs 大企业）<br>　　4.2.1.2 性能与灵活性（ECS 优势）<br>4.3 带宽配置对比<br>　4.3.1 共享带宽 vs 独享带宽<br>　　4.3.1.1 实际效果（速度与稳定性）<br>　　4.3.1.2 适用场景（企业站 vs 高并发应用）</p><hr><h4 id="五、工具与操作指南"><strong>五、工具与操作指南</strong></h4><p>5.1 FTP 工具使用<br>　5.1.1 FTP 协议基础（主动模式 vs 被动模式）<br>　5.1.2 常见工具<br>　　5.1.2.1 FileZilla（免费跨平台）<br>　　5.1.2.2 FlashFXP（高级功能）<br>　5.1.3 服务器连接步骤（地址、账号、端口）<br>5.2 服务器管理<br>　5.2.1 Windows 远程桌面（RDP 连接）<br>　5.2.2 Linux 终端工具（Xshell/Putty）<br>5.3 防火墙配置<br>　5.3.1 Windows 防火墙设置（端口开放规则）<br>　5.3.2 Linux 防火墙管理（iptables 命令）<br>5.4 数据备份与恢复<br>　5.4.1 备份方法（主机商、PHPMyAdmin、Shell 脚本）<br>　5.4.2 自动备份脚本示例<br>5.5 网站备案流程<br>　5.5.1 国内备案步骤（平台引导与材料准备）</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 后端开发 </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 知识拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/HEXO/2025/09/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/HEXO/2025/09/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>本文章为正则表达式的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</p><p>文档链接: <a href="https://www.mubu.com/doc/M3NyqXh0FL">正则表达式</a></p><p>【如果遇到密码，统一为：1230】</p><p>下面内容为文章目录，可以先预览后再决定是否详细查看文档</p><p>入门基础</p><p>元字符</p><p>字符转义</p><p>重复</p><p>字符类</p><p>分枝条件</p><p>分组</p><p>反义</p><p>后向引用</p><p>零宽断言</p><p>负向零宽断言</p><p>贪婪与懒惰</p><p>处理选项</p><p>平衡组/递归匹配</p><p><a href="https://deerchao.cn/tutorials/regex/regex.htm#testing">学习来源网站</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 语法语言 </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机图形学MFC基础</title>
      <link href="/HEXO/2025/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E3%80%90MFC%E3%80%91%E5%9F%BA%E7%A1%80/"/>
      <url>/HEXO/2025/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E3%80%90MFC%E3%80%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>本文章为计算机图形学的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</p><p>文档链接: <a href="https://www.mubu.com/doc/9Tv6lHffsL">计算机图形学MFC基础</a> 密码: 1230</p><p>【如果遇到密码，统一为：1230】</p><p>下面内容为文章目录，可以先预览后再决定是否详细查看</p><p>​</p><h4 id="第一章-导论"><strong>第一章 导论</strong></h4><p>1.1 计算机图形学定义<br>　1.1.1 学科研究范畴<br>　1.1.2 图形生成与处理流程<br>1.2 图形分类<br>　1.2.1 基于线条的几何图形<br>　1.2.2 基于材质/纹理的真实感图形<br>1.3 图形表示方法<br>　1.3.1 参数法（数学模型与参数描述）<br>　1.3.2 点阵法（像素点阵与图像表示）<br>　1.3.3 参数法到点阵法的转换</p><hr><h4 id="第二章-MFC绘图基础"><strong>第二章 MFC绘图基础</strong></h4><p>2.1 MFC上机操作<br>　2.1.1 MFC类库概述<br>　2.1.2 文档/视图结构<br>　　- CTestDoc类（数据存储）<br>　　- CTestView类（图形显示）<br>　2.1.3 OnDraw()函数与绘图流程<br>　2.1.4 纯虚函数与抽象类<br>2.2 MFC基本绘图函数<br>　2.2.1 CDC类结构<br>　　- CClientDC（客户区绘图）<br>　　- CWindowDC（全窗口绘图）<br>　　- CMetaFileDC（图元文件设备上下文）<br>　2.2.2 映射模式<br>　　- 逻辑坐标与设备坐标<br>　　- 映射模式函数（SetMapMode、SetWindowExt等）<br>　2.2.3 GDI对象使用<br>　　- 画笔与画刷创建（CPen、CBrush）<br>　　- 路径层操作（BeginPath、EndPath）<br>　2.2.4 基本图形绘制函数<br>　　- 直线、矩形、椭圆、多边形<br>2.3 双缓冲机制<br>　2.3.1 定时器设置与动画实现<br>　2.3.2 内存设备上下文与位图操作<br>2.4 MFC绘图方法<br>　2.4.1 OnDraw()自动绘制<br>　2.4.2 菜单驱动绘图（ID_GRAPH映射）<br>　2.4.3 自定义函数绘制（DrawObject）</p><hr><h4 id="第三章-基本图形的扫描转换"><strong>第三章 基本图形的扫描转换</strong></h4><p>3.0 光栅化与扫描转换简介<br>3.1 直线的扫描转换<br>　3.1.1 DDA算法（数值微分法）<br>　3.1.2 Bresenham算法<br>　3.1.3 中点Bresenham算法<br>3.2 圆的扫描转换<br>　3.2.1 中点Bresenham画圆算法<br>　3.2.2 八分圆对称性原理<br>3.3 椭圆的扫描转换<br>　3.3.1 四分椭圆对称性<br>　3.3.2 上半部分与下半部分递推公式<br>3.4 反走样技术<br>　3.4.1 走样现象与分类<br>　3.4.2 加权区域采样原理<br>3.5 Wu反走样算法<br>　3.5.1 距离误差项构造<br>　3.5.2 多像素亮度调节实现</p><hr><h4 id="第四章-多边形填充"><strong>第四章 多边形填充</strong></h4><p>4.1 填充算法概述<br>4.2 有效边表填充算法<br>　4.2.1 有效边定义与桶表结构<br>　4.2.2 边表（ET）与活动边表（AET）<br>4.3 扫描线填充算法<br>4.4 区域填充算法<br>　4.4.1 四邻接与八邻接连通性<br>　4.4.2 种子填充算法（堆栈扩散）</p><hr><h4 id="第五章-二维变换与裁剪"><strong>第五章 二维变换与裁剪</strong></h4><p>5.1 图形几何变换基础<br>　5.1.1 仿射变换与齐次坐标<br>　5.1.2 物体变换与坐标变换<br>5.2 基本几何变换<br>　5.2.1 平移、比例、旋转变换<br>　5.2.2 反射与错切变换<br>5.3 二维复合变换<br>　5.3.1 参考点变换（平移-变换-逆平移）<br>5.4 直线裁剪算法<br>　5.4.1 Cohen-Sutherland算法（区域编码）<br>　5.4.2 中点分割算法<br>　5.4.3 梁友栋-Barsky算法（参数化裁剪）<br>5.5 多边形裁剪<br>　5.5.1 Sutherland-Hodgman算法</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 游戏开发 </category>
          
          <category> 计算机图形学 </category>
          
          <category> MFC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> 计算机图形学 </tag>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交互设计与移动端【Android】开发基础</title>
      <link href="/HEXO/2025/09/06/%E3%80%90Android%E3%80%91%E5%BC%80%E5%8F%91/"/>
      <url>/HEXO/2025/09/06/%E3%80%90Android%E3%80%91%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<ol><li><strong>目录</strong></li></ol><p>[第1章 Android基础入门](#第1章 Android基础入门)</p><p>[第2章 Android常见界面布局](#第2章 Android常见界面布局)</p><p>[第3章 Android常见界面控件](#第3章 Android常见界面控件)</p><p>[第4章 程序活动单元Activity](#第4章 程序活动单元Activity)</p><p>[第5章 数据存储](#第5章 数据存储)</p><p>[第6章 内容提供者](#第6章 内容提供者)</p><p>[第7章 广播机制](#第7章 广播机制)</p><p>[第8章 服务](#第8章 服务)</p><p>[第9章 网络编程](#第9章 网络编程)</p><p>[第10章 图形图像处理](#第10章 图形图像处理)</p><p>[第11章 多媒体应用开发](#第11章 多媒体应用开发)</p><p><a href="#Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6">Android四大组件</a></p><hr><p>前言：<br>*<strong>本文章为Android移动端的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：*</strong></p><p>文档链接: <a href="https://www.mubu.com/doc/18Xn9WRShlL">Android思维导图</a> 密码: 1230</p><p>【如果遇到密码，统一为：<strong>1230</strong>】</p><p>下面内容为文章目录，可以<strong>先预览</strong>后再决定是否下载文档</p><h1>第1章 Android基础入门</h1><ul><li><p>Android简介</p></li><li><p>Android开发环境搭建</p></li><li><p>开发第一个Android程序</p></li><li><p>Android程序结构</p></li><li><p>资源的管理与使用</p></li><li><p>程序调试</p></li></ul><ol start="2"><li><h1>第2章 Android常见界面布局</h1><ul><li>· 2. 界面布局编写方式</li><li>· 3. 界面布局的通用属性</li><li>· 4. 线性布局：以水平或垂直方向排列</li><li>· 5. 相对布局：通过相对（其他元素）定位指定子控件的位置。</li><li>· 6. 表格布局：表格形式排列</li><li>· 7. 帧布局：开辟空白区域，帧里的控件（层）叠加</li></ul></li><li><h1>第3章 Android常见界面控件</h1><ul><li>3.1 简单控件的使用</li><li>3.2 列表控件的使用</li><li>3.3 自定义View</li></ul></li><li><h1>第4章 程序活动单元Activity</h1><ul><li><ol><li>Activity的生命周期</li></ol></li><li><ol start="2"><li>Activity的创建、配置、启动和关闭</li></ol></li><li><ol start="3"><li>Intent与IntentFilter</li></ol></li><li><ol start="4"><li>Activity之间的跳转</li></ol></li><li><ol start="5"><li>任务栈和启动模式</li></ol></li><li><ol start="6"><li>使用Fragment（碎片）</li></ol></li></ul></li><li><h1>第5章 数据存储</h1><ul><li>5.1 数据存储方式</li><li>5.2 文件存储</li><li>5.3 SharedPreferences存储<br>是Android平台上一个轻量级的存储类</li><li>5.4 SQLite数据库存储<br>SQLite是Android自带的一个轻量级的数据库</li></ul></li><li><h1>第6章 内容提供者</h1><ul><li>内容提供者概述</li><li>创建内容提供者</li><li>访问其他应用程序</li><li>内容观察者</li></ul></li><li><h1>第7章 广播机制</h1><ul><li>广播机制的概述</li><li>广播接收者</li></ul></li><li><h1>第8章 服务</h1><ul><li>8.1 服务的概述</li><li>服务的使用</li></ul></li><li><h1>第9章 网络编程</h1><ul><li>9.1 通过HTTP访问网络</li><li>9.2 使用WebView进行网络开发</li><li>9.3 JSON数据解析</li><li>9.4 Handler消息机制</li></ul></li><li><h1>第10章 图形图像处理</h1><ul><li>10.1 常用的绘图类</li><li>10.2 为图像添加特效</li><li>10.3 动画</li></ul></li><li><h1>第11章 多媒体应用开发</h1><ul><li>音频播放</li><li>视频播放</li></ul></li><li><h1>Android四大组件</h1><ul><li>Activity：作为用户界面的基本单元，负责与用户进行交互。每个Activity都有一个生命周期，可以通过重写生命周期方法来控制其行为。</li><li>Service：用于在后台执行长时间运行的操作，如网络请求、文件I/O等。Service没有用户界面，但可以在后台持续运行，不受用户交互的影响。</li><li>BroadcastReceiver：用于接收来自系统或其他应用程序的广播消息，如电话状态变化、网络状态变化等。BroadcastReceiver可以实现应用与系统的无缝互动，响应各种系统广播事件。</li><li>ContentProvider：用于实现不同应用程序间的数据共享。它提供了一种标准化的接口，允许应用程序访问和操作共享的数据集合，例如数据库、文件或网络资源。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 语法语言 </category>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> Android开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JAVA】基础</title>
      <link href="/HEXO/2025/09/06/%E3%80%90JAVA%E3%80%91%E5%9F%BA%E7%A1%80/"/>
      <url>/HEXO/2025/09/06/%E3%80%90JAVA%E3%80%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>本文章为java的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</p><p>文档链接: <a href="https://www.mubu.com/doc/65Nbs_WRvYL">JAVA基础</a> 密码: 1230</p><p>【如果遇到密码，统一为：1230】</p><p>下面内容为文章目录，可以先预览后再决定是否详细查看文档</p><hr><h1><strong>一、简介</strong></h1><p>1.1 Java 程序组成<br>　1.1.1 对象、类、方法、实例变量<br>1.2 开发环境配置<br>1.3 Java 主要特性<br>　1.3.1 简单性（语法简化与内存管理）<br>　1.3.2 面向对象（单继承与接口多继承）<br>　1.3.3 分布式（网络编程与 RMI 机制）<br>　1.3.4 健壮性（强类型与异常处理）<br>　1.3.5 安全性（类加载与安全管理）<br>　1.3.6 跨平台性（字节码与 JVM）<br>　1.3.7 高性能（JIT 编译优化）<br>　1.3.8 多线程（线程创建与同步机制）<br>　1.3.9 动态性（动态类加载与反射）</p><hr><h1><strong>二、基础语法</strong></h1><p>2.1 注释与文档<br>　2.1.1 单行注释与多行注释<br>　2.1.2 文档注释（JavaDoc 标签与生成）<br>2.2 对象与类<br>　2.2.1 类定义与对象实例化<br>　2.2.2 源文件声明规则（public 类与包结构）<br>　2.2.3 继承、封装、多态与抽象<br>2.3 基本数据类型<br>　2.3.1 内置数据类型（byte、int、double 等）<br>　2.3.2 引用类型（对象、数组与接口）<br>　2.3.3 常量定义与类型转换（自动与强制）<br>2.4 变量类型<br>　2.4.1 局部变量（作用域与生命周期）<br>　2.4.2 类变量（static 关键字与线程安全）<br>　2.4.3 成员变量（默认值与访问控制）<br>2.5 运算符与流程控制<br>　2.5.1 算术、关系、逻辑运算符<br>　2.5.2 条件运算符（<code>?:</code>）与 <code>instanceof</code><br>　2.5.3 循环结构（for、while、增强 for）<br>　2.5.4 条件语句（if-else、switch-case）<br>2.6 字符串与数组<br>　2.6.1 String 类（不可变性与常用方法）<br>　2.6.2 StringBuffer 与 StringBuilder（可变字符串）<br>　2.6.3 数组定义与操作（Arrays 工具类）<br>2.7 日期与时间<br>　2.7.1 Date 类与 Calendar 类（日期操作）<br>　2.7.2 SimpleDateFormat（日期格式化与解析）<br>　2.7.3 休眠与线程控制（sleep() 方法）</p><hr><h1><strong>三、面向对象编程</strong></h1><p>3.1 类与对象<br>　3.1.1 构造方法与 <code>this</code> 关键字<br>　3.1.2 方法重载（Overload）与重写（Override）<br>3.2 继承与多态<br>　3.2.1 继承类型与特性（单继承与多态实现）<br>　3.2.2 抽象类与接口（定义与实现）<br>　3.2.3 final、super 与访问修饰符<br>3.3 封装与接口<br>　3.3.1 封装实现（私有属性与公共方法）<br>　3.3.2 接口定义与多继承（implements 关键字）<br>　3.3.3 接口与抽象类的区别<br>3.4 枚举与包<br>　3.4.1 枚举类（enum 关键字与常用方法）<br>　3.4.2 包管理（package 与 import 语句）<br>　3.4.3 CLASSPATH 配置与目录结构<br>3.5 反射机制<br>　3.5.1 Class 对象获取与操作（字段、方法、构造器）<br>　3.5.2 动态创建对象与调用方法</p><hr><h1><strong>四、高级特性</strong></h1><p>4.1 异常处理<br>　4.1.1 异常类型（检查性异常与运行时异常）<br>　4.1.2 try-catch-finally 与 try-with-resources<br>　4.1.3 自定义异常与异常链<br>4.2 泛型与集合框架<br>　4.2.1 泛型类与泛型方法（类型参数化）<br>　4.2.2 集合接口（List、Set、Map）<br>　4.2.3 ArrayList、LinkedList 与 HashMap<br>4.3 多线程编程<br>　4.3.1 线程创建（Thread 与 Runnable）<br>　4.3.2 线程同步（synchronized 与 Lock）<br>　4.3.3 线程池与并发工具类<br>4.4 输入输出与文件操作<br>　4.4.1 流操作（字节流与字符流）<br>　4.4.2 文件读写与目录管理<br>　4.4.3 序列化与反序列化<br>4.5 网络编程<br>　4.5.1 Socket 通信（TCP/IP 协议）<br>　4.5.2 URL 处理与 HTTP 请求</p><hr><h1><strong>五、扩展与工具</strong></h1><p>5.1 正则表达式<br>　5.1.1 Pattern 与 Matcher 类（模式匹配）<br>　5.1.2 正则语法（转义字符与分组）<br>5.2 数据库连接<br>　5.2.1 JDBC 驱动与连接池<br>　5.2.2 SQL 执行与事务管理<br>5.3 新特性<br>　5.3.1 Java 8（Lambda 表达式与 Stream API）<br>　5.3.2 Java 9（模块化系统与接口私有方法）</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 语法语言 </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础</title>
      <link href="/HEXO/2025/09/06/%E3%80%90Linux%E3%80%91%E5%9F%BA%E7%A1%80/"/>
      <url>/HEXO/2025/09/06/%E3%80%90Linux%E3%80%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>本文章为Linux的基础知识大纲，是本人学习后的知识总结，如有遗漏不足，欢迎指正，具体内容请移步相关文档及链接：</p><p>文档链接:  <a href="https://www.mubu.com/doc/5qdqYmlp7cL">Linux</a>  密码: 1230</p><p>【如果遇到密码，统一为：1230】</p><p>下面内容为文章目录，可以先预览后再决定是否详细查看文档</p><hr><h4 id="一、简介"><strong>一、简介</strong></h4><p>1.1 Linux发行版概述<br>　1.1.1 主流发行版（Debian、Ubuntu、CentOS）<br>　1.1.2 服务器与桌面版应用场景</p><hr><h4 id="二、系统操作"><strong>二、系统操作</strong></h4><p>2.1 系统启动与关闭<br>　2.1.1 系统启动过程<br>　　2.1.1.1 内核引导（BIOS自检与内核加载）<br>　　2.1.1.2 运行 <code>init</code> 进程（<code>/etc/inittab</code> 配置）<br>　　2.1.1.3 运行级别（Runlevel）<br>　　　- 0级：停机<br>　　　- 1级：单用户维护模式<br>　　　- 3级：多用户命令行模式<br>　　　- 5级：图形界面模式<br>　　2.1.1.4 系统初始化（<code>/etc/rc.d/rc.sysinit</code> 脚本）<br>　　2.1.1.5 用户登录方式（命令行、SSH、图形界面）<br>　2.1.2 正确关机流程<br>　　2.1.2.1 <code>sync</code> 命令（内存数据写入磁盘）<br>　　2.1.2.2 <code>shutdown</code> 命令（关机、重启、停止）</p><p>2.2 系统目录结构<br>　2.2.1 核心目录功能<br>　　2.2.1.1 <code>/bin</code>（二进制可执行文件）<br>　　2.2.1.2 <code>/boot</code>（启动核心文件）<br>　　2.2.1.3 <code>/etc</code>（系统配置文件）<br>　　2.2.1.4 <code>/home</code>（用户主目录）<br>　　2.2.1.5 <code>/proc</code>（进程与内核信息虚拟目录）<br>　　2.2.1.6 <code>/var</code>（动态数据存储，如日志）<br>　2.2.2 特殊目录说明<br>　　2.2.2.1 <code>/dev</code>（设备文件）<br>　　2.2.2.2 <code>/mnt</code> 与 <code>/media</code>（临时挂载点）<br>　　2.2.2.3 <code>/tmp</code>（临时文件存储）</p><p>2.3 用户与权限管理<br>　2.3.1 用户账号操作<br>　　2.3.1.1 <code>useradd</code>（添加用户）<br>　　2.3.1.2 <code>userdel</code>（删除用户）<br>　　2.3.1.3 <code>passwd</code>（密码管理）<br>　2.3.2 用户组管理<br>　　2.3.2.1 <code>groupadd</code>（创建组）<br>　　2.3.2.2 <code>newgrp</code>（切换用户组）<br>　2.3.3 系统配置文件<br>　　2.3.3.1 <code>/etc/passwd</code>（用户信息）<br>　　2.3.3.2 <code>/etc/shadow</code>（密码加密存储）<br>　　2.3.3.3 <code>/etc/group</code>（用户组信息）</p><p>2.4 磁盘管理<br>　2.4.1 磁盘操作命令<br>　　2.4.1.1 <code>df</code>（查看磁盘使用量）<br>　　2.4.1.2 <code>du</code>（检查目录空间）<br>　　2.4.1.3 <code>fdisk</code>（磁盘分区工具）<br>　2.4.2 文件系统操作<br>　　2.4.2.1 <code>mkfs</code>（格式化磁盘）<br>　　2.4.2.2 <code>fsck</code>（文件系统检查）<br>　　2.4.2.3 <code>mount</code> 与 <code>umount</code>（挂载与卸载）</p><hr><h4 id="三、命令"><strong>三、命令</strong></h4><p>3.1 常用基础命令<br>　3.1.1 文件与目录操作<br>　　3.1.1.1 <code>ls</code>（查看目录内容）<br>　　3.1.1.2 <code>cp</code>/<code>mv</code>/<code>rm</code>（复制、移动、删除）<br>　　3.1.1.3 <code>find</code>（文件搜索）<br>　3.1.2 文本处理命令<br>　　3.1.2.1 <code>cat</code>/<code>head</code>/<code>tail</code>（查看文件内容）<br>　　3.1.2.2 <code>grep</code>（文本过滤）</p><p>3.2 包管理工具<br>　3.2.1 YUM（CentOS）<br>　　3.2.1.1 安装与卸载软件包<br>　　3.2.1.2 依赖关系自动处理<br>　3.2.2 APT（Ubuntu/Debian）<br>　　3.2.2.1 <code>sudo apt install</code>（安装软件）<br>　　3.2.2.2 支持Tab补全功能</p><p>3.3 编辑器操作<br>　3.3.1 <code>vi/vim</code> 模式<br>　　3.3.1.1 命令模式（复制、粘贴、撤销）<br>　　3.3.1.2 输入模式（文本编辑）<br>　　3.3.1.3 底线命令模式（保存、退出）</p><hr><h4 id="四、Shell编程"><strong>四、Shell编程</strong></h4><p>4.1 Shell基础<br>　4.1.1 变量定义与使用<br>　　4.1.1.1 变量命名规则<br>　　4.1.1.2 字符串与数组操作<br>　4.1.2 参数传递<br>　　4.1.2.1 <code>$0</code>/<code>$1</code>/<code>$@</code>（脚本参数）<br>　　4.1.2.2 <code>$?</code>（命令退出状态）</p><p>4.2 流程控制<br>　4.2.1 条件语句<br>　　4.2.1.1 <code>if-else</code>（数值与字符串比较）<br>　　4.2.1.2 <code>case</code>（多分支选择）<br>　4.2.2 循环语句<br>　　4.2.2.1 <code>for</code> 循环（列表遍历）<br>　　4.2.2.2 <code>while</code> 与 <code>until</code>（条件循环）</p><p>4.3 函数与脚本<br>　4.3.1 函数定义与调用<br>　　4.3.1.1 返回值处理（<code>return</code> 与 <code>$?</code>）<br>　　4.3.1.2 参数传递（<code>$1</code>/<code>$2</code>）<br>　4.3.2 输入输出重定向<br>　　4.3.2.1 <code>&gt;</code>/<code>&gt;&gt;</code>（输出重定向）<br>　　4.3.2.2 <code>2&gt;&amp;1</code>（合并标准输出与错误）</p><hr><h4 id="五、参考手册"><strong>五、参考手册</strong></h4><p>5.1 常用资源链接<br>　5.1.1 Linux命令大全<br>　5.1.2 Nginx安装配置<br>　5.1.3 MySQL安装配置</p><hr><h4 id="六、拓展"><strong>六、拓展</strong></h4><p>6.1 Docker基础<br>　6.1.1 容器与镜像概念<br>　　6.1.1.1 镜像（预配置环境模板）<br>　　6.1.1.2 容器（运行实例）<br>　6.1.2 基本命令<br>　　6.1.2.1 <code>docker pull</code>（拉取镜像）<br>　　6.1.2.2 <code>docker run</code>（启动容器）</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 语法语言 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言 </tag>
            
            <tag> Linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/HEXO/2025/08/29/test/"/>
      <url>/HEXO/2025/08/29/test/</url>
      
        <content type="html"><![CDATA[<h1>测试</h1><p>看起来这正常</p><p>注意这个图片插入的语法</p><p>asserts</p><p>test</p><p>3</p><p>.md<br><img src="test/1756976230230.png" alt="1756976230230"></p><p>test4</p><p>test 5  Typora传到busays</p><p><img src="https://bu.dusays.com/2025/09/07/68bc6992bbd7f.png" alt="image-20250907010414406"></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="/HEXO/aboutme/index.html"/>
      <url>/HEXO/aboutme/index.html</url>
      
        <content type="html"><![CDATA[<h1>》为什么叫抚七</h1><p>—抚字辈，排行七</p><h1>》你是？</h1><p>一个迷茫的数媒人，媒体和代码都不擅长呢……</p><h1>》爱好？</h1><p>看看电影，跑跑步<br>大部分时间宅，看动漫，打游戏（菜</p><h1>》目标？</h1><p>main：后端开发 —   C++ -》STL - 客户端开发 | 服务器开发</p><p>branch：软件测试 —  功能测试   -》 接口测试 -》 性能测试 -》自动化测试 -》自动化测试开发 -》自动化测试平台</p><p>branch：Ai  —  AI应用 -》 机器学习 -》 神经网络</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/HEXO/categories/index.html"/>
      <url>/HEXO/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>公告栏</title>
      <link href="/HEXO/contact/index.html"/>
      <url>/HEXO/contact/index.html</url>
      
        <content type="html"><![CDATA[<h1>该网站主要为个人学习和展示qwq</h1><h1>项目展示视频一般放在Bilibili</h1><p>点击右侧→个人名片的b站图标即可跳转</p><h1>有趣的web</h1><p>[若侵权，请通知删除]</p><p><strong>由于样式冲突，建议网页端全屏模式并隐藏侧边栏</strong><br>F11，隐藏侧边栏在右下角悬浮齿轮里的双向箭头里面</p><p><a href="../html/2048.html">2048</a><br><a href="../html/%E5%88%AB%E7%82%B9%E7%8C%AB%E7%8C%AB.html">别点猫猫</a><br><a href="../html/%E5%88%AB%E6%8D%85%E9%A9%AC%E8%9C%82%E7%AA%9D.html">别捅马蜂窝</a><br><a href="../html/%E9%9C%93%E8%99%B9%E7%81%AF%E6%95%B0%E5%AD%97%E6%97%B6%E9%92%9F.html">霓虹灯数字时钟</a><br><a href="../html/%E9%BC%A0%E6%A0%87%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88.html">鼠标粒子特效</a><br><a href="../html/%E5%A4%AA%E9%98%B3%E7%B3%BB.html">太阳系</a><br><a href="../html/%E4%BA%95%E5%AD%97%E6%A3%8B.html">井字棋</a><br><a href="../html/Rlove.html">Rlove</a><br><a href="../html/%E6%91%86%E9%92%9F.html">摆钟</a><br><a href="../html/clock.html">clock</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/2048.html"/>
      <url>/HEXO/html/2048.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>实现一个2048游戏</title>    <style>      html,body{margin:0;padding:0;background:#faf8ef;color:#776e65;font-family:"Clear Sans","Helvetica Neue",Arial,sans-serif;font-size:18px;}body{margin:20px 0;}.heading:after{content:"";display:block;clear:both;}h1.title{font-size:80px;font-weight:bold;margin:0;display:block;float:left;}@-webkit-keyframes move-up{0%{top:25px;opacity:1;}100%{top:-50px;opacity:0;}}@-moz-keyframes move-up{0%{top:25px;opacity:1;}100%{top:-50px;opacity:0;}}@keyframes move-up{0%{top:25px;opacity:1;}100%{top:-50px;opacity:0;}}.score-container{position:relative;float:right;background:#bbada0;padding:15px 25px;font-size:25px;height:25px;line-height:47px;font-weight:bold;border-radius:3px;color:white;margin-top:8px;}.score-container:after{position:absolute;width:100%;top:10px;left:0;content:"Score";text-transform:uppercase;font-size:13px;line-height:13px;text-align:center;color:#eee4da;}.score-container .score-addition{position:absolute;right:30px;color:red;font-size:25px;line-height:25px;font-weight:bold;color:rgba(119,110,101,0.9);z-index:100;-webkit-animation:move-up 600ms ease-in;-moz-animation:move-up 600ms ease-in;-webkit-animation-fill-mode:both;-moz-animation-fill-mode:both;}p{margin-top:0;margin-bottom:10px;line-height:1.65;}a{color:#776e65;font-weight:bold;text-decoration:underline;cursor:pointer;}strong.important{text-transform:uppercase;}hr{border:none;border-bottom:1px solid #d8d4d0;margin-top:20px;margin-bottom:30px;}.container{width:500px;margin:0 auto;}@-webkit-keyframes fade-in{0%{opacity:0;}100%{opacity:1;}}@-moz-keyframes fade-in{0%{opacity:0;}100%{opacity:1;}}@keyframes fade-in{0%{opacity:0;}100%{opacity:1;}}.game-container{margin-top:10px;position:relative;padding:15px;cursor:default;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;background:#bbada0;border-radius:6px;width:500px;height:500px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;}.game-container .game-message{display:none;position:absolute;top:0;right:0;bottom:0;left:0;background:rgba(238,228,218,0.5);z-index:100;text-align:center;-webkit-animation:fade-in 800ms ease 1200ms;-moz-animation:fade-in 800ms ease 1200ms;-webkit-animation-fill-mode:both;-moz-animation-fill-mode:both;}.game-container .game-message p{font-size:60px;font-weight:bold;height:60px;line-height:60px;margin-top:222px;}.game-container .game-message .lower{display:block;margin-top:59px;}.game-container .game-message a{display:inline-block;background:#8f7a66;border-radius:3px;padding:0 20px;text-decoration:none;color:#f9f6f2;height:40px;line-height:42px;margin-left:9px;}.game-container .game-message.game-won{background:rgba(237,194,46,0.5);color:#f9f6f2;}.game-container .game-message.game-won,.game-container .game-message.game-over{display:block;}.grid-container{position:absolute;z-index:1;}.grid-row{margin-bottom:15px;}.grid-row:last-child{margin-bottom:0;}.grid-row:after{content:"";display:block;clear:both;}.grid-cell{width:106.25px;height:106.25px;margin-right:15px;float:left;border-radius:3px;background:rgba(238,228,218,0.35);}.grid-cell:last-child{margin-right:0;}.tile-container{position:absolute;z-index:2;}.tile{width:106.25px;height:106.25px;line-height:116.25px;}.tile.tile-position-1-1{position:absolute;left:0px;top:0px;}.tile.tile-position-1-2{position:absolute;left:0px;top:121px;}.tile.tile-position-1-3{position:absolute;left:0px;top:243px;}.tile.tile-position-1-4{position:absolute;left:0px;top:364px;}.tile.tile-position-2-1{position:absolute;left:121px;top:0px;}.tile.tile-position-2-2{position:absolute;left:121px;top:121px;}.tile.tile-position-2-3{position:absolute;left:121px;top:243px;}.tile.tile-position-2-4{position:absolute;left:121px;top:364px;}.tile.tile-position-3-1{position:absolute;left:243px;top:0px;}.tile.tile-position-3-2{position:absolute;left:243px;top:121px;}.tile.tile-position-3-3{position:absolute;left:243px;top:243px;}.tile.tile-position-3-4{position:absolute;left:243px;top:364px;}.tile.tile-position-4-1{position:absolute;left:364px;top:0px;}.tile.tile-position-4-2{position:absolute;left:364px;top:121px;}.tile.tile-position-4-3{position:absolute;left:364px;top:243px;}.tile.tile-position-4-4{position:absolute;left:364px;top:364px;}.tile{border-radius:3px;background:#eee4da;text-align:center;font-weight:bold;z-index:10;font-size:55px;-webkit-transition:100ms ease-in-out;-moz-transition:100ms ease-in-out;-webkit-transition-property:top,left;-moz-transition-property:top,left;}.tile.tile-2{background:#eee4da;box-shadow:0 0 30px 10px rgba(243,215,116,0),inset 0 0 0 1px rgba(255,255,255,0);}.tile.tile-4{background:#ede0c8;box-shadow:0 0 30px 10px rgba(243,215,116,0),inset 0 0 0 1px rgba(255,255,255,0);}.tile.tile-8{color:#f9f6f2;background:#f2b179;}.tile.tile-16{color:#f9f6f2;background:#f59563;}.tile.tile-32{color:#f9f6f2;background:#f67c5f;}.tile.tile-64{color:#f9f6f2;background:#f65e3b;}.tile.tile-128{color:#f9f6f2;background:#edcf72;box-shadow:0 0 30px 10px rgba(243,215,116,0.2381),inset 0 0 0 1px rgba(255,255,255,0.14286);font-size:45px;}@media screen and (max-width:480px){.tile.tile-128{font-size:25px;}}.tile.tile-256{color:#f9f6f2;background:#edcc61;box-shadow:0 0 30px 10px rgba(243,215,116,0.31746),inset 0 0 0 1px rgba(255,255,255,0.19048);font-size:45px;}@media screen and (max-width:480px){.tile.tile-256{font-size:25px;}}.tile.tile-512{color:#f9f6f2;background:#edc850;box-shadow:0 0 30px 10px rgba(243,215,116,0.39683),inset 0 0 0 1px rgba(255,255,255,0.2381);font-size:45px;}@media screen and (max-width:480px){.tile.tile-512{font-size:25px;}}.tile.tile-1024{color:#f9f6f2;background:#edc53f;box-shadow:0 0 30px 10px rgba(243,215,116,0.47619),inset 0 0 0 1px rgba(255,255,255,0.28571);font-size:35px;}@media screen and (max-width:480px){.tile.tile-1024{font-size:15px;}}.tile.tile-2048{color:#f9f6f2;background:#edc22e;box-shadow:0 0 30px 10px rgba(243,215,116,0.55556),inset 0 0 0 1px rgba(255,255,255,0.33333);font-size:35px;}@media screen and (max-width:480px){.tile.tile-2048{font-size:15px;}}@-webkit-keyframes appear{0%{opacity:0;-webkit-transform:scale(0);-moz-transform:scale(0);}100%{opacity:1;-webkit-transform:scale(1);-moz-transform:scale(1);}}@-moz-keyframes appear{0%{opacity:0;-webkit-transform:scale(0);-moz-transform:scale(0);}100%{opacity:1;-webkit-transform:scale(1);-moz-transform:scale(1);}}@keyframes appear{0%{opacity:0;-webkit-transform:scale(0);-moz-transform:scale(0);}100%{opacity:1;-webkit-transform:scale(1);-moz-transform:scale(1);}}.tile-new{-webkit-animation:appear 200ms ease 100ms;-moz-animation:appear 200ms ease 100ms;-webkit-animation-fill-mode:both;-moz-animation-fill-mode:both;}@-webkit-keyframes pop{0%{-webkit-transform:scale(0);-moz-transform:scale(0);}50%{-webkit-transform:scale(1.2);-moz-transform:scale(1.2);}100%{-webkit-transform:scale(1);-moz-transform:scale(1);}}@-moz-keyframes pop{0%{-webkit-transform:scale(0);-moz-transform:scale(0);}50%{-webkit-transform:scale(1.2);-moz-transform:scale(1.2);}100%{-webkit-transform:scale(1);-moz-transform:scale(1);}}@keyframes pop{0%{-webkit-transform:scale(0);-moz-transform:scale(0);}50%{-webkit-transform:scale(1.2);-moz-transform:scale(1.2);}100%{-webkit-transform:scale(1);-moz-transform:scale(1);}}.tile-merged{z-index:20;-webkit-animation:pop 200ms ease 100ms;-moz-animation:pop 200ms ease 100ms;-webkit-animation-fill-mode:both;-moz-animation-fill-mode:both;}.game-intro{margin-bottom:0;}.game-explanation{margin-top:50px;}@media screen and (max-width:480px){html,body{font-size:15px;}body{margin:20px 0;padding:0 20px;}h1.title{font-size:50px;}.container{width:280px;margin:0 auto;}.score-container{margin-top:0;}.heading{margin-bottom:10px;}.game-container{margin-top:40px;position:relative;padding:10px;cursor:default;-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;background:#bbada0;border-radius:6px;width:280px;height:280px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;}.game-container .game-message{display:none;position:absolute;top:0;right:0;bottom:0;left:0;background:rgba(238,228,218,0.5);z-index:100;text-align:center;-webkit-animation:fade-in 800ms ease 1200ms;-moz-animation:fade-in 800ms ease 1200ms;-webkit-animation-fill-mode:both;-moz-animation-fill-mode:both;}.game-container .game-message p{font-size:60px;font-weight:bold;height:60px;line-height:60px;margin-top:222px;}.game-container .game-message .lower{display:block;margin-top:59px;}.game-container .game-message a{display:inline-block;background:#8f7a66;border-radius:3px;padding:0 20px;text-decoration:none;color:#f9f6f2;height:40px;line-height:42px;margin-left:9px;}.game-container .game-message.game-won{background:rgba(237,194,46,0.5);color:#f9f6f2;}.game-container .game-message.game-won,.game-container .game-message.game-over{display:block;}.grid-container{position:absolute;z-index:1;}.grid-row{margin-bottom:10px;}.grid-row:last-child{margin-bottom:0;}.grid-row:after{content:"";display:block;clear:both;}.grid-cell{width:57.5px;height:57.5px;margin-right:10px;float:left;border-radius:3px;background:rgba(238,228,218,0.35);}.grid-cell:last-child{margin-right:0;}.tile-container{position:absolute;z-index:2;}.tile{width:57.5px;height:57.5px;line-height:67.5px;}.tile.tile-position-1-1{position:absolute;left:0px;top:0px;}.tile.tile-position-1-2{position:absolute;left:0px;top:68px;}.tile.tile-position-1-3{position:absolute;left:0px;top:135px;}.tile.tile-position-1-4{position:absolute;left:0px;top:203px;}.tile.tile-position-2-1{position:absolute;left:68px;top:0px;}.tile.tile-position-2-2{position:absolute;left:68px;top:68px;}.tile.tile-position-2-3{position:absolute;left:68px;top:135px;}.tile.tile-position-2-4{position:absolute;left:68px;top:203px;}.tile.tile-position-3-1{position:absolute;left:135px;top:0px;}.tile.tile-position-3-2{position:absolute;left:135px;top:68px;}.tile.tile-position-3-3{position:absolute;left:135px;top:135px;}.tile.tile-position-3-4{position:absolute;left:135px;top:203px;}.tile.tile-position-4-1{position:absolute;left:203px;top:0px;}.tile.tile-position-4-2{position:absolute;left:203px;top:68px;}.tile.tile-position-4-3{position:absolute;left:203px;top:135px;}.tile.tile-position-4-4{position:absolute;left:203px;top:203px;}.game-container{margin-top:20px;}.tile{font-size:35px;}.game-message p{font-size:30px !important;height:30px !important;line-height:30px !important;margin-top:90px !important;}.game-message .lower{margin-top:30px !important;}    </style>  </head>  <body>    <div class="container"><div class="heading"><h1 class="title">2048</h1><div class="score-container">0</div></div><div class="game-container"><div class="game-message"><p></p><div class="lower"><a class="retry-button">重玩</a></div></div><div class="grid-container"><div class="grid-row"><div class="grid-cell"></div><div class="grid-cell"></div><div class="grid-cell"></div><div class="grid-cell"></div></div><div class="grid-row"><div class="grid-cell"></div><div class="grid-cell"></div><div class="grid-cell"></div><div class="grid-cell"></div></div><div class="grid-row"><div class="grid-cell"></div><div class="grid-cell"></div><div class="grid-cell"></div><div class="grid-cell"></div></div><div class="grid-row"><div class="grid-cell"></div><div class="grid-cell"></div><div class="grid-cell"></div><div class="grid-cell"></div></div></div><div class="tile-container"></div></div><p class="game-explanation"><strong class="important">提示:</strong>按方向键或者触摸屏幕即可开玩</p><hr/></div>    <script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/1.0.6/hammer.min.js"></script>    <script>document.addEventListener('DOMContentLoaded',function(){window.requestAnimationFrame(function(){var manager=new GameManager(4,KeyboardInputManager,HTMLActuator)})});function GameManager(size,InputManager,Actuator){this.size=size;this.inputManager=new InputManager();this.actuator=new Actuator();this.startTiles=2;this.inputManager.on('move',this.move.bind(this));this.inputManager.on('restart',this.restart.bind(this));this.setup()}GameManager.prototype.restart=function(){this.actuator.restart();this.setup()};GameManager.prototype.setup=function(){this.grid=new Grid(this.size);this.score=0;this.over=false;this.won=false;this.addStartTiles();this.actuate()};GameManager.prototype.addStartTiles=function(){for(var i=0;i<this.startTiles;i++){this.addRandomTile()}};GameManager.prototype.addRandomTile=function(){if(this.grid.cellsAvailable()){var value=Math.random()<0.9?2:4;var tile=new Tile(this.grid.randomAvailableCell(),value);this.grid.insertTile(tile)}};GameManager.prototype.actuate=function(){this.actuator.actuate(this.grid,{score:this.score,over:this.over,won:this.won,})};GameManager.prototype.prepareTiles=function(){this.grid.eachCell(function(x,y,tile){if(tile){tile.mergedFrom=null;tile.savePosition()}})};GameManager.prototype.moveTile=function(tile,cell){this.grid.cells[tile.x][tile.y]=null;this.grid.cells[cell.x][cell.y]=tile;tile.updatePosition(cell)};GameManager.prototype.move=function(direction){var self=this;if(this.over||this.won)return;var cell,tile;var vector=this.getVector(direction);var traversals=this.buildTraversals(vector);var moved=false;this.prepareTiles();traversals.x.forEach(function(x){traversals.y.forEach(function(y){cell={x:x,y:y};tile=self.grid.cellContent(cell);if(tile){var positions=self.findFarthestPosition(cell,vector);var next=self.grid.cellContent(positions.next);if(next&&next.value===tile.value&&!next.mergedFrom){var merged=new Tile(positions.next,tile.value*2);merged.mergedFrom=[tile,next];self.grid.insertTile(merged);self.grid.removeTile(tile);tile.updatePosition(positions.next);self.score+=merged.value;if(merged.value===2048)self.won=true}else{self.moveTile(tile,positions.farthest)}if(!self.positionsEqual(cell,tile)){moved=true}}})});if(moved){this.addRandomTile();if(!this.movesAvailable()){this.over=true}this.actuate()}};GameManager.prototype.getVector=function(direction){var map={0:{x:0,y:-1},1:{x:1,y:0},2:{x:0,y:1},3:{x:-1,y:0},};return map[direction]};GameManager.prototype.buildTraversals=function(vector){var traversals={x:[],y:[]};for(var pos=0;pos<this.size;pos++){traversals.x.push(pos);traversals.y.push(pos)}if(vector.x===1)traversals.x=traversals.x.reverse();if(vector.y===1)traversals.y=traversals.y.reverse();return traversals};GameManager.prototype.findFarthestPosition=function(cell,vector){var previous;do{previous=cell;cell={x:previous.x+vector.x,y:previous.y+vector.y}}while(this.grid.withinBounds(cell)&&this.grid.cellAvailable(cell));return{farthest:previous,next:cell,}};GameManager.prototype.movesAvailable=function(){return this.grid.cellsAvailable()||this.tileMatchesAvailable()};GameManager.prototype.tileMatchesAvailable=function(){var self=this;var tile;for(var x=0;x<this.size;x++){for(var y=0;y<this.size;y++){tile=this.grid.cellContent({x:x,y:y});if(tile){for(var direction=0;direction<4;direction++){var vector=self.getVector(direction);var cell={x:x+vector.x,y:y+vector.y};var other=self.grid.cellContent(cell);if(other){}if(other&&other.value===tile.value){return true}}}}}return false};GameManager.prototype.positionsEqual=function(first,second){return first.x===second.x&&first.y===second.y};function Grid(size){this.size=size;this.cells=[];this.build()}Grid.prototype.build=function(){for(var x=0;x<this.size;x++){var row=(this.cells[x]=[]);for(var y=0;y<this.size;y++){row.push(null)}}};Grid.prototype.randomAvailableCell=function(){var cells=this.availableCells();if(cells.length){return cells[Math.floor(Math.random()*cells.length)]}};Grid.prototype.availableCells=function(){var cells=[];this.eachCell(function(x,y,tile){if(!tile){cells.push({x:x,y:y})}});return cells};Grid.prototype.eachCell=function(callback){for(var x=0;x<this.size;x++){for(var y=0;y<this.size;y++){callback(x,y,this.cells[x][y])}}};Grid.prototype.cellsAvailable=function(){return!!this.availableCells().length};Grid.prototype.cellAvailable=function(cell){return!this.cellOccupied(cell)};Grid.prototype.cellOccupied=function(cell){return!!this.cellContent(cell)};Grid.prototype.cellContent=function(cell){if(this.withinBounds(cell)){return this.cells[cell.x][cell.y]}else{return null}};Grid.prototype.insertTile=function(tile){this.cells[tile.x][tile.y]=tile};Grid.prototype.removeTile=function(tile){this.cells[tile.x][tile.y]=null};Grid.prototype.withinBounds=function(position){return(position.x>=0&&position.x<this.size&&position.y>=0&&position.y<this.size)};function HTMLActuator(){this.tileContainer=document.getElementsByClassName('tile-container')[0];this.scoreContainer=document.getElementsByClassName('score-container')[0];this.messageContainer=document.getElementsByClassName('game-message')[0];this.score=0}HTMLActuator.prototype.actuate=function(grid,metadata){var self=this;window.requestAnimationFrame(function(){self.clearContainer(self.tileContainer);grid.cells.forEach(function(column){column.forEach(function(cell){if(cell){self.addTile(cell)}})});self.updateScore(metadata.score);if(metadata.over)self.message(false);if(metadata.won)self.message(true)})};HTMLActuator.prototype.restart=function(){this.clearMessage()};HTMLActuator.prototype.clearContainer=function(container){while(container.firstChild){container.removeChild(container.firstChild)}};HTMLActuator.prototype.addTile=function(tile){var self=this;var element=document.createElement('div');var position=tile.previousPosition||{x:tile.x,y:tile.y};positionClass=this.positionClass(position);var classes=['tile','tile-'+tile.value,positionClass];this.applyClasses(element,classes);element.textContent=tile.value;if(tile.previousPosition){window.requestAnimationFrame(function(){classes[2]=self.positionClass({x:tile.x,y:tile.y});self.applyClasses(element,classes)})}else if(tile.mergedFrom){classes.push('tile-merged');this.applyClasses(element,classes);tile.mergedFrom.forEach(function(merged){self.addTile(merged)})}else{classes.push('tile-new');this.applyClasses(element,classes)}this.tileContainer.appendChild(element)};HTMLActuator.prototype.applyClasses=function(element,classes){element.setAttribute('class',classes.join(' '))};HTMLActuator.prototype.normalizePosition=function(position){return{x:position.x+1,y:position.y+1}};HTMLActuator.prototype.positionClass=function(position){position=this.normalizePosition(position);return'tile-position-'+position.x+'-'+position.y};HTMLActuator.prototype.updateScore=function(score){this.clearContainer(this.scoreContainer);var difference=score-this.score;this.score=score;this.scoreContainer.textContent=this.score;if(difference>0){var addition=document.createElement('div');addition.classList.add('score-addition');addition.textContent='+'+difference;this.scoreContainer.appendChild(addition)}};HTMLActuator.prototype.message=function(won){var type=won?'game-won':'game-over';var message=won?'You win!':'Game over!';this.messageContainer.classList.add(type);this.messageContainer.getElementsByTagName('p')[0].textContent=message};HTMLActuator.prototype.clearMessage=function(){this.messageContainer.classList.remove('game-won','game-over')};function KeyboardInputManager(){this.events={};this.listen()}KeyboardInputManager.prototype.on=function(event,callback){if(!this.events[event]){this.events[event]=[]}this.events[event].push(callback)};KeyboardInputManager.prototype.emit=function(event,data){var callbacks=this.events[event];if(callbacks){callbacks.forEach(function(callback){callback(data)})}};KeyboardInputManager.prototype.listen=function(){var self=this;var map={38:0,39:1,40:2,37:3,75:0,76:1,74:2,72:3,};document.addEventListener('keydown',function(event){var modifiers=event.altKey||event.ctrlKey||event.metaKey||event.shiftKey;var mapped=map[event.which];if(!modifiers){if(mapped!==undefined){event.preventDefault();self.emit('move',mapped)}if(event.which===32)self.restart.bind(self)(event)}});var retry=document.getElementsByClassName('retry-button')[0];retry.addEventListener('click',this.restart.bind(this));var gestures=[Hammer.DIRECTION_UP,Hammer.DIRECTION_RIGHT,Hammer.DIRECTION_DOWN,Hammer.DIRECTION_LEFT,];var gameContainer=document.getElementsByClassName('game-container')[0];var handler=Hammer(gameContainer,{drag_block_horizontal:true,drag_block_vertical:true,});handler.on('swipe',function(event){event.gesture.preventDefault();mapped=gestures.indexOf(event.gesture.direction);if(mapped!==-1)self.emit('move',mapped)})};KeyboardInputManager.prototype.restart=function(event){event.preventDefault();this.emit('restart')};function Tile(position,value){this.x=position.x;this.y=position.y;this.value=value||2;this.previousPosition=null;this.mergedFrom=null}Tile.prototype.savePosition=function(){this.previousPosition={x:this.x,y:this.y}};Tile.prototype.updatePosition=function(position){this.x=position.x;this.y=position.y};</script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/Rlove.html"/>
      <url>/HEXO/html/Rlove.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>激光汇聚成爱心</title>    <style>      canvas {        position: absolute;        left: 0;        top: 0;        width: 100%;        height: 100%;        background-color: rgba(0, 0, 0, 0.2);      }    </style>  </head>  <body>    <canvas id="heart"></canvas>    <script>window.requestAnimationFrame=window.__requestAnimationFrame||window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||(function(){return function(callback,element){var lastTime=element.__lastTime;if(lastTime===undefined){lastTime=0}var currTime=Date.now();var timeToCall=Math.max(1,33-(currTime-lastTime));window.setTimeout(callback,timeToCall);element.__lastTime=currTime+timeToCall}})();window.isDevice=/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test((navigator.userAgent||navigator.vendor||window.opera).toLowerCase());var loaded=false;var init=function(){if(loaded)return;loaded=true;var mobile=window.isDevice;var koef=mobile?1.5:1;var canvas=document.getElementById('heart');var ctx=canvas.getContext('2d');var width=(canvas.width=koef*innerWidth);var height=(canvas.height=koef*innerHeight);var rand=Math.random;ctx.fillStyle='rgba(0,0,0,1)';ctx.fillRect(0,0,width,height);var heartPosition=function(rad){return[Math.pow(Math.sin(rad),3),-(15*Math.cos(rad)-5*Math.cos(2*rad)-2*Math.cos(3*rad)-Math.cos(4*rad)),]};var scaleAndTranslate=function(pos,sx,sy,dx,dy){return[dx+pos[0]*sx,dy+pos[1]*sy]};window.addEventListener('resize',function(){width=canvas.width=koef*innerWidth;height=canvas.height=koef*innerHeight;ctx.fillStyle='rgba(0,0,0,1)';ctx.fillRect(0,0,width,height)});var traceCount=50;var pointsOrigin=[];var i;var dr=0.1;for(i=0;i<Math.PI*2;i+=dr)pointsOrigin.push(scaleAndTranslate(heartPosition(i),105,6.5,0,0));for(i=0;i<Math.PI*2;i+=dr)pointsOrigin.push(scaleAndTranslate(heartPosition(i),75,4.5,0,0));for(i=0;i<Math.PI*2;i+=dr)pointsOrigin.push(scaleAndTranslate(heartPosition(i),45,2.5,0,0));var heartPointsCount=pointsOrigin.length;var targetPoints=[];var pulse=function(kx,ky){for(i=0;i<pointsOrigin.length;i++){targetPoints[i]=[];targetPoints[i][0]=kx*pointsOrigin[i][0]+width/2;targetPoints[i][1]=ky*pointsOrigin[i][1]+height/2}};var e=[];for(i=0;i<heartPointsCount;i++){var x=rand()*width;var y=rand()*height;e[i]={vx:0,vy:0,R:2,speed:rand()+5,q:~~(rand()*heartPointsCount),D:2*(i%2)-1,force:0.2*rand()+0.7,f:'hsla(0,'+~~(40*rand()+60)+'%,'+~~(60*rand()+20)+'%,.3)',trace:[],};for(var k=0;k<traceCount;k++)e[i].trace[k]={x:x,y:y}}var config={traceK:0.4,timeDelta:0.01,};var time=0;var loop=function(){var n=-Math.cos(time);pulse((1+n)*0.5,(1+n)*0.5);time+=(Math.sin(time)<0?9:n>0.8?0.2:1)*config.timeDelta;ctx.fillStyle='rgba(0,0,0,.1)';ctx.fillRect(0,0,width,height);for(i=e.length;i--;){var u=e[i];var q=targetPoints[u.q];var dx=u.trace[0].x-q[0];var dy=u.trace[0].y-q[1];var length=Math.sqrt(dx*dx+dy*dy);if(10>length){if(0.95<rand()){u.q=~~(rand()*heartPointsCount)}else{if(0.99<rand()){u.D*=-1}u.q+=u.D;u.q%=heartPointsCount;if(0>u.q){u.q+=heartPointsCount}}}u.vx+=(-dx/length)*u.speed;u.vy+=(-dy/length)*u.speed;u.trace[0].x+=u.vx;u.trace[0].y+=u.vy;u.vx*=u.force;u.vy*=u.force;for(k=0;k<u.trace.length-1;){var T=u.trace[k];var N=u.trace[++k];N.x-=config.traceK*(N.x-T.x);N.y-=config.traceK*(N.y-T.y)}ctx.fillStyle=u.f;for(k=0;k<u.trace.length;k++){ctx.fillRect(u.trace[k].x,u.trace[k].y,1,1)}}window.requestAnimationFrame(loop,canvas)};loop()};var s=document.readyState;if(s==='complete'||s==='loaded'||s==='interactive')init();else document.addEventListener('DOMContentLoaded',init,false);</script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/clock.html"/>
      <url>/HEXO/html/clock.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>Clock</title>    <style>      html,      body {        width: 100%;        height: 100%;        margin: 0;        padding: 0;        background: linear-gradient(to left bottom, #7d7d7d, #070707);      }      li {        list-style: none;        height: 50px;        width: 50px;        margin: 0;        padding: 0;        font-size: 22ox;        line-height: 30px;        color: #bbbbbb;      }      .container {        width: 100%;        position: fixed;        top: 50%;        left: 50%;        z-index: 4;        transform: translate(-50%, -50%);      }      .clock {        display: flex;        flex-direction: row;        justify-content: space-around;        align-items: center;        width: 700px;        height: 30px;        margin: 50% auto;        background-color: #3b3b3b;        box-shadow: 2px 2px 10px 3px #2f2f2f;        transform: translateY(-50%);        border-radius: 20px;      }      .time-box {        width: 50px;        height: 100%;      }      .numbers {        background-color: #272727;        box-shadow: 2px 2px 10px 3px #2f2f2f;        text-align: center;        border-radius: 30px;        transition: all 0.5s;      }    </style>  </head>  <body>    <!-- partial:index.partial.html -->    <div class="container">      <div class="clock">        <div class="time-box">          <div class="numbers" id="hours-first">            <li>0</li>            <li>1</li>            <li>2</li>          </div>        </div>        <div class="time-box">          <div class="numbers" id="hours-second">            <li>0</li>            <li>1</li>            <li>2</li>            <li>3</li>            <li>4</li>            <li>5</li>            <li>6</li>            <li>7</li>            <li>8</li>            <li>9</li>          </div>        </div>        <div class="time-box">          <div class="numbers" id="minutes-first">            <li>0</li>            <li>1</li>            <li>2</li>            <li>3</li>            <li>4</li>            <li>5</li>          </div>        </div>        <div class="time-box">          <div class="numbers" id="minutes-second">            <li>0</li>            <li>1</li>            <li>2</li>            <li>3</li>            <li>4</li>            <li>5</li>            <li>6</li>            <li>7</li>            <li>8</li>            <li>9</li>          </div>        </div>        <div class="time-box">          <div class="numbers" id="seconds-first">            <li>0</li>            <li>1</li>            <li>2</li>            <li>3</li>            <li>4</li>            <li>5</li>          </div>        </div>        <div class="time-box">          <div class="numbers" id="seconds-second">            <li>0</li>            <li>1</li>            <li>2</li>            <li>3</li>            <li>4</li>            <li>5</li>            <li>6</li>            <li>7</li>            <li>8</li>            <li>9</li>          </div>        </div>      </div>    </div>    <!-- partial -->    <script>      const h1 = document.getElementById('hours-first');      const h2 = document.getElementById('hours-second');      const m1 = document.getElementById('minutes-first');      const m2 = document.getElementById('minutes-second');      const s1 = document.getElementById('seconds-first');      const s2 = document.getElementById('seconds-second');      let hour1 = 0,        hour2 = 0,        minute1 = 0,        minute2 = 0,        second1 = 0;      function handleNumber(num) {        if (num < 10) {          return [0, num];        } else {          return [Math.floor(num / 10), num % 10];        }      }      function changeTime() {        let time = new Date();        const [h_1, h_2] = handleNumber(time.getHours());        const [m_1, m_2] = handleNumber(time.getMinutes());        const [s_1, s_2] = handleNumber(time.getSeconds());        if (h_1 !== hour1) {          hour1 = h_1;          h1.style.transform = `translateY(-${hour1 * 50}px)`;        }        if (h_2 !== hour2) {          hour2 = h_2;          h2.style.transform = `translateY(-${hour2 * 50}px)`;        }        if (m_1 !== minute1) {          minute1 = m_1;          m1.style.transform = `translateY(-${minute1 * 50}px)`;        }        if (m_2 !== minute2) {          minute2 = m_2;          m2.style.transform = `translateY(-${minute2 * 50}px)`;        }        if (s_1 !== second1) {          second1 = s_1;          s1.style.transform = `translateY(-${second1 * 50}px)`;        }        s2.style.transform = `translateY(-${s_2 * 50}px)`;      }      setInterval(changeTime);    </script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E5%88%AB%E6%8D%85%E9%A9%AC%E8%9C%82%E7%AA%9D.html"/>
      <url>/HEXO/html/%E5%88%AB%E6%8D%85%E9%A9%AC%E8%9C%82%E7%AA%9D.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh">  <head>    <meta charset="UTF-8" />    <title>别捅马蜂窝</title>    <style>      body{display:flex;justify-content:center;margin:0;height:100vh;background-color:#f5fccd;overflow:hidden;cursor:none;}.hive-line{position:absolute;width:0.2rem;height:3rem;background-color:#12486b;box-shadow:2rem -0.5rem 1rem 0 rgba(0,0,56,0.5);}.hive-line--provoked{transform-origin:50% -2rem;animation:swing;animation-duration:1s;animation-iteration-count:2;}@keyframes swing{0%,100%{transform:rotate(0deg);}33.33%{transform:rotate(-10deg);}66.66%{transform:rotate(10deg);}}.hive-text{position:absolute;top:1rem;left:calc(50vw - 8rem);width:5rem;font-family:'Archivo Black',sans-serif;color:#12486b;}.hive-text:before{content:'';position:absolute;bottom:-2rem;left:3rem;width:0.2rem;height:2rem;background-color:#12486b;transform:rotate(-45deg);}.hive{position:relative;width:8rem;height:10rem;margin-top:3rem;border-radius:50%;background:radial-gradient(circle at 0 0,#fff -20%,orange);overflow:hidden;box-shadow:2rem 1rem 2rem 0 rgba(0,0,56,0.5);}.hive--provoked{transform-origin:50% -4rem;animation:swing;animation-duration:1s;animation-iteration-count:2;}@keyframes swing{0%,100%{transform:rotate(0deg);}33.33%{transform:rotate(-10deg);}66.66%{transform:rotate(10deg);}}.hive__division{position:absolute;width:100%;height:0.2rem;background:linear-gradient(90deg,#ff7d66,#000038 300%);}.hive__division:nth-child(1){top:10%;}.hive__division:nth-child(2){top:30%;}.hive__division:nth-child(3){top:50%;}.hive__division:nth-child(4){top:70%;}.hive__division:nth-child(5){top:90%;}.hive__door{position:absolute;left:2.5rem;bottom:2rem;width:3rem;height:3rem;border-top:0.3rem solid #ff7d66;border-radius:50%;background:linear-gradient(#12486b -100%,#000038);}.bee{position:absolute;top:9rem;left:calc(50vw - 0.4rem);width:0.8rem;height:0.5rem;border-radius:50%;background:linear-gradient(          90deg,orange,orange 20%,#000038 20%,#000038 40%,orange 40%,orange 60%,#000038 60%,#000038 80%,orange 80%        );box-shadow:2rem 1rem 1rem 0 rgba(0,0,56,0.6);transition-property:top,left;transition-duration:0.5s;animation:flying;animation-duration:10s;animation-iteration-count:infinite;}.bee:before,.bee:after{content:'';position:absolute;top:-0.3rem;width:0.3rem;height:0.3rem;background:rgba(255,255,255,0.6);}.bee:before{left:0;border-radius:0 0.2rem 0 0.2rem;}.bee:after{left:0.3rem;border-radius:0.2rem 0 0.2rem 0;}@keyframes flying{0%{top:9rem;left:calc(50vw - 0.4rem);opacity:0;}5%{opacity:1;}10%,70%{top:min(calc(var(--top) + 1rem),calc(80vh - 1rem));left:calc(var(--left) + 1rem);}15%,75%{top:min(calc(var(--top) + 3rem),calc(80vh - 1rem));left:calc(var(--left) - 0.5rem);}20%,50%{top:min(calc(var(--top) + 1rem),calc(80vh - 1rem));left:calc(var(--left) - 1.5rem);}30%,60%{top:min(calc(var(--top) - 2rem),calc(80vh - 1rem));left:calc(var(--left) + 0.5rem);}40%,80%{top:min(var(--top),calc(80vh - 1rem));left:calc(var(--left) - 2.5rem);}35%,95%{top:min(calc(var(--top) - 0.5rem),calc(80vh - 1rem));left:calc(var(--left) - 3rem);}50%,90%{top:min(calc(var(--top) - 1rem),calc(80vh - 1rem));left:calc(var(--left) + 0.5rem);}100%{top:min(calc(var(--top) - 1rem),calc(80vh - 1rem));left:calc(var(--left) + 1.5rem);}}.bee:nth-child(4n){animation:flying2;animation-duration:12s;animation-iteration-count:infinite;}@keyframes flying2{0%{top:9rem;left:calc(50vw - 0.4rem);opacity:0;}5%{opacity:1;}20%,90%{top:min(calc(var(--top) + 1rem),calc(80vh - 1rem));left:calc(var(--left) + 5rem);}15%,75%{top:min(calc(var(--top) - 3rem),calc(80vh - 1rem));left:calc(var(--left) - 6rem);}30%,80%{top:min(calc(var(--top) + 4rem),calc(80vh - 1rem));left:calc(var(--left) - 1.5rem);}25%,65%{top:min(calc(var(--top) - 2rem),calc(80vh - 1rem));left:calc(var(--left) + 5rem);}90%,80%{top:min(calc(var(--top) + 4rem),calc(80vh - 1rem));left:calc(var(--left) - 3.5rem);}35%,95%{top:min(calc(var(--top) - 0.5rem),calc(80vh - 1rem));left:calc(var(--left) - 3rem);}50%,40%{top:min(calc(var(--top) - 5rem),calc(80vh - 1rem));left:calc(var(--left) + 0.5rem);}100%{top:min(calc(var(--top) - 3rem),calc(80vh - 1rem));left:calc(var(--left) + 1.5rem);}}.bee:nth-child(4n + 1){animation:flying3;animation-duration:20s;animation-iteration-count:infinite;}@keyframes flying3{0%{top:9rem;left:calc(50vw - 0.4rem);opacity:0;}5%{opacity:1;}15%,90%{top:min(calc(var(--top) - 6rem),calc(80vh - 1rem));left:calc(var(--left) + 5rem);}15%,75%{top:min(calc(var(--top) - 1rem),calc(80vh - 1rem));left:calc(var(--left) - 8rem);}30%,80%{top:min(calc(var(--top) + 2rem),calc(80vh - 1rem));left:calc(var(--left) + 5rem);}25%,65%{top:min(calc(var(--top) - 2rem),calc(80vh - 1rem));left:calc(var(--left) + 8rem);}35%,80%{top:min(calc(var(--top) + 8rem),calc(80vh - 1rem));left:calc(var(--left) - 8rem);}50%,95%{top:min(calc(var(--top) + 5rem),calc(80vh - 1rem));left:calc(var(--left) - 3rem);}90%,40%{top:min(calc(var(--top) - 6rem),calc(80vh - 1rem));left:calc(var(--left) + 5rem);}100%{top:min(calc(var(--top) - 6rem),calc(80vh - 1rem));left:calc(var(--left) - 8rem);}}.bee:nth-child(4n + 2){animation:flying4;animation-duration:15s;animation-iteration-count:infinite;}@keyframes flying4{0%{top:9rem;left:calc(50vw - 0.4rem);opacity:0;}5%{opacity:1;}15%,90%{top:min(calc(var(--top) - 3rem),calc(80vh - 1rem));left:calc(var(--left) + 2rem);}15%,75%{top:min(calc(var(--top) - 1rem),calc(80vh - 1rem));left:calc(var(--left) + 4rem);}30%,80%{top:min(calc(var(--top) + 5rem),calc(80vh - 1rem));left:calc(var(--left) - 2rem);}25%,65%{top:min(calc(var(--top) + 2rem),calc(80vh - 1rem));left:calc(var(--left) - 6rem);}35%,80%{top:min(calc(var(--top) - 6rem),calc(80vh - 1rem));left:calc(var(--left) + 6rem);}50%,95%{top:min(calc(var(--top) + 5rem),calc(80vh - 1rem));left:calc(var(--left) - 3rem);}90%,40%{top:min(calc(var(--top) - 2rem),calc(80vh - 1rem));left:calc(var(--left) + 1rem);}100%{top:min(calc(var(--top) + 3rem),calc(80vh - 1rem));left:calc(var(--left) - 4rem);}}.cursor{position:absolute;top:calc(var(--top,11rem) - 2rem);left:calc(var(--left,50vw) - 2rem);transform:rotate(-20deg);pointer-events:none;}.cursor path{fill:#12486b;}.cursor--red polygon{animation:hurting-hand;animation-duration:30s;animation-delay:2s;animation-fill-mode:forwards;}@keyframes hurting-hand{33%{fill:#ff7d66;}100%{fill:#419197;}}.water{position:absolute;top:80vh;left:0;width:100%;height:20vh;background:linear-gradient(#78d6c6,#12486b);opacity:0.6;}</style>  </head>  <body>    <div id="hive-line"class="hive-line"></div><div class="hive-text">别点！</div><div id="hive"class="hive"><div class="hive__division"></div><div class="hive__division"></div><div class="hive__division"></div><div class="hive__division"></div><div class="hive__division"></div><div class="hive__door"></div></div><div id="cursor"class="cursor"><svg xmlns:svg="http://www.w3.org/2000/svg"xmlns="http://www.w3.org/2000/svg"xmlns:xlink="http://www.w3.org/1999/xlink"version="1.1"baseProfile="tiny"id="svg3010"x="0"y="0"width="4rem"height="4rem"viewBox="100 0 600 450"overflow="visible"xml:space="preserve"><polygon fill="#FFFFFF"points="296,210 291,237 312,258 376,386 504,391 520,354.1 536,306 541,199 520,178 488,162 440,146   408,141 392,66 360,66 355,237 323,205 "/><path d="M344,66h16v176h-16v-16h-16v-16h16V66z M536,194v112h16V194H536z M280,194v48h16v-32h32v-16H280z M328,290v-32h-16v32H328z   M344,322v-32h-16v32H344z M360,354v48h160v-47.9h-16V386H376l0,0v-32H360l0-32h-16v32H360z M520,354h16v-48h-16V354z M312,258v-16  h-16v16H312z M520,178v16h16v-16H520z M488,162v64h16v-48h16v-16H488z M440,146v64h16v-48h32v-16H440z M408,130V66h-16v144h16v-64  h32v-16H408z M360,50v16h32V50H360z"/></svg></div><div id="bee-wrapper"class="bee_wrapper"></div><div id="water"class="water"></div>    <script>const hive=document.getElementById('hive');const hiveLine=document.getElementById('hive-line');const cursor=document.getElementById('cursor');const beeWrapper=document.getElementById('bee-wrapper');const water=document.getElementById('water');let provoked=false;const beeNumber=30;hive.addEventListener('click',()=>{hive.classList.add('hive--provoked');hiveLine.classList.add('hive-line--provoked');cursor.classList.add('cursor--red');provoked=true;let beeCount=0;const intervalID=setInterval(()=>{if(beeCount>=beeNumber){clearInterval(intervalID)}const bee=document.createElement('div');bee.classList.add('bee');beeWrapper.appendChild(bee);beeCount=beeCount+1},300)});const cursorFunction=(mouse)=>{const clientX=mouse.clientX?mouse.clientX:mouse.touches[0].clientX;const clientY=mouse.clientY?mouse.clientY:mouse.touches[0].clientY;document.body.style=`--top:${clientY}px;--left:${clientX}px;`};window.addEventListener('mousemove',cursorFunction);window.addEventListener('touchstart',cursorFunction);water.addEventListener('mouseover',()=>{cursor.classList.remove('cursor--red')});water.addEventListener('mouseout',()=>{if(provoked){cursor.classList.add('cursor--red')}});</script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E4%BA%95%E5%AD%97%E6%A3%8B.html"/>
      <url>/HEXO/html/%E4%BA%95%E5%AD%97%E6%A3%8B.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>井字棋</title>    <meta name="viewport" content="width=device-width, initial-scale=1" />    <style>      @charset "UTF-8";      @import url('https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700,800,900&display=swap');      @layer reset {        *,        *:before,        *:after {          box-sizing: border-box;        }        img {          max-width: 100%;        }      }      .overlay-content {        position: fixed;        top: 0;        left: 0;        width: 100vw;        height: 100vh;        z-index: 99999; /* 非常高的值以确保覆盖全局 */        background-color: white; /* 根据需要设置背景色 */        overflow: auto; /* 允许内容滚动 */      }      html {        color-scheme: dark;        background-color: canvas;        background-color: light-dark(#fff, #1e1e1e);        background-color: light-dark(#fff, #121312);        padding: 1rem;        font-family: system-ui;        font-family: 'Poppins', sans-serif;        font-size: 1rem;      }      html body {        display: grid;        gap: 1.5rem;        color: light-dark(#333, #aaa);        color: light-dark(#444, #999);        max-width: min(40rem, 100%);        width: fit-content;        width: min(100%, 42ch);        margin: auto;        text-align: center;        padding-block: 0.5rem 0.5rem;      }      body {        overflow: auto;        position: relative;        display: grid;        place-content: center;        width: 10rem;        margin: auto;        gap: 1rem;        min-height: 90dvh;        text-align: center;      }      body > * {        transition: all 0.3s var(--back-out);      }      h1 {        --player-1-clr: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 1)        );        --player-2-clr: light-dark(          oklch(0.75 0.2 20 / 1),          oklch(0.7 0.15 20 / 1)        );        --player-clr: var(--player-1-clr);        font-family: inherit;        text-align: center;        margin-block: 0;        padding-block: 0;        opacity: 0.6;        display: grid;        gap: 0.2rem;        position: relative;        color: light-dark(#000, #ccc);      }      body:has(.player-2s-turn) h1 {        --player-clr: var(--player-2-clr);      }      h1 small {        font-size: 0.5em;        font-weight: normal;        color: #888888;        color: light-dark(#555, #777);      }      .logo {        font-size: 18rem;        margin-block-end: -4.9rem;        font-weight: normal;        height: 6rem;        opacity: 0.07;        display: grid;        place-content: center;        user-select: none;        z-index: -1;      }      kbd {        font-size: 0.9em;        font-weight: bold;        border: solid 1px #88888880;        padding-inline: 0.5ch;        border-radius: 3px;      }      hr {        width: 100%;        opacity: 0.25;      }      h1 sup {        color: light-dark(#333, #ccc);        font-size: 1.2rem;        font-weight: normal;        display: inline-block;        display: block;        font-family: 'Georgia';        position: absolute;        right: -1ch;        top: 0;        user-select: none;      }      .description {        text-align: left;        line-height: 1.6;        line-height: 1.75;        margin: 0 0.25rem;        padding: 0;        padding-inline: 0.5rem;        position: relative;        display: block;      }      .description sup {        font-family: 'Georgia';        font-size: 1.5rem;        position: absolute;        top: 1.175ch;        left: -0.5ch;      }      .description em {        font-style: normal;      }      .adjective {        color: var(--player-clr);        font-family: sans-serif;        font-family: 'Poppins', sans-serif;        text-transform: uppercase;        font-weight: normal;        font-style: normal;        font-size: 0.75em;        font-size: 0.35em;        line-height: 1;        letter-spacing: 9.25px;        letter-spacing: 13.76px;        position: relative;        transition: color 0.3s var(--back-out);        width: fit-content;        margin-inline: auto;        padding-left: 0.75ch;      }      b,      i {        font-family: inherit;        font-weight: bold;        font-style: normal;        transition: all 0.3s var(--back-out);        display: inline-grid;        place-content: center;        line-height: 0.75em;        width: 0.75rem;        height: 0.75rem;        position: relative;        z-index: 1;      }      b {        color: var(--player-1-clr);        transform: scale(2) translatey(-0.2rem);      }      i {        color: var(--player-2-clr);      }      .fade-out {        opacity: 75%;        filter: grayscale(75%);      }      button {        cursor: pointer;        color: inherit;        color: light-dark(#000, #fff);        color: ButtonText;        background-color: light-dark(ButtonFace, #444);        border: transparent;        padding: 0.25rem 0.5rem;        border-radius: 4px;        translate: 0 3px;        width: max-content;        margin-inline: auto;        min-width: 17ch;        transition: opacity 0.6s var(--back-out), background-color 0.3s var(--back-out),          translate 0.6s var(--back-out);      }      button:hover {        background-color: #88888840;      }      button:focus-visible {        outline: dashed 1px currentcolor;        outline-offset: -3px;      }      button:active {        filter: scale(0.9);      }      table.xo:not(:has(b)) + footer button {        visibility: hidden;        opacity: 0;        translate: 0 -1rem;        pointer-events: none;      }      table.xo:has(b) + footer button {        visibility: unset;        opacity: 1;        translate: 0 0;        pointer-events: unset;      }      body {        --player-1-clr: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 1)        );        --player-2-clr: light-dark(          oklch(0.75 0.2 20 / 1),          oklch(0.7 0.15 20 / 1)        );        --player-clr: var(--player-1-clr);        --shadow-color: 220 40% 2%;        --shadow-strength: 25%;        --inner-shadow-highlight: inset 0 -0.5px 0 0 #fff1, inset 0 0.5px 0 0            #0007;        --shadow-6: 0 -1px 2px 0 hsl(var(--shadow-color) / calc(var(                      --shadow-strength                    ) + 2%)), 0 3px 2px -2px hsl(var(--shadow-color) / calc(var(                      --shadow-strength                    ) + 3%)),          0 7px 5px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) +                    3%)), 0 12px 10px -2px hsl(var(--shadow-color) / calc(var(                      --shadow-strength                    ) + 4%)),          0 22px 18px -2px hsl(var(--shadow-color) / calc(var(                      --shadow-strength                    ) + 5%)), 0 41px 33px -2px hsl(var(--shadow-color) / calc(var(                      --shadow-strength                    ) + 6%)),          0 100px 80px -2px hsl(var(--shadow-color) / calc(var(                      --shadow-strength                    ) + 7%));        --back-out: linear(          0 0%,          0.1935 4.37%,          0.3671 8.83%,          0.521 13.38%,          0.6557 18.04%,          0.7716 22.82%,          0.869 27.73%,          0.9488 32.81%,          1.0111 38.08%,          1.0512 42.81%,          1.0792 47.75%,          1.0953 52.97%,          1.1 58.55%,          1.0956 63.36%,          1.0838 68.73%,          1.0119 90.98%,          1.0029 95.69%,          1 100%        );      }      body:has(.player-2s-turn) {        --player-clr: var(--player-2-clr);      }      table.xo {        --player-1-clr: light-dark(          oklch(0.75 0.075 200 / 1),          oklch(0.7 0.07 200 / 1)        );        --_block-size: 7rem;        --_gap: 0.3rem;        --_cursor-1: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="filter:invert(1);"><text x="0" y="20" font-family="sans-serif" font-size="2rem" fill="black" style="font-weight: bold; font-style: normal; line-height: .75em; width: .75rem; height: .75rem; display: block;">⨯</text></svg>');        --_cursor-2: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="filter:invert(1);"><text x="0" y="20" font-family="sans-serif" font-size="1rem" fill="black" style="font-weight: bold; font-style: normal; line-height: .75em; width: .75rem; height: .75rem; display: block;">⭘</text></svg>');        width: 100%;        user-select: none;        border-spacing: var(--_gap);        grid-template-columns: repeat(3, 1fr);        grid-template-rows: repeat(3, 1fr);        position: relative;        margin-inline: auto;        overflow: hidden;        /* board bg */        /* surfaces */        /* edges */        /* winner strokes */      }      table.xo:not(.player-2s-turn) {        cursor: var(--_cursor-1) 4 16, auto;      }      table.xo.player-2s-turn {        cursor: var(--_cursor-2) 4 16, auto;      }      table.xo:active td {        transition: opacity 0.6s linear;      }      table.xo:not(:active):has(td:focus-visible) {        cursor: default;      }      table.xo td:has(:is(b, i)) {        cursor: default;      }      table.xo::before {        content: '';        background: #000;        background: light-dark(#222, transparent);        position: absolute;        inset: 0;        inset: var(--_gap) 0 0 0;        pointer-events: none;        z-index: -1;        opacity: 1;      }      table.xo td {        position: relative;        background: #000;        background: light-dark(#333, #000);        padding: 1rem;        border: solid 1px #88888899;        border-radius: 2px;        height: var(--_block-size);        width: var(--_block-size);        place-content: center;        transition: border 0.6s var(--back-out);      }      @starting-style {        table.xo td {          border-color: transparent;        }      }      table.xo td:not(:has(:is(b, i))):hover {        background-attachment: fixed;        background-image: radial-gradient(          circle at var(--x, 0) var(--y, 0),          rgba(255, 255, 255, 0.075),          rgba(255, 255, 255, 0.025) 7.5rem        );      }      table.xo td::after {        content: '';        position: absolute;        inset: -2px;        border-radius: inherit;        background-attachment: fixed;        background-color: #000;        background-image: radial-gradient(          circle at var(--x, 0) var(--y, 0),          rgba(255, 255, 255, 0.995),          transparent 5rem        );        pointer-events: none;        z-index: -1;      }      table.xo td:has(:is(b, i))::after {        background-image: radial-gradient(          circle at var(--x, 0) var(--y, 0),          rgba(255, 255, 255, 0.95),          transparent 3rem        );      }      table.xo::after {        background: linear-gradient(          to var(--_to),          transparent calc(var(--_distance) - 1px),          var(--_color) calc(var(--_distance) - 1px),          var(--_color) calc(var(--_distance) + 1px),          transparent calc(var(--_distance) + 1px)        );        display: block;        pointer-events: none;        display: none;        content: '';        position: absolute;        inset: 0.5rem;        inset: calc(var(--_gap) * 4);        border-radius: 1rem;        z-index: 1;        opacity: 1;      }      table.xo td {        outline-offset: -1.25rem;      }      table.xo td:focus-visible {        outline: dashed 1px var(--player-1-clr);      }      table.xo.player-2s-turn td:focus-visible {        outline: dashed 1px var(--player-2-clr);      }      table.xo td footer {        position: absolute;        bottom: var(--_gap);        left: 50%;        translate: -50% 0;        display: flex;      }      button .new-game {        display: none;      }      footer .win {        display: none;        line-height: 1;      }      *:has(> table.xo) .turn {        --repeat: 1;      }      *:has(> table.xo) .turn > span {        display: block;        font-style: italic;      }      *:has(> table.xo) .turn > span > span {        color: #888;      }      *:has(> table.xo) .turn .player-1 {        color: var(--player-1-clr);        display: block;        line-height: 1;      }      *:has(> table.xo) .turn .player-2 {        color: var(--player-2-clr);        display: none;        line-height: 1;      }      *:has(> table.xo.player-2s-turn) .turn {        display: grid;        place-content: center;      }      *:has(> table.xo.player-2s-turn) .turn .player-1 {        display: none;      }      *:has(> table.xo.player-2s-turn) .turn .player-2 {        display: block;      }      footer {        --player-clr: var(--player-2-clr);        display: grid;        gap: 1rem;      }      .asterisk {        color: var(--player-2-clr);      }      body:has(.player-2s-turn) :is(h1, footer) .asterisk {        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))::after {        display: block !important;        --_color: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 0.75)        );      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(1) td:nth-child(2) b):has(          tr:nth-child(1) td:nth-child(3) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(2) td:nth-child(3) b        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) b        ):has(tr:nth-child(3) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(1) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(2) b        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(3) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))::after {        display: block !important;        --_color: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 0.75)        );      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(1) td:nth-child(2) b):has(          tr:nth-child(1) td:nth-child(3) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(2) td:nth-child(3) b        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) b        ):has(tr:nth-child(3) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(1) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(2) b        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(3) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))::after {        display: block !important;        --_color: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 0.75)        );      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(1) td:nth-child(2) b):has(          tr:nth-child(1) td:nth-child(3) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(2) td:nth-child(3) b        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) b        ):has(tr:nth-child(3) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(1) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(2) b        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(3) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))::after {        display: block !important;        --_color: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 0.75)        );      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(1) td:nth-child(2) b):has(          tr:nth-child(1) td:nth-child(3) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(2) td:nth-child(3) b        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) b        ):has(tr:nth-child(3) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(1) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(2) b        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(3) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))::after {        display: block !important;        --_color: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 0.75)        );      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(1) td:nth-child(2) b):has(          tr:nth-child(1) td:nth-child(3) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(2) td:nth-child(3) b        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) b        ):has(tr:nth-child(3) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(1) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(2) b        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(3) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))::after {        display: block !important;        --_color: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 0.75)        );      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(1) td:nth-child(2) b):has(          tr:nth-child(1) td:nth-child(3) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(2) td:nth-child(3) b        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) b        ):has(tr:nth-child(3) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(1) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(2) b        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(3) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))::after {        display: block !important;        --_color: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 0.75)        );      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(1) td:nth-child(2) b):has(          tr:nth-child(1) td:nth-child(3) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(2) td:nth-child(3) b        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) b        ):has(tr:nth-child(3) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(1) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(2) b        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(3) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))::after {        display: block !important;        --_color: light-dark(          oklch(0.5 0.15 200 / 1),          oklch(0.7 0.07 200 / 0.75)        );      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(1) td:nth-child(2) b):has(          tr:nth-child(1) td:nth-child(3) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(2) td:nth-child(3) b        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) b        ):has(tr:nth-child(3) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(1) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(2) b        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(3) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(3) b        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) b:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) b:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) b:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) b        ):has(tr:nth-child(2) td:nth-child(2) b):has(          tr:nth-child(3) td:nth-child(1) b        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))::after {        display: block !important;        --_color: light-dark(oklch(0.75 0.2 20 / 1), oklch(0.7 0.15 20 / 0.75));      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(1) td:nth-child(2) i):has(          tr:nth-child(1) td:nth-child(3) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(2) td:nth-child(3) i        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) i        ):has(tr:nth-child(3) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(1) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(2) i        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(3) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))::after {        display: block !important;        --_color: light-dark(oklch(0.75 0.2 20 / 1), oklch(0.7 0.15 20 / 0.75));      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(1) td:nth-child(2) i):has(          tr:nth-child(1) td:nth-child(3) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(2) td:nth-child(3) i        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) i        ):has(tr:nth-child(3) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(1) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(2) i        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(3) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(2) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(2) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))::after {        display: block !important;        --_color: light-dark(oklch(0.75 0.2 20 / 1), oklch(0.7 0.15 20 / 0.75));      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(1) td:nth-child(2) i):has(          tr:nth-child(1) td:nth-child(3) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(2) td:nth-child(3) i        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) i        ):has(tr:nth-child(3) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(1) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(2) i        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(3) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))::after {        display: block !important;        --_color: light-dark(oklch(0.75 0.2 20 / 1), oklch(0.7 0.15 20 / 0.75));      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(1) td:nth-child(2) i):has(          tr:nth-child(1) td:nth-child(3) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(2) td:nth-child(3) i        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) i        ):has(tr:nth-child(3) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(1) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(2) i        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(3) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))::after {        display: block !important;        --_color: light-dark(oklch(0.75 0.2 20 / 1), oklch(0.7 0.15 20 / 0.75));      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(1) td:nth-child(2) i):has(          tr:nth-child(1) td:nth-child(3) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(2) td:nth-child(3) i        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) i        ):has(tr:nth-child(3) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(1) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(2) i        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(3) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(2) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))::after {        display: block !important;        --_color: light-dark(oklch(0.75 0.2 20 / 1), oklch(0.7 0.15 20 / 0.75));      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(1) td:nth-child(2) i):has(          tr:nth-child(1) td:nth-child(3) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(2) td:nth-child(3) i        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) i        ):has(tr:nth-child(3) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(1) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(2) i        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(3) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(3) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))::after {        display: block !important;        --_color: light-dark(oklch(0.75 0.2 20 / 1), oklch(0.7 0.15 20 / 0.75));      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(1) td:nth-child(2) i):has(          tr:nth-child(1) td:nth-child(3) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(2) td:nth-child(3) i        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) i        ):has(tr:nth-child(3) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(1) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(2) i        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(3) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: 50%;        --_to: top left;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)) {        pointer-events: none;        margin-block-end: -0.125rem;        /* horizontal 1 */        /* horizontal 2 */        /* horizontal 3 */        /* vertical 1 */        /* vertical 2 */        /* vertical 3 */        /* diagonal 1 */        /* diagonal 2 */      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        + footer        button        .new-game {        display: unset;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        + footer        button        .reset {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        + footer        button:has(.new-game) {        filter: invert(1);        letter-spacing: 1px;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        + footer        button:has(.new-game):hover {        background-color: #aaa;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        ~ footer        .player-1 {        display: block;        color: var(--player-2-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-1 {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)).player-2s-turn        ~ footer        span.player-2 {        display: block;        color: var(--player-1-clr);      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        ~ footer        .turn {        display: none;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        ~ .pyro {        display: block;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))        ~ .ttt-winner {        display: grid;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))::after {        display: block !important;        --_color: light-dark(oklch(0.75 0.2 20 / 1), oklch(0.7 0.15 20 / 0.75));      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out))::before {        inset: var(--_gap) 0;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(1) td:nth-child(2) i):has(          tr:nth-child(1) td:nth-child(3) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) + 0px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(2) td:nth-child(3) i        )::after {        --_distance: calc(50% - 1px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(3) td:nth-child(1) i        ):has(tr:nth-child(3) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) - 2px);        --_to: bottom;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(1) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: calc(16.66% - (2 * var(--_gap)) - 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(2) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(2) i        )::after {        --_distance: 50%;        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(3) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: calc(83.33% + (2 * var(--_gap)) + 1.5px);        --_to: right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(1) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(3) i        )::after {        --_distance: 50%;        --_to: top right;      }      table.xo:has(tr:nth-child(1) td:nth-child(3) i:not(.fade-out)):has(          tr:nth-child(2) td:nth-child(2) i:not(.fade-out)        ):has(tr:nth-child(3) td:nth-child(1) i:not(.fade-out)):has(          tr:nth-child(1) td:nth-child(3) i        ):has(tr:nth-child(2) td:nth-child(2) i):has(          tr:nth-child(3) td:nth-child(1) i        )::after {        --_distance: 50%;        --_to: top left;      }      .xo .remaining-life {        position: absolute;        top: 0.5ch;        left: 0.75ch;        z-index: 1;      }      .remaining-life {        white-space: nowrap;        display: flex;        gap: 0.5ch;        align-items: center;        justify-content: center;        background: #88888830;        background: light-dark(#88888840, #88888825);        border: transparent;        border-radius: 5px;        padding-inline: 0.7ch;        padding-block: 0.25ch;        line-height: 1rem;      }      .circle {        width: 0.35rem;        height: 0.35rem;        border-radius: 50%;        margin: 1px;        /* Space between circles */        display: inline-block;        /* Aligns circles next to each other */      }      .outlined {        background-color: light-dark(#888888a0, #444444a0);        /* No fill */        border: 1px solid #4caf50;        /* Outline color */        border-color: #88888880;      }      .filled {        background-color: #4caf50a0;        background-color: light-dark(#4caf50aa, #4caf5080);        /* Fill color */      }      .rubberband {        --duration: 3s;        --repeat: 3;        animation: rubberband var(--duration) ease-in-out var(--repeat);        /* animation-delay: 3s; */      }      @keyframes rubberband {        0% {          transform: scaleX(1);        }        19.8% {          transform: scale3d(1.125, 0.875, 1);        }        26.4% {          transform: scale3d(0.875, 1.125, 1);        }        33% {          transform: scale3d(1.075, 0.925, 1);        }        42.9% {          transform: scale3d(0.975, 1.025, 1);        }        49.5% {          transform: scale3d(1.025, 0.975, 1);        }        66% {          transform: scaleX(1);        }      }      @layer pyro {        body {          margin: 0;          padding: 0;        }        .pyro > .before,        .pyro > .after {          position: absolute;          width: 5px;          height: 5px;          border-radius: 50%;          box-shadow: 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff,            0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff,            0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff,            0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff,            0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff,            0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff,            0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff, 0 0 #fff,            0 0 #fff, 0 0 #fff, 0 0 #fff;          -moz-animation: 1s bang ease-out infinite backwards, 1s gravity              ease-in infinite backwards, 5s position linear infinite backwards;          -webkit-animation: 1s bang ease-out infinite backwards, 1s gravity              ease-in infinite backwards, 5s position linear infinite backwards;          -o-animation: 1s bang ease-out infinite backwards, 1s gravity ease-in              infinite backwards, 5s position linear infinite backwards;          -ms-animation: 1s bang ease-out infinite backwards, 1s gravity ease-in              infinite backwards, 5s position linear infinite backwards;          animation: 1s bang ease-out infinite backwards, 1s gravity ease-in              infinite backwards, 5s position linear infinite backwards;        }        .pyro > .after {          -moz-animation-delay: 1.25s, 1.25s, 1.25s;          -webkit-animation-delay: 1.25s, 1.25s, 1.25s;          -o-animation-delay: 1.25s, 1.25s, 1.25s;          -ms-animation-delay: 1.25s, 1.25s, 1.25s;          animation-delay: 1.25s, 1.25s, 1.25s;          -moz-animation-duration: 1.25s, 1.25s, 6.25s;          -webkit-animation-duration: 1.25s, 1.25s, 6.25s;          -o-animation-duration: 1.25s, 1.25s, 6.25s;          -ms-animation-duration: 1.25s, 1.25s, 6.25s;          animation-duration: 1.25s, 1.25s, 6.25s;        }        @-webkit-keyframes bang {          to {            box-shadow: -62px -219.6666666667px blue, 89px 73.3333333333px                #11ff00, -171px 3.3333333333px #99ff00, -232px -25.6666666667px                #ff00ae, 73px -345.6666666667px #0091ff, 59px -278.6666666667px                #ddff00, 142px -395.6666666667px #00ff9d, 113px -236.6666666667px                #002fff, -94px -392.6666666667px #00ff2f, -86px -132.6666666667px                #006fff, -14px -3.6666666667px #ff0080, -108px -139.6666666667px                yellow, 247px -256.6666666667px #00ff2f, 199px -191.6666666667px                #bf00ff, -6px 16.3333333333px #f700ff, -169px -183.6666666667px                #00ffc8, -188px -152.6666666667px #1eff00, 62px -332.6666666667px                #1500ff, 38px -369.6666666667px #0022ff, -155px -5.6666666667px                #ff0077, -45px -242.6666666667px #00ff1e, 159px -203.6666666667px                #0011ff, -117px -210.6666666667px #ff4000, -12px -292.6666666667px                #ff0015, -92px 44.3333333333px #ffbf00, 240px -295.6666666667px                #00d0ff, 138px -382.6666666667px #c8ff00, 172px -178.6666666667px                #ff0048, 143px -343.6666666667px #ffae00, -19px 27.3333333333px                #ff00d0, 189px 45.3333333333px #eeff00, 151px -387.6666666667px                #d500ff, 162px -67.6666666667px #00ffa2, -34px -360.6666666667px                #ffe600, 179px -411.6666666667px #0066ff, 125px -123.6666666667px                #ccff00, -111px 54.3333333333px #00aeff, -195px -16.6666666667px                #2200ff, 118px 34.3333333333px #ff003c, -120px -303.6666666667px                #0900ff, -62px -399.6666666667px #33ff00, -84px -396.6666666667px                #ff004d, -204px 33.3333333333px #00ff55, -58px -248.6666666667px                #eaff00, 19px -8.6666666667px #ff4800, -111px -266.6666666667px                #3cff00, -132px -221.6666666667px #0044ff, 181px -35.6666666667px                #b700ff, -229px -47.6666666667px #00ffc4, -174px -70.6666666667px                #c4ff00, 146px -139.6666666667px #4000ff;          }        }        @-moz-keyframes bang {          to {            box-shadow: -62px -219.6666666667px blue, 89px 73.3333333333px                #11ff00, -171px 3.3333333333px #99ff00, -232px -25.6666666667px                #ff00ae, 73px -345.6666666667px #0091ff, 59px -278.6666666667px                #ddff00, 142px -395.6666666667px #00ff9d, 113px -236.6666666667px                #002fff, -94px -392.6666666667px #00ff2f, -86px -132.6666666667px                #006fff, -14px -3.6666666667px #ff0080, -108px -139.6666666667px                yellow, 247px -256.6666666667px #00ff2f, 199px -191.6666666667px                #bf00ff, -6px 16.3333333333px #f700ff, -169px -183.6666666667px                #00ffc8, -188px -152.6666666667px #1eff00, 62px -332.6666666667px                #1500ff, 38px -369.6666666667px #0022ff, -155px -5.6666666667px                #ff0077, -45px -242.6666666667px #00ff1e, 159px -203.6666666667px                #0011ff, -117px -210.6666666667px #ff4000, -12px -292.6666666667px                #ff0015, -92px 44.3333333333px #ffbf00, 240px -295.6666666667px                #00d0ff, 138px -382.6666666667px #c8ff00, 172px -178.6666666667px                #ff0048, 143px -343.6666666667px #ffae00, -19px 27.3333333333px                #ff00d0, 189px 45.3333333333px #eeff00, 151px -387.6666666667px                #d500ff, 162px -67.6666666667px #00ffa2, -34px -360.6666666667px                #ffe600, 179px -411.6666666667px #0066ff, 125px -123.6666666667px                #ccff00, -111px 54.3333333333px #00aeff, -195px -16.6666666667px                #2200ff, 118px 34.3333333333px #ff003c, -120px -303.6666666667px                #0900ff, -62px -399.6666666667px #33ff00, -84px -396.6666666667px                #ff004d, -204px 33.3333333333px #00ff55, -58px -248.6666666667px                #eaff00, 19px -8.6666666667px #ff4800, -111px -266.6666666667px                #3cff00, -132px -221.6666666667px #0044ff, 181px -35.6666666667px                #b700ff, -229px -47.6666666667px #00ffc4, -174px -70.6666666667px                #c4ff00, 146px -139.6666666667px #4000ff;          }        }        @-o-keyframes bang {          to {            box-shadow: -62px -219.6666666667px blue, 89px 73.3333333333px                #11ff00, -171px 3.3333333333px #99ff00, -232px -25.6666666667px                #ff00ae, 73px -345.6666666667px #0091ff, 59px -278.6666666667px                #ddff00, 142px -395.6666666667px #00ff9d, 113px -236.6666666667px                #002fff, -94px -392.6666666667px #00ff2f, -86px -132.6666666667px                #006fff, -14px -3.6666666667px #ff0080, -108px -139.6666666667px                yellow, 247px -256.6666666667px #00ff2f, 199px -191.6666666667px                #bf00ff, -6px 16.3333333333px #f700ff, -169px -183.6666666667px                #00ffc8, -188px -152.6666666667px #1eff00, 62px -332.6666666667px                #1500ff, 38px -369.6666666667px #0022ff, -155px -5.6666666667px                #ff0077, -45px -242.6666666667px #00ff1e, 159px -203.6666666667px                #0011ff, -117px -210.6666666667px #ff4000, -12px -292.6666666667px                #ff0015, -92px 44.3333333333px #ffbf00, 240px -295.6666666667px                #00d0ff, 138px -382.6666666667px #c8ff00, 172px -178.6666666667px                #ff0048, 143px -343.6666666667px #ffae00, -19px 27.3333333333px                #ff00d0, 189px 45.3333333333px #eeff00, 151px -387.6666666667px                #d500ff, 162px -67.6666666667px #00ffa2, -34px -360.6666666667px                #ffe600, 179px -411.6666666667px #0066ff, 125px -123.6666666667px                #ccff00, -111px 54.3333333333px #00aeff, -195px -16.6666666667px                #2200ff, 118px 34.3333333333px #ff003c, -120px -303.6666666667px                #0900ff, -62px -399.6666666667px #33ff00, -84px -396.6666666667px                #ff004d, -204px 33.3333333333px #00ff55, -58px -248.6666666667px                #eaff00, 19px -8.6666666667px #ff4800, -111px -266.6666666667px                #3cff00, -132px -221.6666666667px #0044ff, 181px -35.6666666667px                #b700ff, -229px -47.6666666667px #00ffc4, -174px -70.6666666667px                #c4ff00, 146px -139.6666666667px #4000ff;          }        }        @-ms-keyframes bang {          to {            box-shadow: -62px -219.6666666667px blue, 89px 73.3333333333px                #11ff00, -171px 3.3333333333px #99ff00, -232px -25.6666666667px                #ff00ae, 73px -345.6666666667px #0091ff, 59px -278.6666666667px                #ddff00, 142px -395.6666666667px #00ff9d, 113px -236.6666666667px                #002fff, -94px -392.6666666667px #00ff2f, -86px -132.6666666667px                #006fff, -14px -3.6666666667px #ff0080, -108px -139.6666666667px                yellow, 247px -256.6666666667px #00ff2f, 199px -191.6666666667px                #bf00ff, -6px 16.3333333333px #f700ff, -169px -183.6666666667px                #00ffc8, -188px -152.6666666667px #1eff00, 62px -332.6666666667px                #1500ff, 38px -369.6666666667px #0022ff, -155px -5.6666666667px                #ff0077, -45px -242.6666666667px #00ff1e, 159px -203.6666666667px                #0011ff, -117px -210.6666666667px #ff4000, -12px -292.6666666667px                #ff0015, -92px 44.3333333333px #ffbf00, 240px -295.6666666667px                #00d0ff, 138px -382.6666666667px #c8ff00, 172px -178.6666666667px                #ff0048, 143px -343.6666666667px #ffae00, -19px 27.3333333333px                #ff00d0, 189px 45.3333333333px #eeff00, 151px -387.6666666667px                #d500ff, 162px -67.6666666667px #00ffa2, -34px -360.6666666667px                #ffe600, 179px -411.6666666667px #0066ff, 125px -123.6666666667px                #ccff00, -111px 54.3333333333px #00aeff, -195px -16.6666666667px                #2200ff, 118px 34.3333333333px #ff003c, -120px -303.6666666667px                #0900ff, -62px -399.6666666667px #33ff00, -84px -396.6666666667px                #ff004d, -204px 33.3333333333px #00ff55, -58px -248.6666666667px                #eaff00, 19px -8.6666666667px #ff4800, -111px -266.6666666667px                #3cff00, -132px -221.6666666667px #0044ff, 181px -35.6666666667px                #b700ff, -229px -47.6666666667px #00ffc4, -174px -70.6666666667px                #c4ff00, 146px -139.6666666667px #4000ff;          }        }        @keyframes bang {          to {            box-shadow: -62px -219.6666666667px blue, 89px 73.3333333333px                #11ff00, -171px 3.3333333333px #99ff00, -232px -25.6666666667px                #ff00ae, 73px -345.6666666667px #0091ff, 59px -278.6666666667px                #ddff00, 142px -395.6666666667px #00ff9d, 113px -236.6666666667px                #002fff, -94px -392.6666666667px #00ff2f, -86px -132.6666666667px                #006fff, -14px -3.6666666667px #ff0080, -108px -139.6666666667px                yellow, 247px -256.6666666667px #00ff2f, 199px -191.6666666667px                #bf00ff, -6px 16.3333333333px #f700ff, -169px -183.6666666667px                #00ffc8, -188px -152.6666666667px #1eff00, 62px -332.6666666667px                #1500ff, 38px -369.6666666667px #0022ff, -155px -5.6666666667px                #ff0077, -45px -242.6666666667px #00ff1e, 159px -203.6666666667px                #0011ff, -117px -210.6666666667px #ff4000, -12px -292.6666666667px                #ff0015, -92px 44.3333333333px #ffbf00, 240px -295.6666666667px                #00d0ff, 138px -382.6666666667px #c8ff00, 172px -178.6666666667px                #ff0048, 143px -343.6666666667px #ffae00, -19px 27.3333333333px                #ff00d0, 189px 45.3333333333px #eeff00, 151px -387.6666666667px                #d500ff, 162px -67.6666666667px #00ffa2, -34px -360.6666666667px                #ffe600, 179px -411.6666666667px #0066ff, 125px -123.6666666667px                #ccff00, -111px 54.3333333333px #00aeff, -195px -16.6666666667px                #2200ff, 118px 34.3333333333px #ff003c, -120px -303.6666666667px                #0900ff, -62px -399.6666666667px #33ff00, -84px -396.6666666667px                #ff004d, -204px 33.3333333333px #00ff55, -58px -248.6666666667px                #eaff00, 19px -8.6666666667px #ff4800, -111px -266.6666666667px                #3cff00, -132px -221.6666666667px #0044ff, 181px -35.6666666667px                #b700ff, -229px -47.6666666667px #00ffc4, -174px -70.6666666667px                #c4ff00, 146px -139.6666666667px #4000ff;          }        }        @-webkit-keyframes gravity {          to {            transform: translateY(200px);            -moz-transform: translateY(200px);            -webkit-transform: translateY(200px);            -o-transform: translateY(200px);            -ms-transform: translateY(200px);            opacity: 0;          }        }        @-moz-keyframes gravity {          to {            transform: translateY(200px);            -moz-transform: translateY(200px);            -webkit-transform: translateY(200px);            -o-transform: translateY(200px);            -ms-transform: translateY(200px);            opacity: 0;          }        }        @-o-keyframes gravity {          to {            transform: translateY(200px);            -moz-transform: translateY(200px);            -webkit-transform: translateY(200px);            -o-transform: translateY(200px);            -ms-transform: translateY(200px);            opacity: 0;          }        }        @-ms-keyframes gravity {          to {            transform: translateY(200px);            -moz-transform: translateY(200px);            -webkit-transform: translateY(200px);            -o-transform: translateY(200px);            -ms-transform: translateY(200px);            opacity: 0;          }        }        @keyframes gravity {          to {            transform: translateY(200px);            -moz-transform: translateY(200px);            -webkit-transform: translateY(200px);            -o-transform: translateY(200px);            -ms-transform: translateY(200px);            opacity: 0;          }        }        @-webkit-keyframes position {          0%,          19.9% {            margin-top: 10%;            margin-left: 40%;          }          20%,          39.9% {            margin-top: 40%;            margin-left: 30%;          }          40%,          59.9% {            margin-top: 20%;            margin-left: 70%;          }          60%,          79.9% {            margin-top: 30%;            margin-left: 20%;          }          80%,          99.9% {            margin-top: 30%;            margin-left: 80%;          }        }        @-moz-keyframes position {          0%,          19.9% {            margin-top: 10%;            margin-left: 40%;          }          20%,          39.9% {            margin-top: 40%;            margin-left: 30%;          }          40%,          59.9% {            margin-top: 20%;            margin-left: 70%;          }          60%,          79.9% {            margin-top: 30%;            margin-left: 20%;          }          80%,          99.9% {            margin-top: 30%;            margin-left: 80%;          }        }        @-o-keyframes position {          0%,          19.9% {            margin-top: 10%;            margin-left: 40%;          }          20%,          39.9% {            margin-top: 40%;            margin-left: 30%;          }          40%,          59.9% {            margin-top: 20%;            margin-left: 70%;          }          60%,          79.9% {            margin-top: 30%;            margin-left: 20%;          }          80%,          99.9% {            margin-top: 30%;            margin-left: 80%;          }        }        @-ms-keyframes position {          0%,          19.9% {            margin-top: 10%;            margin-left: 40%;          }          20%,          39.9% {            margin-top: 40%;            margin-left: 30%;          }          40%,          59.9% {            margin-top: 20%;            margin-left: 70%;          }          60%,          79.9% {            margin-top: 30%;            margin-left: 20%;          }          80%,          99.9% {            margin-top: 30%;            margin-left: 80%;          }        }        @keyframes position {          0%,          19.9% {            margin-top: 10%;            margin-left: 40%;          }          20%,          39.9% {            margin-top: 40%;            margin-left: 30%;          }          40%,          59.9% {            margin-top: 20%;            margin-left: 70%;          }          60%,          79.9% {            margin-top: 30%;            margin-left: 20%;          }          80%,          99.9% {            margin-top: 30%;            margin-left: 80%;          }        }      }      .pyro {        z-index: 3;        inset: 0;        width: 100vw;        margin: auto;        position: fixed;        display: none;        pointer-events: none;      }      .ttt-winner {        --_hue-rotation: hue-rotate(345deg);        position: absolute;        inset: 0;        top: 15rem;        margin: auto;        margin-top: 0;        justify-self: center;        aspect-ratio: 1.2;        display: grid;        /**/        display: none;        /**/        overflow: hidden;        box-shadow: var(--shadow-6);        z-index: 1;        cursor: pointer;        max-width: min(12rem, 100%);        height: auto;        object-fit: cover;        /** filter: hue-rotate(200deg);  filter: hue-rotate(345deg);  filter: var(--_hue-rotation); /**/        transition: opacity 0.3s var(--back-out), filter 0.3s var(--back-out);      }      @starting-style {        .ttt-winner {          opacity: 0;        }      }      .ttt-winner:hover,      .ttt-winner:focus-visible {        /**/        filter: grayscale(1);        /**/        opacity: 0.4;        opacity: 0.75;      }      .ttt-winner:focus-visible {        outline: dashed 2px currentcolor;        outline-offset: -4px;      }      .ttt-winner.not-shown {        opacity: 0;        pointer-events: none;      }      /* Theme Picker */      /**/      *:has(.theme-picker) {        position: static;      }      /**/      /**/      html:has(.theme-picker) {        position: relative;      }      /**/      .theme-picker {        --color-picker-bg: var(--primary-vivid, #88888860);        --color-picker-color: var(--surface-base);        --color-picker-hover-color: var(--surface-min);        --color-picker-shadow: var(--shadow-1);        list-style: none;        padding: 0;        margin: 0;        text-align: right;        position: fixed;        position: absolute;        top: auto;        top: 45px;        right: 45px;        z-index: 3;        /* border: solid 1px; */        display: grid;        justify-items: end;        align-items: center;        gap: 0.5rem;        min-width: 85px;        /* Hide initially, show when JS loads */        /* &:hover:focus-within {    gap: 0;    .picker-label {      display: none;    }  } */        /* Only show the next option */        transition: top 0.3s ease-in-out, right 0.3s ease-in-out;      }      .theme-picker:not(:focus-within) {        opacity: 0;        pointer-events: none;      }      .theme-picker > *:not(:nth-child(2)) {        display: none;      }      .theme-picker button {        /* https://www.trysmudford.com/blog/a-good-reset/ */        -webkit-appearance: none;        box-shadow: none;        cursor: pointer;        /**/        border: 0;        /**/        margin: 0;        border-radius: 2em;        min-height: 2.2rem;        min-width: 2.2rem;        display: grid;        place-content: center;        grid-template-columns: 1fr auto;        align-items: center;        justify-content: center;        justify-items: center;        gap: 0.5ch;        padding: 0.5em 1ch;        line-height: 1;        background-color: var(--color-picker-bg);        color: var(--color-picker-color);        font-size: inherit;        font-family: system-ui, serif;        box-shadow: var(--color-picker-shadow);        transition: padding 0.8s cubic-bezier(0.5, 0.75, 0.75, 1.25), gap 0.4s            cubic-bezier(0.5, 0.75, 0.75, 1.25),          margin 0.4s cubic-bezier(0.5, 0.75, 0.75, 1.25), border-radius 0.2s            cubic-bezier(0.5, 0.75, 0.75, 1.25);      }      .theme-picker button:hover {        color: var(--color-picker-hover-color);        /**border-radius: 6px;/**/        margin-right: -3px;      }      .theme-picker button:active {        /** filter: invert(1) hue-rotate(180deg); /**/        color: var(--color-picker-color);        /**border-radius: 8px;/**/        cursor: wait;      }      .theme-picker button .icon {        text-align: center;        width: 1em;        height: 1em;        display: grid;        place-content: center;        padding-inline: 0;        padding: 0.1em;      }      .theme-picker button .picker-label {        transition: all 0.3s ease-in-out;        padding-inline: 0.25em 0.15em;      }      .theme-picker:not(:is(:hover, :focus-within)) button {        gap: 0;      }      .theme-picker:not(:is(:hover, :focus-within)) button > *:not(.icon) {        display: none;      }      @media (width < 890px) {        .theme-picker {          /* outline: solid 1px red; */          top: 0.5rem;          right: 0.5rem;          /**/          scale: 0.75;          /**/        }      }      .hover-slide {        background: linear-gradient(var(--player-clr) 0 0) var(--p, 0) / var(            --p,            0          )          no-repeat;        padding-inline: 0.07em;        text-decoration: none;        display: inline-block;        width: max-content;        transition: 0.4s, background-position 0s;      }      .hover-slide:hover {        --p: 100%;        color: light-dark(#000, #fff) !important;      }      .built-by {        font-family: 'Georgia';        text-decoration: none;        font-size: 1.05em;        color: currentcolor;        white-space: nowrap;      }      .info-game {        font-size: 0.75em;        text-align: center;        color: #888;        display: flex;        gap: 0.25rem;        flex-wrap: wrap;        margin-block: 0.25rem;      }      .marked {        opacity: 0;        transition: opacity 0.6s var(--back-out);      }      .game-status {        max-height: 1rem;      }      .player-2,      .player-1 {        font-family: system-ui;      }    </style>  </head>  <body>    <div class="overlay-content">    <table class="xo shiny-edges">      <tr>        <td tabindex="0">&nbsp;</td>        <td tabindex="0"></td>        <td tabindex="0"></td>      </tr>      <tr>        <td tabindex="0">&nbsp;</td>        <td tabindex="0"></td>        <td tabindex="0"></td>      </tr>      <tr>        <td tabindex="0">&nbsp;</td>        <td tabindex="0"></td>        <td tabindex="0"></td>      </tr>    </table>    <footer>      <div class="game-status">        <div class="turn">          <span class="player-1"><b>⨯</b> </span>          <span class="player-2"><i>⭘</i> </span>        </div>      </div>      <button class="reset-btn">        <span class="reset">重新开始</span>        <span class="new-game">新游戏</span>      </button>    </footer>    <div class="pyro">      <div class="before"></div>      <div class="after"></div>    </div>    </div>    <script>      const grid = document.querySelector('.xo');      document.addEventListener('mousemove', (e) => {        grid.style.setProperty('--x', e.x + 'px');        grid.style.setProperty('--y', e.y + 'px');      });      class LimitedArray {        constructor(maxLength) {          this.maxLength = maxLength;          this.items = [];        }        add(content, row, column) {          // remove item          if (this.items.length >= this.maxLength) {            const removedItem = this.items.shift();            // console.log(removedItem.row, removedItem.column, "emptied");            this.disappear(removedItem.row, removedItem.column);          }          // .remaining-life          // fade out items (mark for removal)          let item;          if (this.items.length === 1) {            item = this.items.at(0);            if (item) this.fadeOut3(item.row, item.column);          }          if (this.items.length === 2) {            item = this.items.at(1);            if (item) this.fadeOut3(item.row, item.column);          }          if (this.items.length === 3) {            item = this.items.at(0);            if (item) this.fadeOut2(item.row, item.column);            item = this.items.at(2);            if (item) this.fadeOut3(item.row, item.column);          }          if (this.items.length === 4) {            item = this.items.at(1);            if (item) this.fadeOut2(item.row, item.column);            item = this.items.at(3);            if (item) this.fadeOut3(item.row, item.column);          }          if (this.items.length === 5) {            item = this.items.at(0);            if (item) this.fadeOut(item.row, item.column);            item = this.items.at(2);            if (item) this.fadeOut2(item.row, item.column);            item = this.items.at(4);            if (item) this.fadeOut3(item.row, item.column);          }          if (this.items.length === 6) {            item = this.items.at(1);            if (item) this.fadeOut(item.row, item.column);            item = this.items.at(3);            if (item) this.fadeOut2(item.row, item.column);            item = this.items.at(5);            if (item) this.fadeOut3(item.row, item.column);          }          // add item          this.items.push({ content, row, column });          // console.log(this.items);        }        getItems() {          return this.items;        }        size() {          return this.items.length;        }        reset() {          this.items = [];        }        // disappear(row, column) {        // const el = document.querySelector(`table tr:nth-child(${row}) td:nth-child(${column})`);        // el.innerHTML = "&nbsp;";        // }        disappear(row, column) {          const el = document.querySelector(            `table tr:nth-child(${row}) td:nth-child(${column})`          );          const content = el.querySelector(':is(b,i)');          content.classList.add('marked');          setTimeout(() => {            // Set a timeout to allow the CSS transition to take effect            // Wait for the opacity animation to finish            content.addEventListener(              'transitionend',              () => {                // Set the innerHTML to a space after the animation is complete                el.innerHTML = '&nbsp;';              },              { once: true }            ); // listener is removed after it fires 1          }, 0); // Use a timeout to allow the class addition to take effect        }        fadeOut(row, column) {          const el = document.querySelector(            `table tr:nth-child(${row}) td:nth-child(${column}) > :is(b,i)`          );          el.classList.add('fade-out');          // el.classList.remove("fade-out-2");          el.closest('td').querySelector('.remaining-life').innerHTML = `      <div class="circle outlined"></div>      <div class="circle outlined"></div>      <div class="circle outlined"></div>`;        }        fadeOut2(row, column) {          const el = document.querySelector(            `table tr:nth-child(${row}) td:nth-child(${column}) > :is(b,i)`          );          // el.classList.add("fade-out-2");          el.closest('td').querySelector('.remaining-life').innerHTML = `      <div class="circle filled"></div>      <div class="circle outlined"></div>      <div class="circle outlined"></div>`;        }        fadeOut3(row, column) {          const el = document.querySelector(            `table tr:nth-child(${row}) td:nth-child(${column}) > :is(b,i)`          );          // el.classList.add("fade-out-2");          el.closest('td').querySelector('.remaining-life').innerHTML = `      <div class="circle filled"></div>      <div class="circle filled"></div>      <div class="circle outlined"></div>`;        }      }      const moves = new LimitedArray(6);      const table = document.querySelector('table.xo');      document.querySelectorAll('.xo td').forEach((item, index) => {        item.addEventListener('click', function (e) {          const el = e.target.closest('td');          if (el.querySelector(':is(b,i)')) return;          let player2sTurn = table.classList.contains('player-2s-turn');          let content = player2sTurn ? '<i>⭘</i>' : '<b>⨯</b>';          content += `<div class="remaining-life">      <div class="circle filled"></div>      <div class="circle filled"></div>      <div class="circle filled"></div>    </div>`;          table.classList.toggle('player-2s-turn');          const row = Math.floor(index / 3) + 1;          const column = (index % 3) + 1;          moves.add(content, row, column);          // console.log(row, column, "filled");          el.innerHTML = content;        });        // keyboard        item.addEventListener('keydown', function (e) {          const el = e.target.closest('td');          // Handle click actions for space and enter keys          if (e.key === ' ' || e.key === 'Enter') {            // if (el.querySelector(":is(b,i)")) {            //   return;            // }            el.click();            e.preventDefault();            return;          }          // Handle Keyboard Navigation          const actieEl = document.activeElement;          const row = actieEl.parentElement.rowIndex + 1;          const col = actieEl.cellIndex + 1;          // Function to get the next cell based on row and column adjustments          const getNextCell = (rowAdjustment, colAdjustment) => {            const newRow = ((row + rowAdjustment - 1 + 3) % 3) + 1; // Wrap around rows            const newCol = ((col + colAdjustment - 1 + 3) % 3) + 1; // Wrap around columns            return document.querySelector(              `.xo tr:nth-child(${newRow}) td:nth-child(${newCol})`            );          };          // Directional mapping for navigation keys          const directionMap = {            ArrowDown: [1, 0],            ArrowUp: [-1, 0],            ArrowLeft: [0, -1],            ArrowRight: [0, 1],            w: [-1, 0],            s: [1, 0],            a: [0, -1],            d: [0, 1],          };          const adjustment = directionMap[e.key];          if (adjustment) {            getNextCell(adjustment[0], adjustment[1]).focus();            e.preventDefault();          }        });        // mousedown        // item.addEventListener("mousedown", function(e) {        // const el = e.target.closest("td");        // el.click();        // });      });      // buttons      document.querySelector('.reset-btn').addEventListener('click', (e) => {        document.querySelectorAll('.xo td').forEach((item) => {          item.innerHTML = '&nbsp;';          table.classList.remove('player-2s-turn');          moves.reset();          document.querySelector('.not-shown')?.classList.remove('not-shown');        });      });      // display winner gif      document        .querySelector('.ttt-winner')        ?.addEventListener('click', function (e) {          const el = e.target.closest('img');          el.classList.add('not-shown');          document.querySelector('.pyro').style.opacity = 0;        });      document        .querySelector('.ttt-winner')        ?.addEventListener('keydown', function (e) {          const el = e.target.closest('img');          if (e.key === ' ' || e.key === 'Enter') {            el.click();            e.preventDefault();            return;          }        });      // init theme picker      const initialTheme = localStorage.getItem('theme') ?? 'dark';      if (initialTheme) {        const el = document.documentElement;        // const currentScheme = el.style.colorScheme || "light";        if (initialTheme === 'light dark') {          el.style.colorScheme = 'light dark';        } else if (initialTheme === 'light') {          el.style.colorScheme = 'light';        } else {          el.style.colorScheme = 'dark';        }      }      // theme picker events      const themePicker = document.querySelector('.theme-picker');      themePicker.style.opacity = 'unset';      themePicker.style.pointerEvents = 'unset';      themePicker.addEventListener('click', function (event) {        const clickedButton = event.target.closest('button');        if (clickedButton) {          const buttons = Array.from(themePicker.querySelectorAll('button'));          const clickedIndex = buttons.indexOf(clickedButton);          const reorderedButtons = buttons            .slice(clickedIndex)            .concat(buttons.slice(0, clickedIndex));          themePicker.innerHTML = ''; // Clear the existing list          reorderedButtons.forEach((button) => {            themePicker              .appendChild(document.createElement('li'))              .appendChild(button);          });          // Focus on the next option          let nextOption = themePicker.querySelector(            '& > *:nth-child(2) button'          );          nextOption.focus();          // Remove that focus if a mouse was          // (presumably) used and now it's leaving          nextOption.addEventListener('mouseleave', function () {            this.blur();          });          let theme = clickedButton.classList.contains('picker-light')            ? 'dark'            : 'light';          if (clickedButton.classList.contains('picker-auto')) theme = 'auto';          const el = document.documentElement;          const currentScheme = el.style.colorScheme || 'light';          // console.log(currentScheme)          if (theme === 'auto') {            el.style.colorScheme = 'light dark';            // localStorage.removeItem('theme');            localStorage.setItem('theme', 'light dark');          } else {            if (theme === 'light') {              el.style.colorScheme = 'dark';              localStorage.setItem('theme', 'dark');            } else {              el.style.colorScheme = 'light';              localStorage.setItem('theme', 'light');            }          }        }      });    </script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E5%88%AB%E7%82%B9%E7%8C%AB%E7%8C%AB.html"/>
      <url>/HEXO/html/%E5%88%AB%E7%82%B9%E7%8C%AB%E7%8C%AB.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="utf-8" />    <title>别点这只喵咪</title>    <style>      body{font-family:'Helvetica Neue';font-weight:300;color:#000;}a{color:#000;text-decoration:none;}ul{list-style:none;}li{padding:15px;}.container{width:400px;margin:0 auto;background:#fff;padding-top:120px;}.cat{width:400px;height:200px;margin:0 auto;background:#fff;position:relative;cursor:pointer;}.hidden{display:none;}.block{display:block !important;}.catHead{width:100px;height:71px;background:transparent;position:absolute;top:15px;left:150px;border-top:4px solid #222;border-left:3px solid transparent;border-right:3px solid transparent;border-radius:35% 35% 10px 11px;transform:rotate(15deg);z-index:1;}.catHead:before{content:'';display:block;width:30px;height:55px;background:transparent;position:absolute;top:29px;left:110px;border-right:4px solid #000;border-radius:0 0 50%/50px 20px;transform:rotate(-45deg);}.catHead:after{content:'';display:block;width:30px;height:55px;background:transparent;position:absolute;top:9px;right:95px;border-left:4px solid #000;border-radius:50%/50px 20px 0 0;transform:rotate(25deg);}.catEars{width:18px;height:18px;background:#fff;border-left:3px solid #000;border-top:4px solid #000;transform:rotate(35deg);position:absolute;left:150px;top:5px;border-radius:15% 0 0 10%;z-index:2;}.catEars:before{content:'';height:23px;background:#fff;border-left:4px solid #000;transform:rotate(35deg);position:absolute;left:98px;bottom:43px;border-radius:0 0 0 20%;}.rightEar{display:block;background:transparent;width:2px;height:15px;border-right:4px solid #000;position:absolute;left:106px;bottom:50px;transform:rotate(-40deg);border-radius:10% 10% 30% 10%;}.rightEar:before{content:'';width:5px;height:13px;border-right:4px solid #000;transform:rotate(10deg);position:absolute;left:-4px;top:13px;border-radius:10% 10% 30% 10%;}.rightEar:after{content:'';width:5px;height:10px;border-right:4px solid #000;transform:rotate(9deg);position:absolute;left:-6px;top:25px;border-radius:10% 10% 30% 10%;}.face{width:9px;height:9px;border-radius:50%;background:#000;position:absolute;left:140px;top:50px;}.face:before{content:'';display:block;width:9px;height:9px;border-radius:50%;background:#000;position:absolute;left:60px;top:15px;}.mouth{display:block;width:10px;height:8px;position:absolute;left:15px;top:0ps;transform:rotate(45deg);border-radius:50%;border:3px solid #000;border-left-color:transparent;border-top-color:transparent;}.mouth:before{content:'';display:block;width:10px;height:8px;position:absolute;left:9px;top:-10px;transform:rotate(20deg);border-radius:50%;border:3px solid #000;border-left-color:transparent;border-top-color:transparent;}.leftPaw{width:25px;height:30px;background:#fff;border:4px solid #000;border-bottom:0 solid transparent;border-right:0 solid transparent;border-radius:50% 40% 0 0;position:absolute;left:90px;top:40px;transform:rotate(-20deg);z-index:2;}.leftPaw:before{content:'';display:block;width:3px;height:15px;background:#000;border-radius:100% 0 0 0;position:absolute;left:24px;top:4px;transform:rotate(-20deg);}.rightPaw{width:25px;height:30px;background:#fff;border:3px solid #000;border-bottom:0 solid transparent;border-right:0 solid transparent;border-radius:50% 40% 0 0;position:absolute;left:222px;top:60px;transform:rotate(-20deg);z-index:2;}.rightPaw:before{content:'';display:block;width:3px;height:15px;background:#000;border-radius:100% 0 0 0;position:absolute;left:23px;top:2px;transform:rotate(-23deg);}.surface{width:350px;height:50px;background:#fff;border-top:3px solid #000;transform:rotate(10deg);position:absolute;top:215px;z-index:3;}.inner-wrapper{padding-top:6px;display:flex;}.paws{display:block;width:8px;height:10px;background:#f19ba5;border-radius:50% 50% 30% 30%;position:absolute;top:9px;left:7px;}.circles{display:block;width:5px;height:4px;background:#f19ba5;border-radius:50% 50% 30% 30%;position:absolute;top:-3px;left:8px;}.circles:before{content:'';display:block;width:4px;height:4px;background:#f19ba5;border-radius:50% 50% 30% 30%;position:absolute;top:-3px;left:-6px;}.circles:after{content:'';display:block;width:4px;height:4px;background:#f19ba5;border-radius:50% 30%;position:absolute;top:1px;left:-12px;}i{font-size:24px;font-weight:800;color:#abbac6;position:relative;left:80px;padding:10px 100px 10px 0;}.rotate{transform:scale(1,-1);}.red{color:red;}.green{color:limegreen;}.leftPaw2{width:40px;height:28px;background:#fff;border:4px solid #000;border-bottom:0 solid transparent;border-right:0 solid transparent;border-radius:50% 4px 50% 50%;position:absolute;left:87px;top:58px;transform:rotate(-43deg);z-index:4;}.leftPaw2:before{content:'';display:block;width:30px;height:5px;background:#fff;border-bottom:4px solid #000;border-radius:50% 4px 50% 50%;position:absolute;top:20px;transform:rotate(20deg);}.rightPaw2{width:45px;height:24px;background:#fff;border-bottom:3px solid #000;border-left:3px solid #000;border-radius:50% 4px 0 40%;position:absolute;left:207px;top:85px;transform:rotate(-23deg);z-index:4;}.rightPaw2:before{content:'';display:block;width:20px;height:5px;background:#fff;border-top:3px solid #000;border-radius:50% 4px 50% 50%;position:absolute;top:0px;left:2px;transform:rotate(-20deg);}.author{font-size:10px;position:relative;top:-50px;left:250px;}</style>  </head>  <body>    <div class="container"><div class="cat"onclick="hello()"><div class="catHead"></div><div class="catEars"><span class="rightEar"></span></div><div class="face"><span class="mouth"></span></div><div id="leftPaw"class="leftPaw"><span id="paws"class="paws"><span id="circles"class="circles"></span></span></div><div id="rightPaw"class="rightPaw"><span id="rpaws"class="paws"><span id="rcircles"class="circles"></span></span></div></div><div class="surface"></div></div>    <script>function hello(){const x=5;const leftPaw=document.getElementById('leftPaw').classList;const rightPaw=document.getElementById('rightPaw').classList;const paws=document.getElementById('paws').classList;const circles=document.getElementById('circles').classList;const rpaws=document.getElementById('rpaws').classList;const rcircles=document.getElementById('rcircles').classList;leftPaw.toggle('leftPaw');rightPaw.toggle('rightPaw');paws.toggle('paws');circles.toggle('circles');rpaws.toggle('paws');rcircles.toggle('circles');leftPaw.toggle('leftPaw2');rightPaw.toggle('rightPaw2')}</script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E5%A4%AA%E9%98%B3%E7%B3%BB.html"/>
      <url>/HEXO/html/%E5%A4%AA%E9%98%B3%E7%B3%BB.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>太阳系星辰版</title>    <style>      *,      *:before,      *:after {        padding: 0;        margin: 0;        box-sizing: border-box;      }      .overlay-content       {        position: fixed;        top: 0;        left: 0;        width: 100vw;        height: 100vh;        z-index: 99999; /* 非常高的值以确保覆盖全局 */        background-color: black; /* 根据需要设置背景色 */        overflow: auto; /* 允许内容滚动 */      }      html,      body {        height: 100%;        width: 100%;      }      body {        font: normal 1em/1.45em 'Helvetica Neue', Helvetica, Arial, sans-serif;        -webkit-font-smoothing: antialiased;        color: #fff;        background: radial-gradient(          ellipse at bottom,          #1c2837 0%,          #050608 100%        );        background-attachment: fixed;      }      .solar-syst {        margin: 0 auto;        width: 100%;        height: 100%;        position: relative;      }      .solar-syst:after {        content: '';        position: absolute;        height: 2px;        width: 2px;        top: -2px;        background: white;        box-shadow: 998px 678px 0 0px rgba(255, 255, 255, 0.99),          1333px 562px 0 0px rgba(255, 255, 255, 0.596),          821px 871px 0 0px rgba(255, 255, 255, 0.955),          1194px 1607px 0 0px rgba(255, 255, 255, 0.706),          1057px 1109px 0 0px rgba(255, 255, 255, 0.61),          1207px 528px 0 0px rgba(255, 255, 255, 0.813),          138px 1000px 0 0px rgba(255, 255, 255, 0.234),          958px 1414px 0 0px rgba(255, 255, 255, 0.953),          1294px 673px 0 0px rgba(255, 255, 255, 0.02),          487px 65px 0 0px rgba(255, 255, 255, 0.426),          1645px 46px 0 0px rgba(255, 255, 255, 0.168),          1001px 1082px 0 0px rgba(255, 255, 255, 0.694),          449px 910px 0 0px rgba(255, 255, 255, 0.947),          1771px 1345px 0 0px rgba(255, 255, 255, 0.088),          209px 1485px 0 0px rgba(255, 255, 255, 0.755),          373px 1076px 0 0px rgba(255, 255, 255, 0.434),          1120px 18px 0 0px rgba(255, 255, 255, 0.371),          258px 1399px 0 0px rgba(255, 255, 255, 0.657),          14px 1117px 0 0px rgba(255, 255, 255, 0.637),          533px 226px 0 0px rgba(255, 255, 255, 0.609),          1795px 473px 0 0px rgba(255, 255, 255, 0.694),          377px 578px 0 0px rgba(255, 255, 255, 0.793),          1791px 795px 0 0px rgba(255, 255, 255, 0.259),          1442px 1486px 0 0px rgba(255, 255, 255, 0.038),          195px 1735px 0 0px rgba(255, 255, 255, 0.263),          157px 188px 0 0px rgba(255, 255, 255, 0.039),          697px 1320px 0 0px rgba(255, 255, 255, 0.772),          1028px 637px 0 0px rgba(255, 255, 255, 0.3),          1107px 884px 0 0px rgba(255, 255, 255, 0.219),          870px 554px 0 0px rgba(255, 255, 255, 0.944),          1398px 984px 0 0px rgba(255, 255, 255, 0.166),          1488px 1101px 0 0px rgba(255, 255, 255, 0.565),          1122px 950px 0 0px rgba(255, 255, 255, 0.7),          206px 1016px 0 0px rgba(255, 255, 255, 0.445),          589px 560px 0 0px rgba(255, 255, 255, 0.685),          803px 466px 0 0px rgba(255, 255, 255, 0.982),          1357px 1501px 0 0px rgba(255, 255, 255, 0.822),          28px 1144px 0 0px rgba(255, 255, 255, 0.268),          747px 1280px 0 0px rgba(255, 255, 255, 0.022),          809px 489px 0 0px rgba(255, 255, 255, 0.565),          127px 1586px 0 0px rgba(255, 255, 255, 0.451),          1111px 451px 0 0px rgba(255, 255, 255, 0.739),          1777px 242px 0 0px rgba(255, 255, 255, 0.796),          1689px 1454px 0 0px rgba(255, 255, 255, 0.604),          1407px 361px 0 0px rgba(255, 255, 255, 0.711),          1385px 889px 0 0px rgba(255, 255, 255, 0.366),          1618px 1482px 0 0px rgba(255, 255, 255, 0.756),          753px 60px 0 0px rgba(255, 255, 255, 0.567),          233px 1663px 0 0px rgba(255, 255, 255, 0.715),          555px 664px 0 0px rgba(255, 255, 255, 0.039),          1085px 1452px 0 0px rgba(255, 255, 255, 0.982),          247px 1405px 0 0px rgba(255, 255, 255, 0.629),          1544px 1543px 0 0px rgba(255, 255, 255, 0.156),          68px 1509px 0 0px rgba(255, 255, 255, 0.162),          129px 221px 0 0px rgba(255, 255, 255, 0.75),          1212px 1753px 0 0px rgba(255, 255, 255, 0.295),          1784px 7px 0 0px rgba(255, 255, 255, 0.416),          1246px 790px 0 0px rgba(255, 255, 255, 0.982),          1393px 791px 0 0px rgba(255, 255, 255, 0.554),          453px 802px 0 0px rgba(255, 255, 255, 0.048),          1768px 1278px 0 0px rgba(255, 255, 255, 0.695),          162px 167px 0 0px rgba(255, 255, 255, 0.039),          1410px 1290px 0 0px rgba(255, 255, 255, 0.148),          61px 1121px 0 0px rgba(255, 255, 255, 0.058),          543px 74px 0 0px rgba(255, 255, 255, 0.378),          192px 676px 0 0px rgba(255, 255, 255, 0.588),          1327px 963px 0 0px rgba(255, 255, 255, 0.935),          1303px 808px 0 0px rgba(255, 255, 255, 0.049),          1404px 35px 0 0px rgba(255, 255, 255, 0.766),          1228px 1566px 0 0px rgba(255, 255, 255, 0.468),          646px 1772px 0 0px rgba(255, 255, 255, 0.68),          1362px 20px 0 0px rgba(255, 255, 255, 0.117),          1105px 822px 0 0px rgba(255, 255, 255, 0.209),          1213px 15px 0 0px rgba(255, 255, 255, 0.508),          360px 1445px 0 0px rgba(255, 255, 255, 0.415),          355px 825px 0 0px rgba(255, 255, 255, 0.205),          657px 644px 0 0px rgba(255, 255, 255, 0.157),          1593px 487px 0 0px rgba(255, 255, 255, 0.664),          500px 948px 0 0px rgba(255, 255, 255, 0.183),          1112px 13px 0 0px rgba(255, 255, 255, 0.447),          603px 1773px 0 0px rgba(255, 255, 255, 0.297),          236px 663px 0 0px rgba(255, 255, 255, 0.453),          578px 172px 0 0px rgba(255, 255, 255, 0.278),          703px 1025px 0 0px rgba(255, 255, 255, 0.105),          633px 1685px 0 0px rgba(255, 255, 255, 0.771),          1101px 128px 0 0px rgba(255, 255, 255, 0.374),          1600px 1599px 0 0px rgba(255, 255, 255, 0.096),          1309px 176px 0 0px rgba(255, 255, 255, 0.709),          1570px 1063px 0 0px rgba(255, 255, 255, 0.257),          345px 68px 0 0px rgba(255, 255, 255, 0.464),          581px 358px 0 0px rgba(255, 255, 255, 0.047),          12px 581px 0 0px rgba(255, 255, 255, 0.949),          773px 451px 0 0px rgba(255, 255, 255, 0.506),          59px 1750px 0 0px rgba(255, 255, 255, 0.624),          139px 1583px 0 0px rgba(255, 255, 255, 0.893),          1px 576px 0 0px rgba(255, 255, 255, 0.797),          274px 723px 0 0px rgba(255, 255, 255, 0.722),          1253px 1599px 0 0px rgba(255, 255, 255, 0.253),          135px 1601px 0 0px rgba(255, 255, 255, 0.845),          1111px 311px 0 0px rgba(255, 255, 255, 0.929),          764px 1377px 0 0px rgba(255, 255, 255, 0.541),          1142px 1307px 0 0px rgba(255, 255, 255, 0.796),          895px 877px 0 0px rgba(255, 255, 255, 0.137),          112px 674px 0 0px rgba(255, 255, 255, 0.551),          299px 967px 0 0px rgba(255, 255, 255, 0.266),          1536px 790px 0 0px rgba(255, 255, 255, 0.908),          521px 167px 0 0px rgba(255, 255, 255, 0.462),          951px 1533px 0 0px rgba(255, 255, 255, 0.503),          201px 1575px 0 0px rgba(255, 255, 255, 0.99),          1132px 1689px 0 0px rgba(255, 255, 255, 0.097),          1435px 1082px 0 0px rgba(255, 255, 255, 0.475),          1741px 753px 0 0px rgba(255, 255, 255, 0.577),          562px 1649px 0 0px rgba(255, 255, 255, 0.135),          1308px 299px 0 0px rgba(255, 255, 255, 0.619),          377px 1258px 0 0px rgba(255, 255, 255, 0.316),          19px 26px 0 0px rgba(255, 255, 255, 0.858),          1386px 347px 0 0px rgba(255, 255, 255, 0.504),          18px 313px 0 0px rgba(255, 255, 255, 0.677),          1334px 613px 0 0px rgba(255, 255, 255, 0.251),          774px 1077px 0 0px rgba(255, 255, 255, 0.795),          878px 1632px 0 0px rgba(255, 255, 255, 0.327),          1354px 580px 0 0px rgba(255, 255, 255, 0.918),          1709px 545px 0 0px rgba(255, 255, 255, 0.992),          867px 482px 0 0px rgba(255, 255, 255, 0.398),          1304px 1399px 0 0px rgba(255, 255, 255, 0.265),          777px 1424px 0 0px rgba(255, 255, 255, 0.558),          128px 818px 0 0px rgba(255, 255, 255, 0.844),          346px 13px 0 0px rgba(255, 255, 255, 0.832),          474px 54px 0 0px rgba(255, 255, 255, 0.482),          736px 375px 0 0px rgba(255, 255, 255, 0.903),          238px 1202px 0 0px rgba(255, 255, 255, 0.229),          363px 442px 0 0px rgba(255, 255, 255, 0.987),          668px 927px 0 0px rgba(255, 255, 255, 0.972),          1645px 1174px 0 0px rgba(255, 255, 255, 0.55),          1170px 995px 0 0px rgba(255, 255, 255, 0.491),          676px 1039px 0 0px rgba(255, 255, 255, 0.954),          195px 304px 0 0px rgba(255, 255, 255, 0.866),          129px 1423px 0 0px rgba(255, 255, 255, 0.229),          1005px 731px 0 0px rgba(255, 255, 255, 0.439),          394px 865px 0 0px rgba(255, 255, 255, 0.19),          386px 509px 0 0px rgba(255, 255, 255, 0.614),          1281px 960px 0 0px rgba(255, 255, 255, 0.029),          1067px 1158px 0 0px rgba(255, 255, 255, 0.92),          295px 549px 0 0px rgba(255, 255, 255, 0.533),          728px 699px 0 0px rgba(255, 255, 255, 0.798),          929px 362px 0 0px rgba(255, 255, 255, 0.649),          404px 183px 0 0px rgba(255, 255, 255, 0.488),          622px 482px 0 0px rgba(255, 255, 255, 0.466),          123px 1209px 0 0px rgba(255, 255, 255, 0.965),          625px 699px 0 0px rgba(255, 255, 255, 0.882),          635px 1557px 0 0px rgba(255, 255, 255, 0.74),          1278px 902px 0 0px rgba(255, 255, 255, 0.009),          630px 706px 0 0px rgba(255, 255, 255, 0.244),          1516px 599px 0 0px rgba(255, 255, 255, 0.432),          160px 1689px 0 0px rgba(255, 255, 255, 0.149),          112px 38px 0 0px rgba(255, 255, 255, 0.537),          1739px 1291px 0 0px rgba(255, 255, 255, 0.043),          935px 404px 0 0px rgba(255, 255, 255, 0.194),          414px 1389px 0 0px rgba(255, 255, 255, 0.788),          951px 320px 0 0px rgba(255, 255, 255, 0.184),          1393px 662px 0 0px rgba(255, 255, 255, 0.974),          1695px 1019px 0 0px rgba(255, 255, 255, 0.265),          61px 292px 0 0px rgba(255, 255, 255, 0.914),          1711px 358px 0 0px rgba(255, 255, 255, 0.156),          120px 1166px 0 0px rgba(255, 255, 255, 0.052),          1768px 1684px 0 0px rgba(255, 255, 255, 0.116),          1496px 431px 0 0px rgba(255, 255, 255, 0.272),          1240px 302px 0 0px rgba(255, 255, 255, 0.364),          1189px 290px 0 0px rgba(255, 255, 255, 0.824),          1538px 612px 0 0px rgba(255, 255, 255, 0.754),          240px 349px 0 0px rgba(255, 255, 255, 0.229),          974px 645px 0 0px rgba(255, 255, 255, 0.58),          1440px 950px 0 0px rgba(255, 255, 255, 0.189),          1656px 166px 0 0px rgba(255, 255, 255, 0.862),          1258px 1750px 0 0px rgba(255, 255, 255, 0.294),          533px 1475px 0 0px rgba(255, 255, 255, 0.532),          960px 160px 0 0px rgba(255, 255, 255, 0.304),          1161px 648px 0 0px rgba(255, 255, 255, 0.791),          1448px 281px 0 0px rgba(255, 255, 255, 0.99),          600px 797px 0 0px rgba(255, 255, 255, 0.757),          494px 1170px 0 0px rgba(255, 255, 255, 0.671),          1683px 882px 0 0px rgba(255, 255, 255, 0.966),          1358px 788px 0 0px rgba(255, 255, 255, 0.019),          722px 1536px 0 0px rgba(255, 255, 255, 0.913),          416px 260px 0 0px rgba(255, 255, 255, 0.569),          1506px 38px 0 0px rgba(255, 255, 255, 0.093),          765px 1662px 0 0px rgba(255, 255, 255, 0.57),          1708px 1229px 0 0px rgba(255, 255, 255, 0.45),          290px 1454px 0 0px rgba(255, 255, 255, 0.366),          922px 311px 0 0px rgba(255, 255, 255, 0.757),          721px 265px 0 0px rgba(255, 255, 255, 0.414),          998px 645px 0 0px rgba(255, 255, 255, 0.896),          1126px 44px 0 0px rgba(255, 255, 255, 0.901),          1288px 646px 0 0px rgba(255, 255, 255, 0.571),          1196px 205px 0 0px rgba(255, 255, 255, 0.635),          1121px 163px 0 0px rgba(255, 255, 255, 0.03),          154px 1654px 0 0px rgba(255, 255, 255, 0.456),          1332px 641px 0 0px rgba(255, 255, 255, 0.914),          1302px 956px 0 0px rgba(255, 255, 255, 0.166),          80px 183px 0 0px rgba(255, 255, 255, 0.874),          413px 610px 0 0px rgba(255, 255, 255, 0.341),          573px 1413px 0 0px rgba(255, 255, 255, 0.982),          45px 1023px 0 0px rgba(255, 255, 255, 0.535),          1050px 720px 0 0px rgba(255, 255, 255, 0.996),          877px 438px 0 0px rgba(255, 255, 255, 0.421),          1149px 1246px 0 0px rgba(255, 255, 255, 0.152),          1689px 495px 0 0px rgba(255, 255, 255, 0.198),          1078px 994px 0 0px rgba(255, 255, 255, 0.436),          172px 1235px 0 0px rgba(255, 255, 255, 0.463),          178px 134px 0 0px rgba(255, 255, 255, 0.116),          1005px 780px 0 0px rgba(255, 255, 255, 0.563),          1401px 496px 0 0px rgba(255, 255, 255, 0.028),          1566px 377px 0 0px rgba(255, 255, 255, 0.601),          1095px 414px 0 0px rgba(255, 255, 255, 0.802),          1433px 552px 0 0px rgba(255, 255, 255, 0.797),          419px 738px 0 0px rgba(255, 255, 255, 0.233),          777px 1515px 0 0px rgba(255, 255, 255, 0.712),          1220px 1127px 0 0px rgba(255, 255, 255, 0.48),          1051px 781px 0 0px rgba(255, 255, 255, 0.372),          158px 201px 0 0px rgba(255, 255, 255, 0.506),          1192px 929px 0 0px rgba(255, 255, 255, 0.029),          1575px 1008px 0 0px rgba(255, 255, 255, 0.544),          800px 742px 0 0px rgba(255, 255, 255, 0.25),          457px 1512px 0 0px rgba(255, 255, 255, 0.761),          819px 1727px 0 0px rgba(255, 255, 255, 0.337),          1693px 345px 0 0px rgba(255, 255, 255, 0.827),          300px 1619px 0 0px rgba(255, 255, 255, 0.564),          1624px 108px 0 0px rgba(255, 255, 255, 0.457),          535px 1697px 0 0px rgba(255, 255, 255, 0.883),          454px 455px 0 0px rgba(255, 255, 255, 0.83),          629px 1598px 0 0px rgba(255, 255, 255, 0.028),          1342px 1558px 0 0px rgba(255, 255, 255, 0.363),          468px 1662px 0 0px rgba(255, 255, 255, 0.818),          477px 1291px 0 0px rgba(255, 255, 255, 0.601),          1014px 226px 0 0px rgba(255, 255, 255, 0.461),          170px 852px 0 0px rgba(255, 255, 255, 0.647),          88px 1546px 0 0px rgba(255, 255, 255, 0.617),          369px 495px 0 0px rgba(255, 255, 255, 0.342),          533px 253px 0 0px rgba(255, 255, 255, 0.922),          1163px 176px 0 0px rgba(255, 255, 255, 0.343),          1421px 1440px 0 0px rgba(255, 255, 255, 0.971),          1064px 1689px 0 0px rgba(255, 255, 255, 0.082),          629px 1771px 0 0px rgba(255, 255, 255, 0.746),          362px 479px 0 0px rgba(255, 255, 255, 0.635),          556px 1071px 0 0px rgba(255, 255, 255, 0.41),          655px 68px 0 0px rgba(255, 255, 255, 0.675),          669px 1604px 0 0px rgba(255, 255, 255, 0.183),          1152px 541px 0 0px rgba(255, 255, 255, 0.189),          1379px 928px 0 0px rgba(255, 255, 255, 0.97),          412px 676px 0 0px rgba(255, 255, 255, 0.793),          71px 568px 0 0px rgba(255, 255, 255, 0.775),          455px 398px 0 0px rgba(255, 255, 255, 0.524),          877px 592px 0 0px rgba(255, 255, 255, 0.312),          1480px 1799px 0 0px rgba(255, 255, 255, 0.606),          481px 401px 0 0px rgba(255, 255, 255, 0.684),          720px 353px 0 0px rgba(255, 255, 255, 0.481),          1444px 490px 0 0px rgba(255, 255, 255, 0.922),          768px 558px 0 0px rgba(255, 255, 255, 0.56),          692px 1003px 0 0px rgba(255, 255, 255, 0.127),          591px 1663px 0 0px rgba(255, 255, 255, 0.306),          41px 339px 0 0px rgba(255, 255, 255, 0.56),          1739px 1094px 0 0px rgba(255, 255, 255, 0.612),          1459px 572px 0 0px rgba(255, 255, 255, 0.908),          167px 460px 0 0px rgba(255, 255, 255, 0.622),          1314px 901px 0 0px rgba(255, 255, 255, 0.378),          1276px 101px 0 0px rgba(255, 255, 255, 0.38),          1394px 75px 0 0px rgba(255, 255, 255, 0.008),          1171px 326px 0 0px rgba(255, 255, 255, 0.144),          1387px 665px 0 0px rgba(255, 255, 255, 0.578),          234px 1741px 0 0px rgba(255, 255, 255, 0.862),          21px 238px 0 0px rgba(255, 255, 255, 0.559),          391px 6px 0 0px rgba(255, 255, 255, 0.846),          779px 551px 0 0px rgba(255, 255, 255, 0.985),          603px 1661px 0 0px rgba(255, 255, 255, 0.779),          1143px 1461px 0 0px rgba(255, 255, 255, 0.54),          1528px 712px 0 0px rgba(255, 255, 255, 0.876),          689px 888px 0 0px rgba(255, 255, 255, 0.843),          1300px 1037px 0 0px rgba(255, 255, 255, 0.931),          1276px 265px 0 0px rgba(255, 255, 255, 0.143),          1085px 1770px 0 0px rgba(255, 255, 255, 0.899),          1606px 1096px 0 0px rgba(255, 255, 255, 0.379),          983px 604px 0 0px rgba(255, 255, 255, 0.902),          624px 1421px 0 0px rgba(255, 255, 255, 0.521),          383px 235px 0 0px rgba(255, 255, 255, 0.477),          24px 1638px 0 0px rgba(255, 255, 255, 0.288),          82px 154px 0 0px rgba(255, 255, 255, 0.696),          1765px 605px 0 0px rgba(255, 255, 255, 0.617),          1210px 1754px 0 0px rgba(255, 255, 255, 0.725),          692px 634px 0 0px rgba(255, 255, 255, 0.489),          500px 100px 0 0px rgba(255, 255, 255, 0.21),          1556px 50px 0 0px rgba(255, 255, 255, 0.116),          1171px 1244px 0 0px rgba(255, 255, 255, 0.35),          1318px 1587px 0 0px rgba(255, 255, 255, 0.242),          1003px 724px 0 0px rgba(255, 255, 255, 0.442),          630px 123px 0 0px rgba(255, 255, 255, 0.201),          1219px 414px 0 0px rgba(255, 255, 255, 0.194),          234px 14px 0 0px rgba(255, 255, 255, 0.109),          160px 1517px 0 0px rgba(255, 255, 255, 0.946),          491px 1353px 0 0px rgba(255, 255, 255, 0.924),          402px 88px 0 0px rgba(255, 255, 255, 0.856),          1154px 577px 0 0px rgba(255, 255, 255, 0.197),          1301px 1062px 0 0px rgba(255, 255, 255, 0.767),          496px 1009px 0 0px rgba(255, 255, 255, 0.379),          76px 1063px 0 0px rgba(255, 255, 255, 0.368),          1279px 526px 0 0px rgba(255, 255, 255, 0.056),          977px 1752px 0 0px rgba(255, 255, 255, 0.804),          448px 89px 0 0px rgba(255, 255, 255, 0.656),          1420px 1459px 0 0px rgba(255, 255, 255, 0.236),          106px 1514px 0 0px rgba(255, 255, 255, 0.787),          1780px 1443px 0 0px rgba(255, 255, 255, 0.101),          1414px 1339px 0 0px rgba(255, 255, 255, 0.616),          1213px 220px 0 0px rgba(255, 255, 255, 0.91),          770px 742px 0 0px rgba(255, 255, 255, 0.199),          25px 1678px 0 0px rgba(255, 255, 255, 0.631),          1595px 1698px 0 0px rgba(255, 255, 255, 0.486),          3px 1607px 0 0px rgba(255, 255, 255, 0.089),          141px 1231px 0 0px rgba(255, 255, 255, 0.086),          1729px 393px 0 0px rgba(255, 255, 255, 0.125),          246px 1609px 0 0px rgba(255, 255, 255, 0.402),          97px 90px 0 0px rgba(255, 255, 255, 0.636),          339px 973px 0 0px rgba(255, 255, 255, 0.131),          336px 356px 0 0px rgba(255, 255, 255, 0.033),          1646px 494px 0 0px rgba(255, 255, 255, 0.927),          1449px 645px 0 0px rgba(255, 255, 255, 0.256),          678px 1668px 0 0px rgba(255, 255, 255, 0.372),          647px 1496px 0 0px rgba(255, 255, 255, 0.503),          601px 1040px 0 0px rgba(255, 255, 255, 0.184),          1309px 569px 0 0px rgba(255, 255, 255, 0.763),          1515px 1323px 0 0px rgba(255, 255, 255, 0.987),          421px 1444px 0 0px rgba(255, 255, 255, 0.462),          475px 1066px 0 0px rgba(255, 255, 255, 0.33),          337px 369px 0 0px rgba(255, 255, 255, 0.825),          84px 1798px 0 0px rgba(255, 255, 255, 0.07),          967px 515px 0 0px rgba(255, 255, 255, 0.445),          930px 1643px 0 0px rgba(255, 255, 255, 0.993),          250px 401px 0 0px rgba(255, 255, 255, 0.466),          947px 1162px 0 0px rgba(255, 255, 255, 0.69),          706px 1525px 0 0px rgba(255, 255, 255, 0.701),          997px 69px 0 0px rgba(255, 255, 255, 0.075),          1656px 1247px 0 0px rgba(255, 255, 255, 0.542),          1561px 50px 0 0px rgba(255, 255, 255, 0.331),          49px 1201px 0 0px rgba(255, 255, 255, 0.802),          659px 292px 0 0px rgba(255, 255, 255, 0.219),          959px 1231px 0 0px rgba(255, 255, 255, 0.82),          322px 1119px 0 0px rgba(255, 255, 255, 0.158),          389px 699px 0 0px rgba(255, 255, 255, 0.477),          276px 1112px 0 0px rgba(255, 255, 255, 0.524),          361px 878px 0 0px rgba(255, 255, 255, 0.098),          1014px 375px 0 0px rgba(255, 255, 255, 0.705),          1394px 296px 0 0px rgba(255, 255, 255, 0.679),          1163px 97px 0 0px rgba(255, 255, 255, 0.487),          1401px 311px 0 0px rgba(255, 255, 255, 0.236),          582px 1351px 0 0px rgba(255, 255, 255, 0.812),          972px 990px 0 0px rgba(255, 255, 255, 0.233),          1303px 394px 0 0px rgba(255, 255, 255, 0.034),          1501px 1329px 0 0px rgba(255, 255, 255, 0.434),          509px 1800px 0 0px rgba(255, 255, 255, 0.22),          883px 1289px 0 0px rgba(255, 255, 255, 0.433),          242px 1378px 0 0px rgba(255, 255, 255, 0.549),          772px 132px 0 0px rgba(255, 255, 255, 0.799),          387px 980px 0 0px rgba(255, 255, 255, 0.797),          743px 1113px 0 0px rgba(255, 255, 255, 0.857),          1645px 795px 0 0px rgba(255, 255, 255, 0.939),          545px 412px 0 0px rgba(255, 255, 255, 0.076),          1160px 1215px 0 0px rgba(255, 255, 255, 0.445),          1002px 787px 0 0px rgba(255, 255, 255, 0.854),          1003px 542px 0 0px rgba(255, 255, 255, 0.637),          127px 162px 0 0px rgba(255, 255, 255, 0.643),          964px 441px 0 0px rgba(255, 255, 255, 0.662),          1549px 1132px 0 0px rgba(255, 255, 255, 0.484),          801px 1319px 0 0px rgba(255, 255, 255, 0.445),          847px 1294px 0 0px rgba(255, 255, 255, 0.79),          183px 788px 0 0px rgba(255, 255, 255, 0.448),          1197px 1563px 0 0px rgba(255, 255, 255, 0.722),          1407px 889px 0 0px rgba(255, 255, 255, 0.871),          610px 1028px 0 0px rgba(255, 255, 255, 0.354),          780px 1051px 0 0px rgba(255, 255, 255, 0.382),          382px 557px 0 0px rgba(255, 255, 255, 0.923),          682px 54px 0 0px rgba(255, 255, 255, 0.1),          2px 1045px 0 0px rgba(255, 255, 255, 0.739),          662px 1242px 0 0px rgba(255, 255, 255, 0.53),          1102px 1081px 0 0px rgba(255, 255, 255, 0.724),          699px 1459px 0 0px rgba(255, 255, 255, 0.701),          955px 580px 0 0px rgba(255, 255, 255, 0.618),          649px 1572px 0 0px rgba(255, 255, 255, 0.157),          429px 703px 0 0px rgba(255, 255, 255, 0.137),          384px 249px 0 0px rgba(255, 255, 255, 0.038),          1059px 844px 0 0px rgba(255, 255, 255, 0.399),          542px 1041px 0 0px rgba(255, 255, 255, 0.281),          1770px 994px 0 0px rgba(255, 255, 255, 0.436),          1470px 593px 0 0px rgba(255, 255, 255, 0.592),          663px 1528px 0 0px rgba(255, 255, 255, 0.023),          199px 804px 0 0px rgba(255, 255, 255, 0.4),          1757px 1670px 0 0px rgba(255, 255, 255, 0.422),          441px 161px 0 0px rgba(255, 255, 255, 0.123),          1746px 1601px 0 0px rgba(255, 255, 255, 0.532),          763px 1686px 0 0px rgba(255, 255, 255, 0.435),          1317px 911px 0 0px rgba(255, 255, 255, 0.552),          1585px 835px 0 0px rgba(255, 255, 255, 0.4),          76px 1140px 0 0px rgba(255, 255, 255, 0.986),          708px 1747px 0 0px rgba(255, 255, 255, 0.187),          1523px 1320px 0 0px rgba(255, 255, 255, 0.837),          641px 420px 0 0px rgba(255, 255, 255, 0.29),          928px 757px 0 0px rgba(255, 255, 255, 0.839),          1776px 1004px 0 0px rgba(255, 255, 255, 0.47),          685px 923px 0 0px rgba(255, 255, 255, 0.904),          1243px 575px 0 0px rgba(255, 255, 255, 0.122),          557px 685px 0 0px rgba(255, 255, 255, 0.43),          865px 670px 0 0px rgba(255, 255, 255, 0.787),          1320px 822px 0 0px rgba(255, 255, 255, 0.764),          1638px 453px 0 0px rgba(255, 255, 255, 0.197),          1069px 781px 0 0px rgba(255, 255, 255, 0.443),          29px 1687px 0 0px rgba(255, 255, 255, 0.014),          939px 1771px 0 0px rgba(255, 255, 255, 0.823),          1697px 344px 0 0px rgba(255, 255, 255, 0.265),          1303px 406px 0 0px rgba(255, 255, 255, 0.778),          1264px 1526px 0 0px rgba(255, 255, 255, 0.788),          757px 1624px 0 0px rgba(255, 255, 255, 0.549),          223px 1753px 0 0px rgba(255, 255, 255, 0.524),          1594px 176px 0 0px rgba(255, 255, 255, 0.784),          1539px 234px 0 0px rgba(255, 255, 255, 0.988),          665px 982px 0 0px rgba(255, 255, 255, 0.185),          1273px 66px 0 0px rgba(255, 255, 255, 0.687),          1069px 1705px 0 0px rgba(255, 255, 255, 0.798),          725px 1079px 0 0px rgba(255, 255, 255, 0.058),          1556px 594px 0 0px rgba(255, 255, 255, 0.104),          1326px 1755px 0 0px rgba(255, 255, 255, 0.923),          81px 1688px 0 0px rgba(255, 255, 255, 0.529),          1491px 862px 0 0px rgba(255, 255, 255, 0.318),          640px 714px 0 0px rgba(255, 255, 255, 0.405),          1128px 570px 0 0px rgba(255, 255, 255, 0.598),          1664px 613px 0 0px rgba(255, 255, 255, 0.592),          876px 1339px 0 0px rgba(255, 255, 255, 0.704),          241px 1466px 0 0px rgba(255, 255, 255, 0.469),          750px 1346px 0 0px rgba(255, 255, 255, 0.056),          824px 918px 0 0px rgba(255, 255, 255, 0.117),          1640px 404px 0 0px rgba(255, 255, 255, 0.026),          1209px 636px 0 0px rgba(255, 255, 255, 0.404),          685px 1562px 0 0px rgba(255, 255, 255, 0.671),          1258px 988px 0 0px rgba(255, 255, 255, 0.17),          275px 1510px 0 0px rgba(255, 255, 255, 0.495),          979px 1393px 0 0px rgba(255, 255, 255, 0.09),          1711px 812px 0 0px rgba(255, 255, 255, 0.445),          520px 1342px 0 0px rgba(255, 255, 255, 0.728),          88px 995px 0 0px rgba(255, 255, 255, 0.323),          509px 1437px 0 0px rgba(255, 255, 255, 0.511),          938px 663px 0 0px rgba(255, 255, 255, 0.44),          1110px 1156px 0 0px rgba(255, 255, 255, 0.089),          1049px 800px 0 0px rgba(255, 255, 255, 0.239),          1307px 1323px 0 0px rgba(255, 255, 255, 0.869),          1706px 493px 0 0px rgba(255, 255, 255, 0.089),          262px 1520px 0 0px rgba(255, 255, 255, 0.448),          700px 1692px 0 0px rgba(255, 255, 255, 0.669),          1146px 93px 0 0px rgba(255, 255, 255, 0.966),          1059px 526px 0 0px rgba(255, 255, 255, 0.257),          798px 337px 0 0px rgba(255, 255, 255, 0.809),          1228px 1183px 0 0px rgba(255, 255, 255, 0.197),          147px 221px 0 0px rgba(255, 255, 255, 0.219),          1474px 284px 0 0px rgba(255, 255, 255, 0.861),          1795px 1341px 0 0px rgba(255, 255, 255, 0.334),          1724px 148px 0 0px rgba(255, 255, 255, 0.487),          299px 948px 0 0px rgba(255, 255, 255, 0.505),          77px 1231px 0 0px rgba(255, 255, 255, 0.654),          1268px 307px 0 0px rgba(255, 255, 255, 0.975),          1479px 1785px 0 0px rgba(255, 255, 255, 0.867),          299px 1035px 0 0px rgba(255, 255, 255, 0.647),          562px 1200px 0 0px rgba(255, 255, 255, 0.597),          1049px 1120px 0 0px rgba(255, 255, 255, 0.105),          1183px 1383px 0 0px rgba(255, 255, 255, 0.245),          935px 1567px 0 0px rgba(255, 255, 255, 0.59),          643px 1370px 0 0px rgba(255, 255, 255, 0.591),          697px 191px 0 0px rgba(255, 255, 255, 0.666),          614px 772px 0 0px rgba(255, 255, 255, 0.065),          563px 1187px 0 0px rgba(255, 255, 255, 0.739),          1083px 1082px 0 0px rgba(255, 255, 255, 0.923),          97px 813px 0 0px rgba(255, 255, 255, 1),          314px 1239px 0 0px rgba(255, 255, 255, 0.419),          1371px 1790px 0 0px rgba(255, 255, 255, 0.363),          1698px 1506px 0 0px rgba(255, 255, 255, 0.139),          448px 279px 0 0px rgba(255, 255, 255, 0.067),          1061px 1539px 0 0px rgba(255, 255, 255, 0.442),          1619px 1737px 0 0px rgba(255, 255, 255, 0.496),          354px 881px 0 0px rgba(255, 255, 255, 0.679),          1730px 1704px 0 0px rgba(255, 255, 255, 0.637),          1180px 1325px 0 0px rgba(255, 255, 255, 0.453),          1541px 227px 0 0px rgba(255, 255, 255, 0.972),          239px 475px 0 0px rgba(255, 255, 255, 0.192),          367px 1663px 0 0px rgba(255, 255, 255, 0.843),          1774px 423px 0 0px rgba(255, 255, 255, 0.18),          306px 200px 0 0px rgba(255, 255, 255, 0.943),          1498px 1035px 0 0px rgba(255, 255, 255, 0.593),          995px 179px 0 0px rgba(255, 255, 255, 0.494),          275px 861px 0 0px rgba(255, 255, 255, 0.544),          1671px 172px 0 0px rgba(255, 255, 255, 0.431),          794px 1533px 0 0px rgba(255, 255, 255, 0.255),          1364px 1625px 0 0px rgba(255, 255, 255, 1),          1034px 1402px 0 0px rgba(255, 255, 255, 0.227),          1773px 628px 0 0px rgba(255, 255, 255, 0.934),          365px 164px 0 0px rgba(255, 255, 255, 0.115),          1274px 1749px 0 0px rgba(255, 255, 255, 0.063);        border-radius: 100px;      }      .solar-syst div {        border-radius: 1000px;        top: 50%;        left: 50%;        position: absolute;        z-index: 999;      }      .solar-syst div:not(.sun) {        border: 1px solid rgba(102, 166, 229, 0.12);      }      .solar-syst div:not(.sun):before {        left: 50%;        border-radius: 100px;        content: '';        position: absolute;      }      .solar-syst div:not(.asteroids-belt):before {        box-shadow: inset 0 6px 0 -2px rgba(0, 0, 0, 0.25);      }      .sun {        background: radial-gradient(          ellipse at center,          #ffd000 1%,          #f9b700 39%,          #f9b700 39%,          #e06317 100%        );        height: 40px;        width: 40px;        margin-top: -20px;        margin-left: -20px;        background-clip: padding-box;        border: 0 !important;        background-position: -28px -103px;        background-size: 175%;        box-shadow: 0 0 10px 2px rgba(255, 107, 0, 0.4),          0 0 22px 11px rgba(255, 203, 0, 0.13);      }      .mercury {        height: 70px;        width: 70px;        margin-top: -35px;        margin-left: -35px;        -webkit-animation: orb 7.1867343561s linear infinite;        animation: orb 7.1867343561s linear infinite;      }      .mercury:before {        height: 4px;        width: 4px;        background: #9f5e26;        margin-top: -2px;        margin-left: -2px;      }      .venus {        height: 100px;        width: 100px;        margin-top: -50px;        margin-left: -50px;        -webkit-animation: orb 18.4555338265s linear infinite;        animation: orb 18.4555338265s linear infinite;      }      .venus:before {        height: 8px;        width: 8px;        background: #beb768;        margin-top: -4px;        margin-left: -4px;      }      .earth {        height: 145px;        width: 145px;        margin-top: -72.5px;        margin-left: -72.5px;        -webkit-animation: orb 30s linear infinite;        animation: orb 30s linear infinite;      }      .earth:before {        height: 6px;        width: 6px;        background: #11abe9;        margin-top: -3px;        margin-left: -3px;      }      .earth:after {        position: absolute;        content: '';        height: 18px;        width: 18px;        left: 50%;        top: 0px;        margin-left: -9px;        margin-top: -9px;        border-radius: 100px;        box-shadow: 0 -10px 0 -8px grey;        -webkit-animation: orb 2.2440352158s linear infinite;        animation: orb 2.2440352158s linear infinite;      }      .mars {        height: 190px;        width: 190px;        margin-top: -95px;        margin-left: -95px;        -webkit-animation: orb 56.4261314589s linear infinite;        animation: orb 56.4261314589s linear infinite;      }      .mars:before {        height: 6px;        width: 6px;        background: #cf3921;        margin-top: -3px;        margin-left: -3px;      }      .jupiter {        height: 340px;        width: 340px;        margin-top: -170px;        margin-left: -170px;        -webkit-animation: orb 355.7228171013s linear infinite;        animation: orb 355.7228171013s linear infinite;      }      .jupiter:before {        height: 18px;        width: 18px;        background: #c76e2a;        margin-top: -9px;        margin-left: -9px;      }      .saturn {        height: 440px;        width: 440px;        margin-top: -220px;        margin-left: -220px;        -webkit-animation: orb 882.6952471456s linear infinite;        animation: orb 882.6952471456s linear infinite;      }      .saturn:before {        height: 12px;        width: 12px;        background: #e7c194;        margin-top: -6px;        margin-left: -6px;      }      .saturn:after {        position: absolute;        content: '';        height: 2.34%;        width: 4.676%;        left: 50%;        top: 0px;        transform: rotateZ(-52deg);        margin-left: -2.3%;        margin-top: -1.2%;        border-radius: 50% 50% 50% 50%;        box-shadow: 0 1px 0 1px #987641, 3px 1px 0 #987641, -3px 1px 0 #987641;        -webkit-animation: orb 882.6952471456s linear infinite;        animation: orb 882.6952471456s linear infinite;        animation-direction: reverse;        transform-origin: 52% 60%;      }      .uranus {        height: 520px;        width: 520px;        margin-top: -260px;        margin-left: -260px;        -webkit-animation: orb 2512.4001967933s linear infinite;        animation: orb 2512.4001967933s linear infinite;      }      .uranus:before {        height: 10px;        width: 10px;        background: #b5e3e3;        margin-top: -5px;        margin-left: -5px;      }      .neptune {        height: 630px;        width: 630px;        margin-top: -315px;        margin-left: -315px;        -webkit-animation: orb 4911.7838624549s linear infinite;        animation: orb 4911.7838624549s linear infinite;      }      .neptune:before {        height: 10px;        width: 10px;        background: #175e9e;        margin-top: -5px;        margin-left: -5px;      }      .asteroids-belt {        opacity: 0.7;        border-color: transparent !important;        height: 300px;        width: 300px;        margin-top: -150px;        margin-left: -150px;        -webkit-animation: orb 179.9558282773s linear infinite;        animation: orb 179.9558282773s linear infinite;        overflow: hidden;      }      .asteroids-belt:before {        top: 50%;        height: 210px;        width: 210px;        margin-left: -105px;        margin-top: -105px;        background: transparent;        border-radius: 140px !important;        box-shadow: 7px 126px 0 -104px rgba(255, 255, 255, 0.306),          -80px 34px 0 -104px rgba(255, 255, 255, 0.717),          140px -129px 0 -104px rgba(255, 255, 255, 0.636),          -32px 51px 0 -104px rgba(255, 255, 255, 0.565),          61px -127px 0 -104px rgba(255, 255, 255, 0.341),          83px -18px 0 -104px rgba(255, 255, 255, 0.495),          95px 83px 0 -104px rgba(255, 255, 255, 0.173),          -110px -139px 0 -104px rgba(255, 255, 255, 0.302),          32px 87px 0 -104px rgba(255, 255, 255, 0.535),          -106px 122px 0 -104px rgba(255, 255, 255, 0.923),          -144px 138px 0 -104px rgba(255, 255, 255, 0.947),          -14px 46px 0 -104px rgba(255, 255, 255, 0.956),          85px -67px 0 -104px rgba(255, 255, 255, 0.666),          8px -44px 0 -104px rgba(255, 255, 255, 0.448),          133px -115px 0 -104px rgba(255, 255, 255, 0.312),          -54px 50px 0 -104px rgba(255, 255, 255, 0.213),          -73px 78px 0 -104px rgba(255, 255, 255, 0.051),          145px -18px 0 -104px rgba(255, 255, 255, 0.504),          69px 47px 0 -104px rgba(255, 255, 255, 0.773),          -87px -102px 0 -104px rgba(255, 255, 255, 0.402),          84px 121px 0 -104px rgba(255, 255, 255, 0.941),          124px -2px 0 -104px rgba(255, 255, 255, 0.846),          83px -34px 0 -104px rgba(255, 255, 255, 0.776),          -61px 92px 0 -104px rgba(255, 255, 255, 0.013),          98px 81px 0 -104px rgba(255, 255, 255, 0.177),          -40px 137px 0 -104px rgba(255, 255, 255, 0.39),          -143px -62px 0 -104px rgba(255, 255, 255, 0.421),          63px 89px 0 -104px rgba(255, 255, 255, 0.504),          -43px -128px 0 -104px rgba(255, 255, 255, 0.143),          -96px 116px 0 -104px rgba(255, 255, 255, 0.333),          -1px -7px 0 -104px rgba(255, 255, 255, 0.647),          16px -94px 0 -104px rgba(255, 255, 255, 0.467),          127px -103px 0 -104px rgba(255, 255, 255, 0.256),          70px 18px 0 -104px rgba(255, 255, 255, 0.761),          -97px 22px 0 -104px rgba(255, 255, 255, 0.531),          14px -50px 0 -104px rgba(255, 255, 255, 0.939),          -26px -51px 0 -104px rgba(255, 255, 255, 0.353),          4px -66px 0 -104px rgba(255, 255, 255, 0.553),          118px 5px 0 -104px rgba(255, 255, 255, 0.567),          -92px 114px 0 -104px rgba(255, 255, 255, 0.258),          67px -124px 0 -104px rgba(255, 255, 255, 0.284),          -22px -38px 0 -104px rgba(255, 255, 255, 0.755),          -40px -138px 0 -104px rgba(255, 255, 255, 0.791),          65px 96px 0 -104px rgba(255, 255, 255, 0.695),          52px 132px 0 -104px rgba(255, 255, 255, 0.566),          66px 85px 0 -104px rgba(255, 255, 255, 0.583),          -34px -113px 0 -104px rgba(255, 255, 255, 0.392),          -49px 51px 0 -104px rgba(255, 255, 255, 0.199),          109px -28px 0 -104px rgba(255, 255, 255, 0.793),          70px -90px 0 -104px rgba(255, 255, 255, 0.503),          141px 58px 0 -104px rgba(255, 255, 255, 0.311),          61px 119px 0 -104px rgba(255, 255, 255, 0.544),          -63px -40px 0 -104px rgba(255, 255, 255, 0.912),          -90px 18px 0 -104px rgba(255, 255, 255, 0.777),          -86px -36px 0 -104px rgba(255, 255, 255, 0.363),          138px -144px 0 -104px rgba(255, 255, 255, 0.983),          79px -13px 0 -104px rgba(255, 255, 255, 0.075),          -1px 132px 0 -104px rgba(255, 255, 255, 0.999),          -25px 51px 0 -104px rgba(255, 255, 255, 0.714),          116px -122px 0 -104px rgba(255, 255, 255, 0.368),          5px 113px 0 -104px rgba(255, 255, 255, 0.613),          25px 141px 0 -104px rgba(255, 255, 255, 0.931),          54px -130px 0 -104px rgba(255, 255, 255, 0.211),          48px -9px 0 -104px rgba(255, 255, 255, 0.368),          -79px 3px 0 -104px rgba(255, 255, 255, 0.302),          -99px 124px 0 -104px rgba(255, 255, 255, 0.769),          -61px 5px 0 -104px rgba(255, 255, 255, 0.913),          -6px -130px 0 -104px rgba(255, 255, 255, 0.305),          120px 79px 0 -104px rgba(255, 255, 255, 0.011),          -54px -88px 0 -104px rgba(255, 255, 255, 0.958),          142px -112px 0 -104px rgba(255, 255, 255, 0.395),          22px 22px 0 -104px rgba(255, 255, 255, 0.462),          -84px 104px 0 -104px rgba(255, 255, 255, 0.487),          -43px 53px 0 -104px rgba(255, 255, 255, 0.015),          129px -122px 0 -104px rgba(255, 255, 255, 0.62),          -31px 1px 0 -104px rgba(255, 255, 255, 0.104),          -36px 70px 0 -104px rgba(255, 255, 255, 0.366),          -13px 127px 0 -104px rgba(255, 255, 255, 0.913),          -77px -11px 0 -104px rgba(255, 255, 255, 0.89),          132px 58px 0 -104px rgba(255, 255, 255, 0.195),          -60px 110px 0 -104px rgba(255, 255, 255, 0.201),          -143px -97px 0 -104px rgba(255, 255, 255, 0.172),          21px -47px 0 -104px rgba(255, 255, 255, 0.393),          103px 135px 0 -104px rgba(255, 255, 255, 0.714),          95px -110px 0 -104px rgba(255, 255, 255, 0.593),          -75px -58px 0 -104px rgba(255, 255, 255, 0.535),          -103px -79px 0 -104px rgba(255, 255, 255, 0.779),          100px -56px 0 -104px rgba(255, 255, 255, 0.371),          106px -134px 0 -104px rgba(255, 255, 255, 0.976),          35px -42px 0 -104px rgba(255, 255, 255, 0.369),          145px 1px 0 -104px rgba(255, 255, 255, 0.517),          129px -34px 0 -104px rgba(255, 255, 255, 0.744),          126px 107px 0 -104px rgba(255, 255, 255, 0.898),          -59px -79px 0 -104px rgba(255, 255, 255, 0.436),          -70px 91px 0 -104px rgba(255, 255, 255, 0.799),          -72px 111px 0 -104px rgba(255, 255, 255, 0.074),          -117px -119px 0 -104px rgba(255, 255, 255, 0.578),          -8px 23px 0 -104px rgba(255, 255, 255, 0.17),          86px 88px 0 -104px rgba(255, 255, 255, 0.019),          -10px 125px 0 -104px rgba(255, 255, 255, 0.648),          -79px -69px 0 -104px rgba(255, 255, 255, 0.497),          140px -70px 0 -104px rgba(255, 255, 255, 0.451),          29px 100px 0 -104px rgba(255, 255, 255, 0.404),          8px -10px 0 -104px rgba(255, 255, 255, 0.092),          -80px 18px 0 -104px rgba(255, 255, 255, 0.082),          143px 68px 0 -104px rgba(255, 255, 255, 0.458),          2px 100px 0 -104px rgba(255, 255, 255, 0.878),          -31px -61px 0 -104px rgba(255, 255, 255, 0.049),          -105px -117px 0 -104px rgba(255, 255, 255, 0.861),          121px 86px 0 -104px rgba(255, 255, 255, 0.879),          123px -105px 0 -104px rgba(255, 255, 255, 0.058),          127px -83px 0 -104px rgba(255, 255, 255, 0.053),          98px 84px 0 -104px rgba(255, 255, 255, 0.732),          104px -60px 0 -104px rgba(255, 255, 255, 0.07),          -57px -100px 0 -104px rgba(255, 255, 255, 0.513),          -97px 94px 0 -104px rgba(255, 255, 255, 0.798),          15px 134px 0 -104px rgba(255, 255, 255, 0.233),          30px -48px 0 -104px rgba(255, 255, 255, 0.502),          -12px -139px 0 -104px rgba(255, 255, 255, 0.908),          -11px -32px 0 -104px rgba(255, 255, 255, 0.898),          39px 113px 0 -104px rgba(255, 255, 255, 0.065),          -30px 11px 0 -104px rgba(255, 255, 255, 0.713),          -1px -113px 0 -104px rgba(255, 255, 255, 0.108),          -63px 82px 0 -104px rgba(255, 255, 255, 0.901),          1px 14px 0 -104px rgba(255, 255, 255, 0.161),          -40px -143px 0 -104px rgba(255, 255, 255, 0.448),          68px -136px 0 -104px rgba(255, 255, 255, 0.688),          26px 106px 0 -104px rgba(255, 255, 255, 0.157),          -48px -96px 0 -104px rgba(255, 255, 255, 0.999),          100px 92px 0 -104px rgba(255, 255, 255, 0.653),          -97px -90px 0 -104px rgba(255, 255, 255, 0.057),          69px -19px 0 -104px rgba(255, 255, 255, 0.323),          -26px 125px 0 -104px rgba(255, 255, 255, 0.661),          -135px -79px 0 -104px rgba(255, 255, 255, 0.32),          122px 64px 0 -104px rgba(255, 255, 255, 0.939),          29px -125px 0 -104px rgba(255, 255, 255, 0.303),          -7px -21px 0 -104px rgba(255, 255, 255, 0.544),          -93px -125px 0 -104px rgba(255, 255, 255, 0.629),          -53px -31px 0 -104px rgba(255, 255, 255, 0.909),          -138px 108px 0 -104px rgba(255, 255, 255, 0.215),          136px -132px 0 -104px rgba(255, 255, 255, 0.902),          -112px 80px 0 -104px rgba(255, 255, 255, 0.738),          66px -135px 0 -104px rgba(255, 255, 255, 0.486),          57px 62px 0 -104px rgba(255, 255, 255, 0.946),          -91px 98px 0 -104px rgba(255, 255, 255, 0.713),          -11px -69px 0 -104px rgba(255, 255, 255, 0.771),          -19px 127px 0 -104px rgba(255, 255, 255, 0.815),          -112px 110px 0 -104px rgba(255, 255, 255, 0.309),          67px 112px 0 -104px rgba(255, 255, 255, 0.186),          10px -65px 0 -104px rgba(255, 255, 255, 0.475),          50px -98px 0 -104px rgba(255, 255, 255, 0.182),          82px 13px 0 -104px rgba(255, 255, 255, 0.212),          95px 103px 0 -104px rgba(255, 255, 255, 0.994),          107px 55px 0 -104px rgba(255, 255, 255, 0.344),          79px 139px 0 -104px rgba(255, 255, 255, 0.104),          -55px -42px 0 -104px rgba(255, 255, 255, 0.391),          30px 86px 0 -104px rgba(255, 255, 255, 0.569),          52px -52px 0 -104px rgba(255, 255, 255, 0.925),          80px 128px 0 -104px rgba(255, 255, 255, 0.342),          53px -92px 0 -104px rgba(255, 255, 255, 0.387),          -18px -38px 0 -104px rgba(255, 255, 255, 0.961),          105px -81px 0 -104px rgba(255, 255, 255, 0.922),          -23px 17px 0 -104px rgba(255, 255, 255, 0.546),          44px 99px 0 -104px rgba(255, 255, 255, 0.611),          -29px -64px 0 -104px rgba(255, 255, 255, 0.185),          28px 50px 0 -104px rgba(255, 255, 255, 0.19),          -46px -138px 0 -104px rgba(255, 255, 255, 0.163),          -31px -122px 0 -104px rgba(255, 255, 255, 0.632),          73px -35px 0 -104px rgba(255, 255, 255, 0.861),          130px -108px 0 -104px rgba(255, 255, 255, 0.272),          126px 126px 0 -104px rgba(255, 255, 255, 0.374),          143px 57px 0 -104px rgba(255, 255, 255, 0.917),          -86px -111px 0 -104px rgba(255, 255, 255, 0.756),          -10px -38px 0 -104px rgba(255, 255, 255, 0.212),          -38px -38px 0 -104px rgba(255, 255, 255, 0.647),          -143px -125px 0 -104px rgba(255, 255, 255, 0.363),          112px 86px 0 -104px rgba(255, 255, 255, 0.152),          56px -110px 0 -104px rgba(255, 255, 255, 0.275),          57px 55px 0 -104px rgba(255, 255, 255, 0.155),          74px -68px 0 -104px rgba(255, 255, 255, 0.014),          -65px 68px 0 -104px rgba(255, 255, 255, 0.245),          141px -66px 0 -104px rgba(255, 255, 255, 0.693),          -130px 137px 0 -104px rgba(255, 255, 255, 0.884),          110px 109px 0 -104px rgba(255, 255, 255, 0.109),          140px 110px 0 -104px rgba(255, 255, 255, 0.015),          -136px 47px 0 -104px rgba(255, 255, 255, 0.564),          109px -18px 0 -104px rgba(255, 255, 255, 0.069),          109px -135px 0 -104px rgba(255, 255, 255, 0.569),          67px -78px 0 -104px rgba(255, 255, 255, 0.983),          49px -18px 0 -104px rgba(255, 255, 255, 0.888),          73px 72px 0 -104px rgba(255, 255, 255, 0.106),          -7px 72px 0 -104px rgba(255, 255, 255, 0.444),          -50px -12px 0 -104px rgba(255, 255, 255, 0.81),          139px -62px 0 -104px rgba(255, 255, 255, 0.092),          -83px -48px 0 -104px rgba(255, 255, 255, 0.777),          50px -62px 0 -104px rgba(255, 255, 255, 0.607),          13px -105px 0 -104px rgba(255, 255, 255, 0.912),          -100px 30px 0 -104px rgba(255, 255, 255, 0.179),          -12px -75px 0 -104px rgba(255, 255, 255, 0.759),          -41px -135px 0 -104px rgba(255, 255, 255, 0.193),          67px -121px 0 -104px rgba(255, 255, 255, 0.089),          21px -20px 0 -104px rgba(255, 255, 255, 0.436),          109px -112px 0 -104px rgba(255, 255, 255, 0.413),          -54px 140px 0 -104px rgba(255, 255, 255, 0.214),          11px -100px 0 -104px rgba(255, 255, 255, 0.581),          57px 24px 0 -104px rgba(255, 255, 255, 0.336),          105px 75px 0 -104px rgba(255, 255, 255, 0.447),          108px -81px 0 -104px rgba(255, 255, 255, 0.219),          98px -87px 0 -104px rgba(255, 255, 255, 0.025),          -79px 54px 0 -104px rgba(255, 255, 255, 0.578),          112px 95px 0 -104px rgba(255, 255, 255, 0.377),          88px -30px 0 -104px rgba(255, 255, 255, 0.799),          -117px -18px 0 -104px rgba(255, 255, 255, 0.876),          112px -119px 0 -104px rgba(255, 255, 255, 0.436),          81px -35px 0 -104px rgba(255, 255, 255, 0.495),          -60px 125px 0 -104px rgba(255, 255, 255, 0.8),          -110px -19px 0 -104px rgba(255, 255, 255, 0.37),          115px 77px 0 -104px rgba(255, 255, 255, 0.252),          -73px 16px 0 -104px rgba(255, 255, 255, 0.949),          11px 54px 0 -104px rgba(255, 255, 255, 0.621),          106px -64px 0 -104px rgba(255, 255, 255, 0.07),          63px 40px 0 -104px rgba(255, 255, 255, 0.411),          -126px 69px 0 -104px rgba(255, 255, 255, 0.01),          -36px -48px 0 -104px rgba(255, 255, 255, 0.218),          56px 121px 0 -104px rgba(255, 255, 255, 0.658),          -71px -139px 0 -104px rgba(255, 255, 255, 0.625),          97px -51px 0 -104px rgba(255, 255, 255, 0.196),          125px -10px 0 -104px rgba(255, 255, 255, 0.902),          129px -53px 0 -104px rgba(255, 255, 255, 0.682),          -8px 144px 0 -104px rgba(255, 255, 255, 0.185),          -33px -18px 0 -104px rgba(255, 255, 255, 0.293),          129px -8px 0 -104px rgba(255, 255, 255, 0.059),          85px -121px 0 -104px rgba(255, 255, 255, 0.115),          93px -27px 0 -104px rgba(255, 255, 255, 0.948),          77px 127px 0 -104px rgba(255, 255, 255, 0.736),          -81px -134px 0 -104px rgba(255, 255, 255, 0.877),          140px -48px 0 -104px rgba(255, 255, 255, 0.783),          -38px 37px 0 -104px rgba(255, 255, 255, 0.418),          38px -111px 0 -104px rgba(255, 255, 255, 0.913),          -106px -20px 0 -104px rgba(255, 255, 255, 0.783),          53px -137px 0 -104px rgba(255, 255, 255, 0.298),          -63px -134px 0 -104px rgba(255, 255, 255, 0.179),          -42px -31px 0 -104px rgba(255, 255, 255, 0.479),          -10px 78px 0 -104px rgba(255, 255, 255, 0.744),          2px 83px 0 -104px rgba(255, 255, 255, 0.812),          97px 125px 0 -104px rgba(255, 255, 255, 0.843),          81px -119px 0 -104px rgba(255, 255, 255, 0.23),          -40px -45px 0 -104px rgba(255, 255, 255, 0.193),          -139px 63px 0 -104px rgba(255, 255, 255, 0.517),          -141px -35px 0 -104px rgba(255, 255, 255, 0.023),          65px 42px 0 -104px rgba(255, 255, 255, 0.835),          -72px -144px 0 -104px rgba(255, 255, 255, 0.325),          1px 138px 0 -104px rgba(255, 255, 255, 0.507),          -137px 132px 0 -104px rgba(255, 255, 255, 0.842),          126px 113px 0 -104px rgba(255, 255, 255, 0.28),          144px 54px 0 -104px rgba(255, 255, 255, 0.424),          4px 35px 0 -104px rgba(255, 255, 255, 0.239),          -24px 52px 0 -104px rgba(255, 255, 255, 0.691),          70px 71px 0 -104px rgba(255, 255, 255, 0.758),          44px -134px 0 -104px rgba(255, 255, 255, 0.359),          70px 45px 0 -104px rgba(255, 255, 255, 0.735),          -121px -123px 0 -104px rgba(255, 255, 255, 0.743),          -129px -141px 0 -104px rgba(255, 255, 255, 0.113),          -38px 94px 0 -104px rgba(255, 255, 255, 0.168),          -131px 34px 0 -104px rgba(255, 255, 255, 0.144),          -49px 28px 0 -104px rgba(255, 255, 255, 0.352),          128px 31px 0 -104px rgba(255, 255, 255, 0.551),          -4px 39px 0 -104px rgba(255, 255, 255, 0.802),          -23px -37px 0 -104px rgba(255, 255, 255, 0.801),          98px 14px 0 -104px rgba(255, 255, 255, 0.473),          -134px -127px 0 -104px rgba(255, 255, 255, 0.908),          54px -122px 0 -104px rgba(255, 255, 255, 0.885),          -91px 73px 0 -104px rgba(255, 255, 255, 0.183),          10px 97px 0 -104px rgba(255, 255, 255, 0.808),          -21px 8px 0 -104px rgba(255, 255, 255, 0.496),          62px -142px 0 -104px rgba(255, 255, 255, 0.976),          139px -61px 0 -104px rgba(255, 255, 255, 0.669),          41px 71px 0 -104px rgba(255, 255, 255, 0.671),          1px 95px 0 -104px rgba(255, 255, 255, 0.163),          -43px -4px 0 -104px rgba(255, 255, 255, 0.24),          101px 17px 0 -104px rgba(255, 255, 255, 0.269),          -48px -140px 0 -104px rgba(255, 255, 255, 0.546),          -126px 18px 0 -104px rgba(255, 255, 255, 0.22),          27px -23px 0 -104px rgba(255, 255, 255, 0.446),          120px 73px 0 -104px rgba(255, 255, 255, 0.44),          -142px -57px 0 -104px rgba(255, 255, 255, 0.01),          66px 92px 0 -104px rgba(255, 255, 255, 0.83),          124px -84px 0 -104px rgba(255, 255, 255, 0.891),          33px -98px 0 -104px rgba(255, 255, 255, 0.447),          -56px -108px 0 -104px rgba(255, 255, 255, 0.955),          -115px -55px 0 -104px rgba(255, 255, 255, 0.627),          131px 61px 0 -104px rgba(255, 255, 255, 0.612),          -57px -42px 0 -104px rgba(255, 255, 255, 0.5),          -9px 5px 0 -104px rgba(255, 255, 255, 0.806),          -20px -45px 0 -104px rgba(255, 255, 255, 0.431),          18px -22px 0 -104px rgba(255, 255, 255, 0.727),          115px -57px 0 -104px rgba(255, 255, 255, 0.633),          116px 134px 0 -104px rgba(255, 255, 255, 0.695),          -136px -42px 0 -104px rgba(255, 255, 255, 0.395),          -84px 120px 0 -104px rgba(255, 255, 255, 0.216),          -51px -90px 0 -104px rgba(255, 255, 255, 0.936),          -56px -113px 0 -104px rgba(255, 255, 255, 0.067),          -89px -57px 0 -104px rgba(255, 255, 255, 0.801),          -114px -77px 0 -104px rgba(255, 255, 255, 0.728),          141px -67px 0 -104px rgba(255, 255, 255, 0.628),          7px -137px 0 -104px rgba(255, 255, 255, 0.087),          -101px -36px 0 -104px rgba(255, 255, 255, 0.485),          -7px -48px 0 -104px rgba(255, 255, 255, 0.046),          -83px -57px 0 -104px rgba(255, 255, 255, 0.943),          -58px 115px 0 -104px rgba(255, 255, 255, 0.493),          -97px -53px 0 -104px rgba(255, 255, 255, 0.936),          81px -73px 0 -104px rgba(255, 255, 255, 0.852),          65px 35px 0 -104px rgba(255, 255, 255, 0.294),          -83px 83px 0 -104px rgba(255, 255, 255, 0.633),          92px -110px 0 -104px rgba(255, 255, 255, 0.484),          19px -36px 0 -104px rgba(255, 255, 255, 0.768),          -105px 83px 0 -104px rgba(255, 255, 255, 0.579),          -15px 72px 0 -104px rgba(255, 255, 255, 0.108),          -35px -74px 0 -104px rgba(255, 255, 255, 0.383),          -42px -93px 0 -104px rgba(255, 255, 255, 0.014),          -137px -19px 0 -104px rgba(255, 255, 255, 0.522),          42px -68px 0 -104px rgba(255, 255, 255, 0.911),          9px 72px 0 -104px rgba(255, 255, 255, 0.799),          -68px 130px 0 -104px rgba(255, 255, 255, 0.408),          -40px -7px 0 -104px rgba(255, 255, 255, 0.479),          -28px 82px 0 -104px rgba(255, 255, 255, 0.269),          66px 47px 0 -104px rgba(255, 255, 255, 0.295),          -14px 127px 0 -104px rgba(255, 255, 255, 0.779),          -39px -66px 0 -104px rgba(255, 255, 255, 0.041),          -58px 69px 0 -104px rgba(255, 255, 255, 0.894),          5px 28px 0 -104px rgba(255, 255, 255, 0.113),          -16px 89px 0 -104px rgba(255, 255, 255, 0.551),          -131px -19px 0 -104px rgba(255, 255, 255, 0.149),          21px 25px 0 -104px rgba(255, 255, 255, 0.858),          84px -21px 0 -104px rgba(255, 255, 255, 0.091),          141px 98px 0 -104px rgba(255, 255, 255, 0.993),          16px 54px 0 -104px rgba(255, 255, 255, 0.788),          30px -76px 0 -104px rgba(255, 255, 255, 0.488),          -13px -43px 0 -104px rgba(255, 255, 255, 0.649),          39px -31px 0 -104px rgba(255, 255, 255, 0.825),          134px -114px 0 -104px rgba(255, 255, 255, 0.004),          -111px -101px 0 -104px rgba(255, 255, 255, 0.201),          129px -2px 0 -104px rgba(255, 255, 255, 0.911),          96px 52px 0 -104px rgba(255, 255, 255, 0.276),          -15px 112px 0 -104px rgba(255, 255, 255, 0.486),          77px 6px 0 -104px rgba(255, 255, 255, 0.039),          -60px -103px 0 -104px rgba(255, 255, 255, 0.864),          -130px 139px 0 -104px rgba(255, 255, 255, 0.83),          120px -135px 0 -104px rgba(255, 255, 255, 0.61),          51px 20px 0 -104px rgba(255, 255, 255, 0.523),          26px 96px 0 -104px rgba(255, 255, 255, 0.661),          -114px -56px 0 -104px rgba(255, 255, 255, 0.809),          49px -89px 0 -104px rgba(255, 255, 255, 0.016),          116px 105px 0 -104px rgba(255, 255, 255, 0.552),          -106px -78px 0 -104px rgba(255, 255, 255, 0.021),          -125px 106px 0 -104px rgba(255, 255, 255, 0.051),          -124px -125px 0 -104px rgba(255, 255, 255, 0.288),          110px 45px 0 -104px rgba(255, 255, 255, 0.239),          140px 89px 0 -104px rgba(255, 255, 255, 0.117),          -48px 20px 0 -104px rgba(255, 255, 255, 0.056),          -64px 135px 0 -104px rgba(255, 255, 255, 0.994),          -60px 139px 0 -104px rgba(255, 255, 255, 0.572),          -85px 88px 0 -104px rgba(255, 255, 255, 0.045),          5px -119px 0 -104px rgba(255, 255, 255, 0.928),          -37px 18px 0 -104px rgba(255, 255, 255, 0.173),          -13px -106px 0 -104px rgba(255, 255, 255, 0.064),          -117px 120px 0 -104px rgba(255, 255, 255, 0.319),          -88px -143px 0 -104px rgba(255, 255, 255, 0.544),          -81px -13px 0 -104px rgba(255, 255, 255, 0.39),          25px -50px 0 -104px rgba(255, 255, 255, 0.529),          45px -119px 0 -104px rgba(255, 255, 255, 0.074),          -70px -57px 0 -104px rgba(255, 255, 255, 0.985),          -133px 119px 0 -104px rgba(255, 255, 255, 0.573),          -64px 52px 0 -104px rgba(255, 255, 255, 0.266),          -118px -84px 0 -104px rgba(255, 255, 255, 0.514),          -100px 2px 0 -104px rgba(255, 255, 255, 0.031),          -116px 57px 0 -104px rgba(255, 255, 255, 0.152),          -29px 21px 0 -104px rgba(255, 255, 255, 0.38),          24px -85px 0 -104px rgba(255, 255, 255, 0.47),          92px 123px 0 -104px rgba(255, 255, 255, 0.908),          135px -51px 0 -104px rgba(255, 255, 255, 0.268),          77px 5px 0 -104px rgba(255, 255, 255, 0.516),          42px 133px 0 -104px rgba(255, 255, 255, 0.018),          -48px 0px 0 -104px rgba(255, 255, 255, 0.869),          27px -126px 0 -104px rgba(255, 255, 255, 0.567),          -39px -7px 0 -104px rgba(255, 255, 255, 0.06),          25px 142px 0 -104px rgba(255, 255, 255, 0.084),          105px -75px 0 -104px rgba(255, 255, 255, 0.545),          -127px 65px 0 -104px rgba(255, 255, 255, 0.526),          8px -57px 0 -104px rgba(255, 255, 255, 0.857);      }      .pluto {        height: 780px;        width: 780px;        margin-top: -450px;        margin-left: -320px;        -webkit-animation: orb 7439.7074054575s linear infinite;        animation: orb 7439.7074054575s linear infinite;      }      .pluto:before {        height: 3px;        width: 3px;        background: #fff;        margin-top: -1.5px;        margin-left: -1.5px;      }      .hide {        display: none;      }      .links {        margin-top: 5px !important;        font-size: 1em !important;      }      @-webkit-keyframes orb {        from {          transform: rotate(0deg);        }        to {          transform: rotate(-360deg);        }      }      @keyframes orb {        from {          transform: rotate(0deg);        }        to {          transform: rotate(-360deg);        }      }    </style>  </head>  <body>    <div class="overlay-content">    <div class="solar-syst">      <div class="sun"></div>      <div class="mercury"></div>      <div class="venus"></div>      <div class="earth"></div>      <div class="mars"></div>      <div class="jupiter"></div>      <div class="saturn"></div>      <div class="uranus"></div>      <div class="neptune"></div>      <div class="pluto"></div>      <div class="asteroids-belt"></div>    </div>    </div>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%83%E4%BB%AA.html"/>
      <url>/HEXO/html/%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%83%E4%BB%AA.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>动态地球仪</title>    <style>      body {        padding: 0;        margin: 0;        overflow: hidden;        font-family: sans-serif;      }      .page {        width: 100%;        height: 100vh;        display: flex;        justify-content: center;        align-items: center;        position: relative;        z-index: 1;      }      .globe-wrapper {        margin-top: 9vh;        position: relative;      }      .info {        position: absolute;        top: 0;        left: 0;        width: 100%;        text-align: center;        height: 100%;        display: flex;        justify-content: center;        align-items: center;        pointer-events: none;      }      .info span {        font-weight: bold;        text-shadow: 0 0 5px #ffffff;        /*background-color: rgba(255, 255, 255, .2);*/        padding: 0.2em 0.6em;        border-radius: 2px;        font-size: 2em;      }      canvas {        cursor: pointer;        -webkit-touch-callout: none;        -webkit-user-select: none;        -khtml-user-select: none;        -moz-user-select: none;        -ms-user-select: none;        user-select: none;        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);      }      svg {        position: fixed;        top: 0;        visibility: hidden;      }      .lil-gui {        --width: 350px;        max-width: 90%;        --widget-height: 20px;        font-size: 15px;        --input-font-size: 15px;        --padding: 10px;        --spacing: 10px;        --slider-knob-width: 5px;        --background-color: rgba(5, 0, 15, 0.8);        --widget-color: rgba(255, 255, 255, 0.3);        --focus-color: rgba(255, 255, 255, 0.4);        --hover-color: rgba(255, 255, 255, 0.5);        --font-family: monospace;      }    </style>  </head>  <body>    <div class="page">      <div class="globe-wrapper">        <canvas id="globe-3d"></canvas>        <div class="info"><span></span></div>      </div>    </div>    <svg id="map">      <path        d="M1383 261.6l1.5 1.8-2.9 0.8-2.4 1.1-5.9 0.8-5.3 1.3-2.4 2.8 1.9 2.7 1.4 3.2-2 2.7 0.8 2.5-0.9 2.3-5.2-0.2 3.1 4.2-3.1 1.7-1.4 3.8 1.1 3.9-1.8 1.8-2.1-0.6-4 0.9-0.2 1.7-4.1 0-2.3 3.7 0.8 5.4-6.6 2.7-3.9-0.6-0.9 1.4-3.4-0.8-5.3 1-9.6-3.3 3.9-5.8-1.1-4.1-4.3-1.1-1.2-4.1-2.7-5.1 1.6-3.5-2.5-1 0.5-4.7 0.6-8 5.9 2.5 3.9-0.9 0.4-2.9 4-0.9 2.6-2-0.2-5.1 4.2-1.3 0.3-2.2 2.9 1.7 1.6 0.2 3 0 4.3 1.4 1.8 0.7 3.4-2 2.1 1.2 0.9-2.9 3.2 0.1 0.6-0.9-0.2-2.6 1.7-2.2 3.3 1.4-0.1 2 1.7 0.3 0.9 5.4 2.7 2.1 1.5-1.4 2.2-0.6 2.5-2.9 3.8 0.5 5.4 0z"        data-name="Afghanistan"      />      <path        d="M 1121.2 572 1121.8 574 1121.1 577.1 1122 580.1 1121.1 582.5 1121.5 584.7 1109.8 584.6 1109 605.1 1112.6 610.3 1116.2 614.3 1105.8 616.9 1092.3 616 1088.5 613 1065.8 613.2 1065 613.7 1061.7 610.8 1058.1 610.6 1054.7 611.7 1052 612.9 1051.5 608.9 1052.4 603.2 1054.4 597.3 1054.7 594.6 1056.6 588.8 1058 586.2 1061.3 582 1063.2 579.1 1063.8 574.4 1063.5 570.7 1061.9 568.4 1060.4 564.5 1059.1 560.7 1059.4 559.3 1061.1 556.8 1059.5 550.6 1058.3 546.3 1055.5 542.2 1056.1 541 1058.4 540.1 1060.1 540.2 1062.1 539.5 1078.8 539.6 1080.1 544.3 1081.7 548.2 1083 550.3 1085.1 553.6 1088.9 553.1 1090.7 552.2 1093.8 553.1 1094.7 551.5 1096.2 547.8 1099.7 547.5 1100 546.4 1102.9 546.4 1102.4 548.7 1109.2 548.6 1109.3 552.7 1110.4 555.1 1109.5 559 1109.9 563 1111.7 565.4 1111.3 573 1112.7 572.4 1115.1 572.6 1118.6 571.6 1121.2 572 Z M 1055.3 539 1053.8 534.2 1056.1 531.4 1057.8 530.3 1059.9 532.5 1057.9 533.9 1056.9 535.5 1056.7 538.3 1055.3 539 Z"        data-name="Angola"      />      <path        d="M1088 228l0.4 1.2 1.4-0.6 1.2 1.7 1.3 0.7 0.6 2.3-0.5 2.2 1 2.7 2.3 1.5 0.1 1.7-1.7 0.9-0.1 2.1-2.2 3.1-0.9-0.4-0.2-1.4-3.1-2.2-0.7-3 0.1-4.4 0.5-1.9-0.9-1-0.5-2.1 1.9-3.1z"        data-name="Albania"      />      <path        d="M1296.2 336.7l1.3 5.1-2.8 0 0 4.2 1.1 0.9-2.4 1.3 0.2 2.6-1.3 2.6 0 2.6-1 1.4-16.9-3.2-2.7-6.6-0.3-1.4 0.9-0.4 0.4 1.8 4.2-1 4.6 0.2 3.4 0.2 3.3-4.4 3.7-4.1 3-4 1.3 2.2z"        data-name="United Arab Emirates"      />      <path        d="M 669.1 851.7 666.1 851.5 661.1 851.5 655.1 837.9 658.2 840.7 662.5 845.3 670.3 849 677.6 850.5 676.8 853.5 672.4 853.8 669.1 851.7 Z M 638.6 644.7 649.9 655.1 654.5 656.1 661.8 660.9 667.7 663.4 668.8 666.2 664.6 676 670.4 677.7 676.7 678.7 680.9 677.7 685.2 672.7 685.5 667.1 688.1 665.8 691.3 669.6 691.7 674.7 687.5 678.2 684.2 680.8 678.9 687.1 672.9 695.8 672.4 701 672 707.6 673.2 714 672.3 715.4 672.7 719.5 673 722.9 680.8 728.4 681 732.8 684.9 735.6 685.2 738.7 681.9 746.9 674.9 750.4 664.7 751.7 658.7 751 660.8 754.9 660.9 759.6 662.7 762.8 660.2 765.1 655.1 766 649.5 763.6 648 765.3 650.5 771.6 654.5 773.5 656.8 771.5 659.3 774.8 655.1 776.8 652.2 780.8 653.4 787.1 653.3 790.5 648.5 790.5 645.5 793.7 645.6 798.5 652.1 803.1 657.3 804.3 657.5 810 652.9 813.5 652.3 820.8 648.8 823.2 647.9 826.1 652.1 832.6 656.7 836.1 654.6 835.8 649.7 834.8 637.6 834 634.1 830.4 632.2 825.8 629.1 826.2 626.5 823.9 623.4 817.4 626.1 814.6 626.2 810.7 624.4 807.5 625.1 802.1 624 793.8 622.2 790.1 624 788.9 622.6 786.5 619.8 785.3 620.6 782.6 617.5 780.2 613.8 772.9 615.5 771.6 612.2 763.8 611.4 757.3 611.2 751.6 613.7 749.3 610.4 743 608.8 737.2 611.8 733 610.4 727.6 612 721.4 610.6 715.5 609 714.3 604.1 703.2 606.2 696.6 604.5 690.4 605.4 684.5 608 678.5 611.3 674.5 609.3 672 610.1 669.9 608.5 659.2 614.1 656.1 615.3 649.4 614.4 647.8 618.4 642 625.9 643.6 629.6 648.2 631.2 643 637.6 643.3 638.6 644.7 Z"        data-name="Argentina"      />      <path        d="M1230.8 253l-1.8 0.2-2.8-3.7-0.2-1-2.3 0-1.9-1.7-1 0.1-2.4-1.8-4.2-1.6-0.1-3.1-1.3-2.2 7-1 1.4 1.6 2.2 1.1-0.7 1.6 3.2 2.2-1.1 2.1 2.6 1.7 2.5 1 0.9 4.5z"        data-name="Armenia"      />      <path        d="M 1743 763.6 1746.7 765.8 1750 764.9 1754.9 763.7 1757.7 764.1 1753.2 771.7 1749.9 773.8 1745.9 779 1745.3 777.2 1738.7 781.6 1737.9 781.3 1734.9 781.1 1735.4 775.7 1737.4 771.5 1738 765.9 1740 763 1743 763.6 Z M 1793.5 590.2 1794.7 595.2 1798.7 592.8 1800.1 595.5 1802.4 598 1801.3 600.9 1801.5 606.4 1801.7 609.6 1803 610.4 1803.4 615.9 1802.2 619.2 1803 623.5 1808.4 626.9 1811.6 629.9 1814.8 632.7 1813.7 634.3 1816 638.3 1816.5 645.3 1819.1 643.9 1820.6 646.6 1822.2 645.7 1821.5 652.5 1824.4 656.4 1826.3 658.8 1829.1 664 1829.1 669.2 1828.1 672.9 1826.3 676.8 1827 682.3 1824.5 688 1822.4 691 1818.6 696.7 1817.1 700.4 1814 705 1809 710.8 1803.5 714 1799.1 718.9 1795.8 722.1 1791.4 727.6 1787.7 730.8 1783.8 735.6 1780.7 740 1779.9 742.1 1775.6 744.3 1769.5 744.5 1763.2 747.2 1759.4 749.6 1754.6 752.4 1751.9 749.5 1749.3 748.4 1751.9 745.1 1748.4 746.3 1741.2 750.9 1737.6 749.2 1735.2 748.2 1732.4 747.7 1728.3 745.9 1727 741.9 1728.5 737.1 1728.9 733.8 1727.5 731.2 1722.8 730.5 1726 727.3 1726.9 722.6 1722.2 727 1716.9 728.2 1721.4 724.7 1723.9 721 1727.4 717.8 1729 713.1 1722.2 718.5 1717.9 720.7 1713.6 725.8 1710.6 723.2 1712.3 719.8 1710.9 715.1 1709.1 712.7 1710.7 711.2 1705.4 707.3 1701.6 707.2 1697.6 704 1687.7 704.6 1679.8 706.9 1672.9 709.1 1667.9 708.7 1660.9 712 1655.6 713.4 1653.3 716.8 1650.3 719.4 1645.6 719.6 1642 720.1 1637.8 719 1633.6 719.7 1629.8 720 1625.3 723.4 1623.8 723.1 1620.4 724.9 1617 726.9 1613.2 726.7 1609.7 726.7 1605.6 722.6 1603.2 721.4 1604.7 717.7 1607.6 716.8 1609.1 715.4 1609.7 713.1 1612 708.6 1612.7 704.8 1612 698.3 1612.2 694.6 1613.6 691 1612.7 686.8 1613 684.9 1611.3 682.3 1612 677.3 1610.1 672.2 1610 669.5 1611.8 672.3 1611.3 666.3 1613.6 668.2 1614.7 670.7 1615.3 667.4 1613.7 662.3 1613.6 660.3 1612.8 658.4 1614.1 654.7 1615.6 653.1 1616.9 649.9 1617 646.1 1620.1 641.5 1619.7 646.4 1622.8 642 1627.7 639.8 1630.9 637.1 1635.6 634.7 1638.2 634.2 1639.6 635 1644.4 632.6 1647.9 631.9 1649 630.5 1650.5 629.9 1653.6 630.1 1659.8 628.2 1663.3 625.3 1665.3 621.9 1669.2 618.7 1669.9 616.1 1670.6 612.6 1675.5 607.1 1676.9 612.7 1679.5 611.4 1678 608.4 1680.3 605.3 1682.5 606.7 1684 601.8 1687.5 598.6 1689.3 596.1 1692.2 595 1692.6 593.2 1694.9 593.9 1695.3 592.3 1697.9 591.4 1700.7 590.5 1704.4 593.5 1707 597.3 1710.5 597.3 1714 597.9 1713.3 594.4 1716.8 589.3 1719.5 587.6 1718.9 586 1721.8 582.3 1725.5 580 1728.2 580.8 1733.1 579.6 1733.4 576.3 1729.5 574.2 1732.6 573.3 1736.2 574.9 1738.9 577.5 1743.4 579.1 1745.1 578.5 1748.4 580.5 1751.9 578.6 1753.9 579.2 1755.4 577.9 1757.6 581.1 1755.6 584.6 1753.1 587.2 1751.2 587.4 1751.5 589.9 1749.3 593.1 1746.8 596.3 1747 598.1 1750.8 601.7 1754.8 603.7 1757.3 605.9 1760.6 609.7 1762.2 609.7 1764.8 611.4 1765.3 613.4 1770.2 615.5 1774.3 613.3 1776.1 609.9 1777.8 607 1779.1 603.5 1781.7 598.4 1781.5 595.3 1782.2 593.4 1782.1 589.8 1783.5 584.9 1784.8 583.6 1784.2 581.5 1786 578.1 1787.5 574.6 1787.9 572.7 1790.2 570.3 1791.5 573.5 1791.4 577.5 1792.7 578.3 1792.6 581 1794.2 584.2 1794.1 587.9 1793.5 590.2 Z"        data-name="Australia"      />      <path        d="M1070.6 190.8l-0.3 0.8 0.7 2.1-0.2 2.6-2.8 0 1.1 1.4-1.3 4-0.9 1.1-4.4 0.1-2.4 1.5-4.2-0.5-7.3-1.7-1.3-2.1-4.9 1.1-0.5 1.2-3.1-0.9-2.6-0.2-2.3-1.2 0.7-1.5-0.2-1.1 1.4-0.3 2.7 1.7 0.6-1.7 4.4 0.3 3.5-1.1 2.4 0.2 1.7 1.3 0.4-1.1-1-4.1 1.7-0.8 1.6-2.9 3.8 2.1 2.6-2.6 1.7-0.5 4 1.9 2.3-0.3 2.4 1.2z"        data-name="Austria"      />      <path        d="M 1229 253.2 1225.2 252.3 1222 249.4 1220.8 246.9 1221.8 246.8 1223.7 248.5 1226 248.5 1226.2 249.5 1229 253.2 Z M 1235.3 236.2 1237.8 233.6 1241.3 236.9 1244.9 241.5 1247.4 241.8 1249.3 243.5 1245.1 244 1245.2 249 1244.8 251.2 1243.1 252.7 1243.9 255.8 1242.6 256.2 1238.7 252.8 1239.9 249.7 1238 247.8 1236.1 248.3 1230.8 253 1229.9 248.5 1227.4 247.5 1224.8 245.8 1225.9 243.7 1222.7 241.5 1223.4 239.9 1221.2 238.8 1219.8 237.2 1220.9 236.1 1225.1 238 1228 238.3 1228.6 237.6 1225.3 234.1 1226.5 233.3 1228 233.5 1232.3 237.3 1234.7 237.8 1235.3 236.2 Z"        data-name="Azerbaijan"      />      <path        d="M1154.9 530.4l-0.6 0.1 0-0.3-2-6.1-0.01-0.06-0.09-1.04-1.4-2.9 3.5 0.5 1.7-3.7 3.1 0.4 0.3 2.5 1.2 1.5 0 2.1-1.4 1.3-2.3 3.4-2 2.3z"        data-name="Burundi"      />      <path        d="M1016.5 177.1l-0.4 4.2-1.3 0.2-0.4 3.5-4.4-2.9-2.5 0.5-3.5-2.9-2.4-2.5-2.2-0.1-0.8-2.2 3.9-1.2 3.6 0.5 4.5-1.3 3.1 2.7 2.8 1.5z"        data-name="Belgium"      />      <path        d="M1006.7 427l-0.2 2.1 1.3 3.8-1.1 2.6 0.6 1.7-2.8 4-1.7 2-1.1 4 0.2 4.1-0.3 10.3-4.7 0.8-1.4-4.4 0.3-14.8-1.2-1.3-0.2-3.2-2-2.2-1.7-1.9 0.7-3.4 2-0.7 1.1-2.8 2.8-0.6 1.2-1.9 1.9-1.9 2 0 4.3 3.7z"        data-name="Benin"      />      <path        d="M988.5 406l-0.5 3.1 0.8 2.9 3.1 4.2 0.2 3.1 6.5 1.5-0.1 4.4-1.2 1.9-2.8 0.6-1.1 2.8-2 0.7-4.9-0.1-2.6-0.5-1.8 1-2.5-0.5-9.8 0.3-0.2 3.7 0.8 4.8-3.9-1.6-2.6 0.2-2 1.6-2.5-1.3-1-2.2-2.5-1.4-0.4-3.7 1.6-2.7-0.2-2.2 4.5-5.3 0.9-4.4 1.5-1.6 2.7 0.9 2.4-1.3 0.8-1.7 4.3-2.8 1.1-2 5.3-2.7 3.1-0.9 1.4 1.2 3.6 0z"        data-name="Burkina Faso"      />      <path        d="M1500.6 360.3l0.6 4.6-2.1-1 1.1 5.2-2.1-3.3-0.8-3.3-1.5-3.1-2.8-3.7-5.2-0.3 0.9 2.7-1.2 3.5-2.6-1.3-0.6 1.2-1.7-0.7-2.2-0.6-1.6-5.3-2.6-4.8 0.3-3.9-3.7-1.7 0.9-2.3 3-2.4-4.6-3.4 1.2-4.4 4.9 2.8 2.7 0.3 1.2 4.5 5.4 0.9 5.1-0.1 3.4 1.1-1.6 5.4-2.4 0.4-1.2 3.6 3.6 3.4 0.3-4.2 1.5 0 4.4 10.2z"        data-name="Bangladesh"      />      <path        d="M1132.6 221.6l-2.3 2.6-1.3 4.5 2.1 3.6-4.6-0.8-5 2 0.3 3.2-4.6 0.6-3.9-2.3-4 1.8-3.8-0.2-0.8-4.2-2.8-2.1 0.7-0.8-0.6-0.8 0.6-2 1.8-2-2.8-2.7-0.7-2.4 1.1-1.4 1.8 2.6 1.9-0.4 4 0.9 7.6 0.4 2.3-1.6 5.9-1.5 4 2.3 3.1 0.7z"        data-name="Bulgaria"      />      <path        d="M1083 214.3l1.9-0.1-1.1 2.8 2.7 2.5-0.5 2.9-1.1 0.3-0.9 0.6-1.6 1.5-0.4 3.5-4.8-2.4-2.1-2.7-2.1-1.4-2.5-2.4-1.3-1.9-2.7-3 0.8-2.6 2 1.5 1-1.4 2.3-0.1 4.5 1.1 3.5-0.1 2.4 1.4z"        data-name="Bosnia and Herzegovina"      />      <path        d="M1141.6 162.7l-3.9-0.2-0.8 0.6 1.5 2 2 4-4.1 0.3-1.3 1.4 0.3 3.1-2.1-0.6-4.3 0.3-1.5-1.5-1.7 1.1-1.9-0.9-3.9-0.1-5.7-1.5-4.9-0.5-3.8 0.2-2.4 1.6-2.3 0.3-0.5-2.8-1.9-2.8 2.8-1.3-0.4-2.4-1.7-2.3-0.6-2.7 4.7 0 4.8-2.3 0.5-3.4 3.6-2-1-2.7 2.7-1 4.6-2.3 5.3 1.5 0.9 1.5 2.4-0.7 4.8 1.4 1.1 2.9-0.7 1.6 3.8 4 2.1 1.1 0 1.1 3.4 1.1 1.7 1.6-1.6 1.3z"        data-name="Belarus"      />      <path        d="M487.8 399.8l-1.7 0 1.3-7.2 0.7-5.1 0.1-1 0.7-0.3 0.9 0.8 2.5-3.9 1.1-0.1-0.1 1 1 0-0.3 1.8-1.3 2.7 0.4 1-0.9 2.3 0.3 0.6-1 3.3-1.3 1.7-1.1 0.2-1.3 2.2z"        data-name="Belize"      />      <path        d="M662.5 631.4l-0.3-2-5.4-3.3-5.2-0.1-9.6 1.9-2.1 5.6 0.2 3.5-1.5 7.7-1-1.4-6.4-0.3-1.6 5.2-3.7-4.6-7.5-1.6-4 5.8-3.9 0.9-3.1-8.9-3.7-7.2 1.1-6.2-3.2-2.7-1.2-4.6-3.2-4.4 2.9-6.9-2.9-5.4 1.1-2.2-1.2-2.4 1.9-3.2-0.3-5.4 0-4.6 1.1-2.1-5.5-10.4 4.2 0.6 2.9-0.2 1.1-1.9 4.8-2.6 2.9-2.4 7.3-1.1-0.4 4.8 0.9 2.5-0.3 4.3 6.5 5.7 6.4 1.1 2.3 2.4 3.9 1.3 2.5 1.8 3.5 0 3.4 1.9 0.5 3.7 1.2 1.9 0.3 2.7-1.7 0.1 2.8 7.5 10.7 0.3-0.5 3.7 0.8 2.5 3.2 1.8 1.7 4-0.6 5.1-1.3 2.8 0.8 3.6-1.6 1.4z"        data-name="Bolivia"      />      <path        d="M665.8 489.6l3.1 0.6 0.6-1.4-1-1.2 0.6-1.9 2.3 0.6 2.7-0.7 3.2 1.4 2.5 1.3 1.7-1.7 1.3 0.2 0.8 1.8 2.7-0.4 2.2-2.5 1.8-4.7 3.4-5.9 2-0.3 1.3 3.6 3 11.2 3.1 1.1 0.1 4.4-4.3 5.3 1.7 1.9 10.1 1 0.2 6.5 4.3-4.2 7.1 2.3 9.5 3.9 2.8 3.7-0.9 3.6 6.6-2 11 3.4 8.5-0.2 8.4 5.3 7.4 7.2 4.4 1.8 4.8 0.3 2.1 2 2 8.2 1.1 3.9-2.1 10.6-2.7 4.2-7.7 8.9-3.4 7.3-4 5.5-1.4 0.2-1.3 4.7 0.9 12-1.1 9.9-0.3 4.2-1.6 2.6-0.5 8.6-5.2 8.3-0.5 6.7-4.3 2.7-1.1 3.9-6 0-8.5 2.4-3.7 2.9-6 1.9-6.1 5.1-4.1 6.4-0.3 4.8 1.3 3.5-0.3 6.5-0.8 3.1-3.4 3.6-4.5 11.3-4 5-3.2 3.1-1.5 6.1-2.9 3.6-2.1-3.6 1.8-3.1-3.8-4.3-4.8-3.6-6.3-4.1-1.9 0.2-6.3-5-3.4 0.7 6-8.7 5.3-6.3 3.3-2.6 4.2-3.5-0.4-5.1-3.2-3.8-2.6 1.3 0.7-3.7 0.3-3.8-0.3-3.6-2.1-1.1-2 1-2.1-0.3-0.8-2.4-1.1-5.9-1.2-1.9-3.9-1.8-2.2 1.3-5.9-1.3-0.4-8.7-2-3.5 1.6-1.4-0.8-3.6 1.3-2.8 0.6-5.1-1.7-4-3.2-1.8-0.8-2.5 0.5-3.7-10.7-0.3-2.8-7.5 1.7-0.1-0.3-2.7-1.2-1.9-0.5-3.7-3.4-1.9-3.5 0-2.5-1.8-3.9-1.3-2.3-2.4-6.4-1.1-6.5-5.7 0.3-4.3-0.9-2.5 0.4-4.8-7.3 1.1-2.9 2.4-4.8 2.6-1.1 1.9-2.9 0.2-4.2-0.6-3.2 1.1-2.6-0.7-0.1-9.7-4.4 3.7-5-0.1-2.3-3.5-3.8-0.3 1-2.8-3.3-3.9-2.6-5.8 1.5-1.1-0.2-2.8 3.4-1.8-0.7-3.5 1.4-2.2 0.3-3 6.3-4.4 4.6-1.2 0.8-1 5.1 0.3 2.2-17.6 0.1-2.8-0.9-3.6-2.6-2.4 0.1-4.7 3.2-1 1.1 0.7 0.2-2.5-3.3-0.7 0-4 11 0.2 1.9-2.3 1.6 2.1 1 3.8 1.1-0.8 3.1 3.4 4.4-0.4 1.1-2 4.2-1.5 2.4-1.1 0.7-2.7 4.1-1.8-0.3-1.4-4.8-0.5-0.7-4.1 0.3-4.3-2.5-1.6 1.1-0.6 4.1 0.8 4.5 1.6 1.7-1.5 4.1-1 6.4-2.4 2.1-2.5-0.7-1.8 3-0.2 1.2 1.4-0.8 2.9 2 0.9 1.2 3-1.6 2.3-1 5.4 1.4 3.3 0.3 3 3.5 3 2.8 0.3 0.6-1.3 1.8-0.3 2.6-1.1 1.8-1.7 3.2 0.6 1.3-0.3z"        data-name="Brazil"      />      <path        d="M1633.1 472.8l2.2-2.4 4.6-3.6-0.1 3.2-0.1 4.1-2.7-0.2-1.1 2.2-2.8-3.3z"        data-name="Brunei Darussalam"      />      <path        d="M1488.8 323.5l2.6 2.1 0.5 3.9-4.5 0.2-4.7-0.4-3.2 1-5.5-2.5-0.4-1.2 2.6-4.8 2.6-1.6 4.3 1.4 2.9 0.2 2.8 1.7z"        data-name="Bhutan"      />      <path        d="M1127.6 615.7l1.9 5.1 1.1 1.2 1.6 3.7 6.1 7 2.3 0.7-0.1 2.3 1.5 4.1 4.3 1 3.4 2.9-8.1 4.7-5.2 4.8-2 4.3-1.8 2.4-3 0.5-1.2 3.1-0.6 2-3.6 1.4-4.5-0.3-2.5-1.8-2.3-0.7-2.8 1.4-1.5 3.1-2.7 1.9-2.8 2.9-4 0.7-1.1-2.3 0.6-3.9-3-6.1-1.4-1 0.6-18.7 5.5-0.2 0.8-22.9 4.2-0.2 8.7-2.3 2 2.7 3.7-2.5 1.7 0 3.2-1.5 1 0.5z"        data-name="Botswana"      />      <path        d="M1121.3 446.5l3.9 2.5 3.1 2.6 0.1 2.1 3.9 3.3 2.4 2.8 1.4 3.8 4.3 2.6 0.9 2-1.8 0.7-3.7-0.1-4.2-0.7-2.1 0.5-0.9 1.6-1.8 0.2-2.2-1.4-6.3 3.2-2.6-0.6-0.8 0.5-1.6 3.9-4.3-1.3-4.1-0.6-3.6-2.4-4.7-2.2-3 2.1-2.2 3.2-0.5 4.5-3.6-0.3-3.9-1.1-3.3 3.4-3 6-0.6-1.9-0.3-2.9-2.6-2.1-2.1-3.3-0.5-2.3-2.7-3.4 0.5-1.9-0.6-2.7 0.4-5 1.4-1.1 2.8-6.5 4.6-0.5 1-1.7 1 0.2 1.4 1.4 7.1-2.4 2.4-2.5 2.9-2.3-0.6-2.2 1.6-0.6 5.5 0.4 5.2-3 4-7 2.8-2.6 3.6-1.1 0.7 2.7 3.3 4 0 2.7-0.8 2.6 0.4 2 1.9 1.9 0.5 0.3z"        data-name="Central African Republic"      />      <path        d="M 665.9 203.6 669.3 204.5 674 204.3 670.7 206.9 668.7 207.3 663.2 204.6 662.6 202.5 665.1 200.6 665.9 203.6 Z M 680.3 187.6 677.9 187.7 672.1 185.8 668.6 182.8 670.5 182.3 676.4 183.9 680.6 186.5 680.3 187.6 Z M 372.4 191.3 369.3 192.2 363 189.4 363 187.2 360.1 185 360.4 183.2 356.1 182.1 356.7 178.7 358.2 177.3 362.3 178.6 364.7 179.6 368.8 180.2 369 182.4 369.4 185.3 372.6 187.9 372.4 191.3 Z M 711.5 177.8 706.5 183.2 710.4 181.1 713.3 182.5 710.9 184.6 714.7 186.3 717.5 184.8 721.8 186.7 719 191.3 722.8 190.2 722.5 193.5 723 197.4 719.4 203 717 203.2 714.1 202 716.6 196.9 715.4 196.1 708.1 201.5 705.1 201.3 709.5 198.3 705.1 196.8 699.6 197.2 690 197 689.8 195.2 693.6 192.9 691.9 191.3 697.3 187.5 705.5 177.6 709.7 174.1 714.7 172 716.8 172.2 715.3 173.9 711.5 177.8 Z M 351.5 156.4 353 157.2 358 156.7 350.8 163.6 351.1 168.6 349.2 168.6 348.5 165.8 349 162.9 348.2 161 349.5 158.3 351.5 156.4 Z M 634.9 108.9 631.3 111.9 629.6 111.4 629.5 109.7 629.9 109.3 632.7 107.6 634.4 107.7 634.9 108.9 Z M 625.2 105.7 618 108.9 615 108.7 615 107.2 620 104.5 626 104.6 625.2 105.7 Z M 622.1 88.9 621.2 91.4 623.9 90.5 625.4 92 628.9 94 632.7 95.7 631.3 98.4 634.8 98 636.7 99.9 631.7 101.7 625.8 100.3 625 97.7 618.7 100.8 610.5 103.7 611.2 100.4 604.9 100.9 610.6 98.1 614.2 93.6 619.3 88.5 622.1 88.9 Z M 667 80.6 662.1 80.9 662.8 78.2 666.6 75.1 670.9 74.4 673.2 75.9 671.7 78.2 670.8 79 667 80.6 Z M 592.5 69.9 588.4 71.8 584.2 70.2 580.3 70.7 576.9 68.3 581.9 66.6 586.8 64.3 589.8 65.8 591.4 66.8 591.8 67.8 592.5 69.9 Z M 645.5 212.5 643.3 208.9 646.2 200.4 644.6 198.6 640.9 199.6 639.8 198 634.3 202.7 631.1 207.6 628.3 210.5 625.8 211.5 624.1 211.8 623 213.3 613.7 213.3 605.9 213.4 603.2 214.5 596.4 218.9 596.4 218.8 595.5 218.4 593.5 219.3 591.6 220.6 589.8 219.5 585.1 220.3 581.2 221.2 579.3 222 577 224.1 578.8 224.8 580.5 224.4 580.8 224.4 580.5 226.3 575.7 227 572.9 227.8 571.2 228.8 568.6 228.2 567 228.5 564.1 230.3 559.5 232.3 556.8 231.9 558.8 229.7 562.5 226.2 566.6 224.1 567.7 222.3 568.6 219.3 572.4 215.8 573.3 211.8 574.4 215.7 578.2 216.6 580.6 214.5 579.2 209.7 578.3 207.7 574.3 206.5 570.5 205.8 566.6 205.8 563.2 205 562.8 203.6 561.4 204.5 560.2 204.3 562.1 202.2 560.3 201.4 562.2 199 561 197.2 562.7 195.4 557.5 194.5 557.4 190.9 556.6 190.1 553.3 189.9 549.2 188.7 547.7 189.5 545.9 191 542.6 192 539.5 194.5 534.1 192.8 529.7 193.6 525.8 191.7 521.2 190.7 517.9 190.3 516.9 189.3 517.8 185.9 516.1 185.9 514.8 188.3 504.6 188.3 487.6 188.3 470.8 188.3 455.9 188.3 441.1 188.3 426.4 188.3 411.3 188.3 406.5 188.3 391.8 188.3 377.7 188.3 377 188.3 371.6 182.2 370 179.5 363 176.9 364.3 171.4 367.9 167.7 363.8 165 366.9 160.1 364.8 155.7 367.3 152.5 372.4 149.6 375.6 145.8 371 142 372.4 135.1 373.5 130.9 371.9 128.2 371.1 125.8 371.7 122.7 365.2 124.6 357.6 127.9 357.3 124.1 356.8 121.5 354 119.9 349.8 119.7 385.4 87 410 66.6 416 67.9 419.3 70.5 423 71 429.3 68.8 436.3 67.1 441.6 67.7 450.5 65.4 458.7 64.1 458.9 66.3 463.4 65 467.3 62.5 469.4 63.1 470.8 67.9 480.3 64.2 476.4 68.3 482.4 67.4 485.6 65.9 490.2 66.2 494.1 68.4 501.6 70.4 506.3 71.3 510.7 71 513.6 73.8 505.1 76.5 511.5 77.6 523.4 77 527.8 76 529.2 79.3 536.3 76.6 534.2 74.2 538.7 72.4 543.9 72.1 547.8 71.6 549.9 72.9 551.4 75.8 556.4 75.4 561.7 77.9 568.9 77 574.9 77.1 577.3 73.7 581.8 72.8 586.7 74.6 582.4 79.8 588.6 75.4 591.8 75.6 598.2 70.1 596.6 66.8 593.7 64.6 599.2 58.7 607.4 54.9 611.9 55.8 613.9 58.1 614.3 64.1 608.5 66.7 615.2 67.8 610.8 73.3 619.7 69.1 621.9 72.6 617.6 76.6 618.9 80.3 626.2 76.4 632.7 71.6 637.4 65.7 642.9 66.1 648.3 66.9 651.9 69.6 650.2 72.3 645.1 75.2 646 78.1 643.6 80.8 632.7 84.7 626.2 85.6 623 83.9 619.7 86.7 612.3 91.4 609.3 93.9 601.6 97.7 595.1 98.1 590 100.5 587.1 104.3 581.4 105 572.7 109.7 563.3 116.2 558.3 120.8 553.4 127.7 559.4 128.7 557.9 134.2 557.1 138.8 564.4 137.6 571.4 140.2 574.7 142.5 576.4 145.3 581.3 147 584.9 149.5 592.5 149.9 597.3 150.5 593.7 155.7 592 161.8 592.1 168.7 596.5 174.6 601.2 172.6 606.8 166.2 609.1 156.6 607.4 153.4 616.4 150.5 623.9 146.3 628.7 142.1 630.4 138.1 630 133 626.8 128.5 635.7 122.3 636.7 117 640.6 108 644.4 106.6 651.1 108.2 655.3 108.8 659.8 107.2 662.9 109.2 666.5 112.6 666.7 114.8 674.4 115.3 671.8 120.2 669.5 127.6 673.3 128.6 674.9 132.1 683.1 128.8 690.6 122.2 694.8 119.5 695.9 124.8 698.5 132.3 700.5 139.5 697.1 143.3 701.9 146.7 704.8 150.1 711.7 151.7 714.1 153.6 714.1 158.8 717.5 159.6 718.6 161.9 716.6 168.8 712.3 171.1 708.1 173.3 699.3 175.5 691.4 180.5 682.8 181.6 672.7 180.2 665.4 180.2 660.1 180.6 654.4 185.1 647 187.9 636.9 196.1 629 201.9 633.7 200.9 644.6 192.6 656.9 187.4 664.5 186.8 667.8 189.9 661.7 194.1 661.1 200.8 661.2 205.6 666.8 208.7 675.4 207.8 682.6 200.7 681.6 205.3 684.1 207.6 676.7 211.7 664.3 215.5 658.5 218 651.3 222.6 647.6 222.1 649.1 216.8 659.5 211.5 651.4 211.7 645.5 212.5 Z M 539 48.7 534.3 51.1 544.8 49.6 547.4 52.2 554.7 49.5 556.5 51.2 554.3 56.3 558.6 54.2 561.4 48.9 565.7 48.1 568.7 48.9 570.9 51 568.2 56.1 565.8 59.8 570 62.4 575 65 572.4 67.3 565.3 67.8 566.1 69.8 562.9 71.8 556.2 71 550.5 69.5 545.4 69.8 535.9 71.7 524.6 72.5 516.7 73 517 70.4 512.9 69 508.6 69.6 508 65.3 511.3 64.7 518.6 63.8 524.1 64.1 530.3 63.1 523.8 61.9 514.7 62.3 509 62.2 509 60.3 520.7 58.1 514.4 58.2 509 56.8 516.8 52.9 522 50.8 536.2 47.7 539 48.7 Z M 578.5 47.2 571.5 50.6 569.2 47 571.3 46.2 576.8 46 578.5 47.2 Z M 687.1 48.8 686.4 50.2 682.3 50.1 678.2 50 673.3 50.7 672.4 50.3 670.3 47.6 672 45.8 674.2 45.4 682.6 46 687.1 48.8 Z M 647.3 48.5 647.6 51.7 654.8 47.6 666.5 45.5 668.8 50.8 665.6 54.2 674.6 52.7 679.9 50.6 686.7 53.2 690.4 55.7 689.3 58 697.5 56.8 699.4 60.2 707.8 62.3 710 64.4 710.9 69.5 701.8 72 709.5 75.6 715.4 76.8 718.7 81.8 725.2 82.2 721.9 86.1 711 92.6 707 90.2 703.2 84.8 697.3 85.5 695 88.8 697.7 92 702.2 94.6 703.2 96.1 703.1 101.8 699.5 105.9 694.8 104.3 686.2 99.8 689.8 104.7 692.6 108.2 692.3 110.2 681.4 107.9 673.8 104.5 670 101.8 672.4 100.1 667.6 97.2 662.9 94.5 662 96.1 648.9 97 646.5 95.1 651.9 90.9 660 90.8 669.3 90.1 669.1 88.1 672.2 85.3 681 79.9 681.4 77.4 680.9 75.6 676.2 72.9 669.1 71.1 672.6 69.7 670.6 66.3 667.2 66 665.3 64.2 662 65.8 654.1 66.5 640.1 65.3 632.7 63.7 626.8 62.9 624.9 61 631.2 58.6 625.5 58.6 628.8 53.3 635.9 48.7 641.9 46.6 653.1 45.2 647.3 48.5 Z M 596.9 45 600.5 46.1 608.1 45.4 607.6 46.9 601.5 49.4 605.3 51.6 600.1 56.3 591.7 58.3 588.3 57.9 587.4 55.9 581.5 51.9 583.2 50.2 590.6 50.8 589.7 47.5 596.9 45 Z M 619.5 50.5 611.7 54.4 607.3 54.2 609.1 49.6 611.7 47.1 615.9 44.9 621.1 43.5 629 43.7 635.2 44.9 625.1 49.5 619.5 50.5 Z M 503.7 57.7 490.2 60.3 490.8 58 484.8 55.2 489.2 53 496.7 49.2 504.3 45.8 504.7 42.7 518.7 41.9 522.9 43 532.4 43.3 534.3 44.7 535.9 46.9 529.4 48.2 515.5 51.8 506.3 55.5 503.7 57.7 Z M 628.9 39.3 624.8 41.2 619.6 40.8 616.4 39.5 620.9 37.3 627.8 35.9 629.2 37.7 628.9 39.3 Z M 620.1 30.6 620.3 32.9 617.5 35.4 611.7 39.2 604.8 39.7 601.6 38.9 605 36 598.4 36.3 602.7 32.5 606.5 32.7 614.2 31 619.1 31.3 620.1 30.6 Z M 580.7 33.2 580 34.9 584.4 34.1 588 34.3 585.7 36.8 580.6 39.1 566.7 39.9 554.4 42.1 548.4 42.2 549.9 40.6 560.6 38.3 542.7 38.9 538.5 38 550.2 33.2 555.6 31.8 563.9 33.5 566.8 36.4 572.9 36.8 573.6 32.1 579.4 30.3 582.5 30.8 580.7 33.2 Z M 636.4 28.8 638.7 30.4 646.1 30.4 647.5 32 644.7 33.8 647.8 34.9 649 36.1 653.9 36.3 659 36.7 666.1 35.7 674.2 35.2 680 35.6 682.3 37.5 681.3 39.5 677.7 40.9 671 42 666.7 41.3 654.9 42.1 646.9 42.2 641.3 41.6 632.7 40 634.3 37.2 636.4 34.8 635 32.6 628 32 625.4 30.5 629.2 28.5 636.4 28.8 Z M 560.7 26.2 554.9 29.9 549.6 31.6 545.8 31.8 535.9 33.9 528.8 34.7 525.2 33.6 536.9 29.9 549.1 26.8 554.6 26.9 560.7 26.2 Z M 641.9 26.8 640.1 26.9 633.5 26.6 634.2 25.3 641.4 25.4 643 26.2 641.9 26.8 Z M 583.1 25.9 574.3 27.3 571 25.8 576.1 24.3 582.1 23.8 586.2 24.5 583.1 25.9 Z M 590.9 21.7 585.2 22.6 579.2 22.6 580.2 21.9 585.9 20.6 587.6 20.8 590.9 21.7 Z M 637.7 24.2 631.1 25.2 629.5 24.1 630.1 22.4 632.3 20.5 636.7 20.7 638.4 21 640.7 22.6 637.7 24.2 Z M 623.9 23 622.8 24.9 617.5 24.4 613.5 22.9 605.7 22.7 611 21.4 608.2 20.3 610.4 18.5 616.5 19.1 624 20.8 623.9 23 Z M 678 16.9 680.7 18.4 674.2 19.7 663.6 23.2 656.8 23.5 650 22.9 648.4 21 650.5 19.4 654.8 18.2 648.2 18.2 646.2 16.7 646.6 14.8 651.5 12.9 655.6 11.6 659.6 11.3 659.3 10.3 667.6 10.1 669.2 12.3 673.9 13.2 678.7 14.1 678 16.9 Z M 757.2 2.9 765.9 3.2 772.6 3.7 777.8 4.7 776.7 5.7 766.9 7.4 757.9 8.2 753.9 9.1 761.4 9.1 750.9 11.6 744.1 12.8 734.8 16.3 726.7 17 723.6 18 712.3 18.4 716.7 19 713.4 19.8 714.1 22.1 709.1 23.7 702.2 25 698.7 26.8 692.1 28.3 691.6 29.4 698.1 29.2 697 30.4 684.3 33.3 675.8 31.9 664.1 32.7 659.1 32.1 652.3 31.8 654.4 29.5 662.4 28.4 664.4 25 667 24.7 674.5 26.7 672.8 23.7 667.9 22.8 672.9 21 680.5 19.9 683.3 18.3 680.3 16.6 681.4 14.4 690.8 14.5 693 15 700.3 13.4 693 12.9 680.4 13.2 676 11.8 675.2 10.1 672.7 8.9 673.8 7.6 679.8 6.8 684 6.7 691.4 6.1 698.2 4.6 702.1 4.8 704.5 5.9 709.5 3.9 714.7 3.3 721.2 2.9 731.6 2.7 732.9 3.1 743.2 2.5 750.2 2.7 757.2 2.9 Z"        data-name="Canada"      />      <path        d="M1034.4 197.5l0.2 1.1-0.7 1.5 2.3 1.2 2.6 0.2-0.3 2.5-2.1 1.1-3.8-0.8-1 2.5-2.4 0.2-0.9-1-2.7 2.2-2.5 0.3-2.2-1.4-1.8-2.7-2.4 1 0-2.9 3.6-3.5-0.2-1.6 2.3 0.6 1.3-1.1 4.2 0 1-1.3 5.5 1.9z"        data-name="Switzerland"      />      <path        d="M 1602.2 381.9 1597.9 385 1593 383 1592 377.5 1594.2 374.6 1600 372.8 1603.3 372.9 1604.9 375.4 1602.9 378.2 1602.2 381.9 Z M 1625.6 185.5 1634.6 190 1640.6 195.8 1648.2 195.8 1650.8 193.4 1657.7 191.5 1659 197.2 1658.7 199.5 1661.5 206.3 1662.1 212.5 1655.2 211.4 1652.3 213.6 1657 219 1660.9 226.5 1658.4 226.6 1660.3 229.9 1654.8 226.1 1654.8 229.7 1648.4 232.4 1651.2 235.8 1646.6 235.5 1643 233.5 1641.9 238.1 1638 241.5 1635.9 245.6 1629.6 247.4 1627.2 250.4 1622.4 252.2 1623.7 249.2 1621.4 246.7 1623.4 242.4 1618.9 239.1 1615.5 241.3 1611.9 245.8 1610.6 249.9 1605.6 250.2 1604.3 253.2 1609.1 257.5 1613.9 258.6 1615.3 261.4 1620.4 263.3 1624.2 258.7 1630.1 261.2 1633.6 261.4 1635.9 264.7 1629.2 266.5 1628.2 270 1624.4 273.2 1623.5 277.7 1630.6 281.2 1635.2 287.5 1640.7 293.4 1646.2 298.3 1647.8 303.1 1645 304.9 1647.4 308.3 1651.3 310.3 1652.1 315.5 1652.2 320.6 1649.4 321.2 1647.3 328.1 1645 336.6 1641.6 344.2 1635.2 350.1 1628.6 355.6 1622.5 356.3 1619.6 359.1 1617.3 357.1 1614.8 360.2 1607.6 363.5 1601.8 364.4 1601.1 371.2 1598 371.6 1595.8 366.9 1596.7 364.5 1588.9 362.4 1586.5 363.5 1580.6 361.8 1577.5 359.2 1577.8 355.5 1572.5 354.3 1569.4 351.9 1565.3 355.3 1560 356.1 1555.6 356 1552.9 357.6 1550.2 358.5 1552.2 365.9 1549.2 365.7 1548.4 364.2 1547.9 361.5 1544.1 363.4 1541.5 362.2 1537 359.8 1537.8 354.5 1534.1 353.2 1531.7 347.3 1526.1 348.4 1525.4 340.8 1529.6 335.4 1528.7 330.1 1527.4 325.2 1524.7 323.7 1522 319.9 1518.9 320.4 1512.8 319.4 1514 316.7 1510.4 312.7 1507.2 315.4 1502.3 313.9 1496.9 317.9 1493 322.7 1488.8 323.5 1486 321.8 1483.1 321.6 1478.8 320.2 1476.2 321.8 1473.6 326.6 1472.1 321.5 1469 322.9 1462.5 322.2 1456 320.8 1451 317.9 1446.5 316.7 1444 313.6 1440.7 312.7 1434.3 308.5 1429.5 306.5 1427.6 308 1419 303.5 1412.8 299.5 1409.6 292.4 1413.7 293.3 1413.1 290 1410.1 286.7 1409.3 281.5 1401.6 273.9 1392.1 271.4 1389.2 266.4 1384.5 263.4 1383 261.6 1381.2 258 1380.7 255.5 1377 254 1375.5 254.7 1372.4 248.7 1373.5 247.3 1372.3 245.8 1376.4 242.8 1379.6 241.5 1385.4 242.4 1386 238.3 1392.4 237.6 1393.4 235 1400.3 231.6 1400.5 230.2 1398.8 226.5 1401.7 224.9 1392.9 213.9 1402 211.4 1404 210 1403 198.7 1413.8 200.8 1415.4 197.9 1412.9 191.7 1416.7 191.1 1418.6 186.9 1420.3 186.4 1423.6 190.8 1429.3 194.1 1437.5 196.4 1443.3 201.5 1444.7 208.8 1447.7 211.6 1454.2 212.7 1461.4 213.5 1469.4 217.5 1472.8 218.2 1477.8 224 1482.5 227.8 1488.1 227.6 1499.4 229.1 1505.8 228.2 1511.4 229.1 1520.8 233 1527 233 1530.3 234.9 1534.7 231.5 1541.9 229.3 1549.5 229.1 1554.4 226.9 1556.4 223.5 1558.8 221.3 1556.9 219.2 1554 216.8 1554.5 212.7 1557.7 213.3 1563.6 214.6 1566.8 211.2 1573.2 208.8 1574.5 204.6 1577 202.8 1583.8 202 1588.2 202.7 1587.4 200.5 1580.2 196.1 1575 194.1 1572.5 196.4 1567 195.4 1564.7 196.2 1561.9 193.7 1561.6 187.4 1561 182.7 1568.4 185.1 1572.8 181.2 1570.9 178.4 1570.7 171.9 1572 169.9 1569.5 166.5 1565.8 165.1 1567.5 162 1572.6 160.9 1578.8 160.7 1587.4 162.6 1593.4 164.8 1601.1 171 1604.9 173.7 1609.4 177.5 1615.6 183.5 1625.6 185.5 Z M1657.9 355.5l-1.4 5.3-4-5.5-1.5-4.7 1.9-6.3 3.3-4.9 3 1.9-0.1 3.9-1.2 10.3z"        data-name="中国"      />      <path        d="M955.9 435.2l2.5 1.4 1 2.2 2.5 1.3 2-1.6 2.6-0.2 3.9 1.6 1.5 9.2-2.4 5.3-1.5 7.3 2.4 5.5-0.2 2.6-2.6 0-3.9-1.2-3.7 0-6.7 1.2-3.9 1.8-5.6 2.4-1.1-0.2 0.4-5.3 0.6-0.8-0.2-2.5-2.4-2.7-1.8-0.4-1.6-1.8 1.2-2.9-0.5-3.1 0.2-1.8 0.9 0 0.4-2.8-0.4-1.3 0.5-0.9 2.1-0.7-1.4-5.2-1.3-2.6 0.5-2.2 1.1-0.5 0.8-0.6 1.5 1 4.4 0 1-1.8 1 0.1 1.6-0.7 0.9 2.7 1.3-0.8 2.4-1z"        data-name="Côte d'Ivoire"      />      <path        d="M1072.8 454.2l-2.8 6.5-1.4 1.1-0.4 5 0.6 2.7-0.5 1.9 2.7 3.4 0.5 2.3 2.1 3.3 2.6 2.1 0.3 2.9 0.6 1.9-0.4 3.4-4.5-1.5-4.6-1.7-7.1-0.2-0.7-0.4-3.4 0.8-3.4-0.8-2.7 0.4-9.3-0.1 0.9-5.1-2.3-4.3-2.6-1-1.1-2.9-1.5-0.9 0.1-1.8 1.4-4.6 2.7-6.2 1.6 0 3.4-3.8 2.1-0.1 3.2 2.7 3.9-2.2 0.5-2.7 1.3-2.6 0.8-3.2 3-2.6 1.1-4.5 1.2-1.5 0.8-3.3 1.4-4.1 4.7-5 0.3-2.1 0.6-1.2-2.3-2.5 0.2-2.1 1.5-0.3 2.3 4.1 0.5 4.2-0.2 4.3 3.2 5.8-3.2 0-1.6 0.4-2.6-0.6-1.2 3 3.4 3.8 2.5 1.1 0.8 2.6 1.8 4.4-0.8 1.8z"        data-name="Cameroon"      />      <path        d="M1141.3 468.2l3.5 5.3 2.6 0.8 1.5-1.1 2.6 0.4 3.1-1.3 1.4 2.7 5.1 4.3-0.3 7.5 2.3 0.9-1.9 2.2-2.1 1.8-2.2 3.3-1.2 3-0.3 5.1-1.3 2.5-0.1 4.8-1.6 1.8-0.2 3.8-0.8 0.5-0.6 3.6 1.4 2.9 0.1 1-1.2 10.3 1.5 3.6-1 2.7 1.8 4.6 3.4 3.5 0.7 3.5 1.6 1.7-0.3 1.1-0.9-0.3-7.7 1.1-1.5 0.8-1.7 4.1 1.2 2.8-1.1 7.6-0.9 6.4 1.5 1.2 3.9 2.5 1.6-1.2 0.2 6.9-4.3 0-2.2-3.5-2-2.8-4.3-0.9-1.2-3.3-3.5 2-4.4-0.9-1.9-2.9-3.5-0.6-2.7 0.1-0.3-2-1.9-0.1-2.6-0.4-3.5 1-2.4-0.2-1.4 0.6 0.4-7.6-1.8-2.4-0.4-4 0.9-3.9-1.1-2.4-0.1-4.1-6.8 0.1 0.5-2.3-2.9 0-0.3 1.1-3.5 0.3-1.5 3.7-0.9 1.6-3.1-0.9-1.8 0.9-3.8 0.5-2.1-3.3-1.3-2.1-1.6-3.9-1.3-4.7-16.7-0.1-2 0.7-1.7-0.1-2.3 0.9-0.8-2 1.4-0.7 0.2-2.8 1-1.6 2-1.4 1.5 0.7 2-2.5 3.1 0.1 0.3 1.8 2.1 1.1 3.4-4 3.3-3.1 1.4-2.1-0.1-5.3 2.5-6.2 2.6-3.3 3.7-3.1 0.7-2 0.1-2.4 0.9-2.2-0.3-3.7 0.7-5.7 1.1-4 1.7-3.4 0.3-3.9 0.5-4.5 2.2-3.2 3-2.1 4.7 2.2 3.6 2.4 4.1 0.6 4.3 1.3 1.6-3.9 0.8-0.5 2.6 0.6 6.3-3.2 2.2 1.4 1.8-0.2 0.9-1.6 2.1-0.5 4.2 0.7 3.7 0.1 1.8-0.7z"        data-name="Democratic Republic of the Congo"      />      <path        d="M1090.9 479.3l-0.3 3.9-1.7 3.4-1.1 4-0.7 5.7 0.3 3.7-0.9 2.2-0.1 2.4-0.7 2-3.7 3.1-2.6 3.3-2.5 6.2 0.1 5.3-1.4 2.1-3.3 3.1-3.4 4-2.1-1.1-0.3-1.8-3.1-0.1-2 2.5-1.5-0.7-2.1-2.2-1.7 1.1-2.3 2.8-4.6-6.8 4.3-3.6-2.1-4.2 2-1.6 3.8-0.8 0.4-2.9 3.1 3.1 5 0.3 1.7-3 0.7-4.3-0.6-5-2.7-3.8 2.5-7.5-1.4-1.2-4.2 0.5-1.6-3.3 0.4-2.8 7.1 0.2 4.6 1.7 4.5 1.5 0.4-3.4 3-6 3.3-3.4 3.9 1.1 3.6 0.3z"        data-name="Republic of Congo"      />      <path        d="M584.4 426.2l-3.7 1.1-1.6 3.2-2.3 1.8-1.8 2.4-0.9 4.6-1.8 3.8 2.9 0.4 0.6 2.9 1.2 1.5 0.3 2.5-0.7 2.4 0.1 1.4 1.4 0.5 1.2 2.2 7.3-0.6 3.3 0.8 3.8 5.6 2.3-0.7 4.1 0.3 3.2-0.7 2 1.1-1.2 3.4-1.3 2.2-0.6 4.6 1.1 4.3 1.5 1.9 0.2 1.4-2.9 3.2 2 1.4 1.5 2.3 1.6 6.4-1.1 0.8-1-3.8-1.6-2.1-1.9 2.3-11-0.2 0 4 3.3 0.7-0.2 2.5-1.1-0.7-3.2 1-0.1 4.7 2.6 2.4 0.9 3.6-0.1 2.8-2.2 17.6-2.9-3.4-1.7-0.1 3.5-6.6-4.4-3-3.4 0.6-2.1-1.1-3.1 1.7-4.2-0.9-3.5-6.7-2.6-1.6-1.8-3.1-3.8-3-1.5 0.6-2.4-1.5-2.8-2.1-1.6 1-4.8-0.9-1.4-2.8-1.1 0.1-5.6-3.6-0.7-2 2.1-0.5-0.2-3.2 1.4-2.4 2.8-0.4 2.5-4 2.2-3.4-2-1.5 1.2-3.7-1.1-5.9 1.3-1.7-0.7-5.4-2.2-3.5 0.9-3.1 1.8 0.5 1.1-1.9-1.1-3.8 0.7-0.9 2.9 0.2 4.5-4.5 2.4-0.7 0.1-2.1 1.4-5.5 3.4-2.9 3.5-0.2 0.6-1.3 4.4 0.5 4.6-3.2 2.3-1.4 2.9-3.1 2 0.4 1.3 1.7-1.2 2.1z"        data-name="Colombia"      />      <path        d="M514.6 431.6l1.2 3.5 2 2.6 2.5 2.7-2.2 0.6-0.1 2.6 1.1 0.9-0.9 0.8 0.2 1.1-0.6 1.3-0.3 1.3-3-1.4-1.1-1.4 0.7-1.1-0.1-1.4-1.5-1.5-2.2-1.3-1.8-0.8-0.3-1.9-1.4-1.1 0.2 1.8-1.2 1.6-1.2-1.8-1.7-0.7-0.7-1.2 0.1-2 0.9-2-1.5-0.9 1.4-1.3 0.9-0.8 3.6 1.7 1.3-0.8 1.8 0.5 0.8 1.3 1.7 0.5 1.4-1.4z"        data-name="Costa Rica"      />      <path        d="M544.8 355.7l1.9 2.3 5.2-0.7 1.8 1.5 4.2 4 3.2 2.9 1.8-0.1 3.2 1.3-0.6 1.8 4 0.3 3.9 2.6-0.8 1.5-3.8 0.8-3.8 0.3-3.7-0.5-8.1 0.6 4.2-3.5-2.1-1.7-3.6-0.4-1.7-1.9-0.8-3.6-3.2 0.2-5-1.7-1.5-1.4-7.1-1-1.8-1.2 2.3-1.6-5.4-0.3-4.4 3.3-2.3 0.1-1 1.6-2.8 0.7-2.3-0.7 3.2-1.9 1.5-2.4 2.7-1.4 3-1.2 4.3-0.6 1.4-0.8 4.7 0.5 4.4 0.1 4.9 2.2z"        data-name="Cuba"      />      <path        d="M1059.7 175.2l2.5 2 3.7 0.5-0.2 1.7 2.8 1.3 0.6-1.6 3.4 0.7 0.7 2 3.7 0.3 2.6 3.1-1.5 0-0.7 1.1-1.1 0.3-0.2 1.4-0.9 0.3-0.1 0.6-1.6 0.6-2.2-0.1-0.6 1.4-2.4-1.2-2.3 0.3-4-1.9-1.7 0.5-2.6 2.6-3.8-2.1-3-2.6-2.6-1.5-0.7-2.7-1-1.8 3.4-1.3 1.7-1.6 3.5-1.2 1.1-1.2 1.3 0.7 2.2-0.6z"        data-name="Czech Republic"      />      <path        d="M1053.9 158.9l1.4 3.1-1.2 1.7 1.9 2.1 1.5 3.3-0.2 2.2 2.4 3.9-2.2 0.6-1.3-0.7-1.1 1.2-3.5 1.2-1.7 1.6-3.4 1.3 1 1.8 0.7 2.7 2.6 1.5 3 2.6-1.6 2.9-1.7 0.8 1 4.1-0.4 1.1-1.7-1.3-2.4-0.2-3.5 1.1-4.4-0.3-0.6 1.7-2.7-1.7-1.4 0.3-5.5-1.9-1 1.3-4.2 0 0.4-4.5 2.4-4.2-7.2-1.2-2.4-1.6 0.2-2.7-1-1.4 0.4-4.2-1.1-6.5 2.9 0 1.2-2.3 0.9-5.6-0.9-2.1 0.8-1.3 4-0.3 1 1.3 3.1-3-1.3-2.3-0.4-3.4 3.7 0.8 2.9-0.9 0.3 2.3 4.9 1.4 0.1 2.2 4.7-1.2 2.6-1.6 5.6 2.4 2.4 1.9z"        data-name="Germany"      />      <path        d="M1229.5 428.2l-1.9 3.5-1.3-1.2-1.3 0.5-3.2-0.1-0.2-2-0.5-1.8 1.8-3 1.9-2.8 2.4 0.6 1.7-1.6 1.4 2-0.1 2.6-3.1 1.6 2.4 1.7z"        data-name="Djibouti"      />      <path        d="M 1046.1 147.7 1043.7 152.6 1038.5 149.1 1037.6 146.6 1044.4 144.6 1046.1 147.7 Z M 1033.3 151.5 1030.4 152.4 1026.7 151.6 1024.6 148.2 1024.2 142.1 1024.8 140.4 1026.1 138.6 1030.1 138.3 1031.7 136.6 1035.3 134.9 1035.3 138 1034.1 140 1034.8 141.6 1037.4 142.5 1036.4 144.8 1035 144.2 1031.9 148.5 1033.3 151.5 z"        data-name="Denmark"      />      <path        d="M585.7 386l0.3-1.8-1.3-1.9 1.5-1.1 0.7-2.5-0.1-3.4 0.8-1.1 4.3 0 3.2 1.6 1.5-0.1 0.7 2.3 3.1-0.2-0.4 1.9 2.5 0.3 2.5 2.3-2.3 2.6-2.6-1.4-2.6 0.3-1.8-0.3-1.1 1.2-2.2 0.4-0.7-1.6-1.9 0.9-2.7 4.4-1.3-1-0.1-1.8z"        data-name="Dominican Republic"      />      <path        d="M1031 264.6l-1 3.3 1 6.1-1.1 5.3-3.2 3.6 0.6 4.8 4.5 3.9 0.1 1.5 3.4 2.6 2.6 11.5 1.9 5.7 0.4 3-0.8 5.2 0.4 3-0.6 3.5 0.6 4-2.2 2.7 3.4 4.7 0.2 2.7 2.1 3.6 2.5-1.2 4.5 3 2.5 4-18.8 12.3-16 12.6-7.8 2.8-6.2 0.7-0.1-4.1-2.6-1.1-3.5-1.8-1.3-3-18.7-14-18.6-14-20.5-15.6 0.1-1.2 0.1-0.4 0.1-7.6 8.9-4.8 5.4-1 4.5-1.7 2.1-3.2 6.4-2.5 0.3-4.8 3.1-0.6 2.5-2.3 7.1-1.1 1-2.5-1.4-1.4-1.9-6.8-0.3-3.9-1.9-4.1 5.1-3.5 5.8-1.1 3.3-2.6 5.1-2 9-1.1 8.8-0.5 2.7 0.9 4.9-2.5 5.7-0.1 2.2 1.5 3.6-0.4z"        data-name="Algeria"      />      <path        d="M559 502.8l0.8 4.9-1.7 4.1-6.1 6.8-6.7 2.5-3.4 5.6-0.9 4.3-3.1 2.7-2.5-3.3-2.3-0.7-2.3 0.5-0.3-2.3 1.6-1.5-0.7-2.7 2.9-4.8-1.3-2.8-2.1 3-3.5-2.9 1.1-1.8-1-5.8 2-1 1-4 2.1-4.1-0.3-2.6 3.1-1.4 3.9-2.5 5.6 3.6 1.1-0.1 1.4 2.8 4.8 0.9 1.6-1 2.8 2.1 2.4 1.5z"        data-name="Ecuador"      />      <path        d="M1172.1 301.4l3.9 9.4 0.7 1.6-1.3 2.6-0.7 4.8-1.2 3.4-1.2 1.1-2-2.1-2.7-2.8-4.7-9.2-0.5 0.6 2.8 6.7 3.9 6.5 4.9 10 2.3 3.5 2 3.6 5.4 7.1-1 1.1 0.4 4.2 6.8 5.8 1.1 1.3-22.1 0-21.5 0-22.3 0-1-23.7-1.3-22.8-2-5.2 1.1-3.9-1-2.8 1.7-3.1 7.2-0.1 5.4 1.7 5.5 1.9 2.6 1 4-2 2.1-1.8 4.7-0.6 3.9 0.8 1.8 3.2 1.1-2.1 4.4 1.5 4.3 0.4 2.5-1.6z"        data-name="Egypt"      />      <path        d="M1228.9 420.3l-1.7 1.6-2.4-0.6-2-2.1-2.5-3.7-2.6-2.1-1.5-2.2-5-2.6-3.9-0.1-1.4-1.3-3.2 1.5-3.6-2.9-1.5 4.8-6.6-1.4-0.7-2.5 2-9.5 0.3-4.2 1.7-2 4-1.1 2.7-3.6 3.6 7.4 1.9 5.9 3.2 3.1 8 6.1 3.3 3.6 3.2 3.8 1.8 2.2 2.9 1.9z"        data-name="Eritrea"      />      <path        d="M1113.7 124.6l0.9 1-2.6 3.4 2.4 5.6-1.6 1.9-3.8-0.1-4.4-2.2-2.1-0.7-3.8 1-0.1-3.5-1.5 0.8-3.3-2.1-1-3.4 5.5-1.7 5.6-0.8 5.1 0.9 4.7-0.1z"        data-name="Estonia"      />      <path        d="M1207.3 408.5l3.9 0.1 5 2.6 1.5 2.2 2.6 2.1 2.5 3.7 2 2.1-1.9 2.8-1.8 3 0.5 1.8 0.2 2 3.2 0.1 1.3-0.5 1.3 1.2-1.2 2.2 2.2 3.6 2.2 3.1 2.2 2.3 18.7 7.6 4.8-0.1-15.6 19.3-7.3 0.3-5 4.5-3.6 0.1-1.5 2.1-3.9 0-2.3-2.2-5.2 2.7-1.6 2.7-3.8-0.6-1.3-0.7-1.3 0.2-1.8-0.1-7.2-5.4-4 0-1.9-2.1-0.1-3.6-2.9-1.1-3.5-7-2.6-1.5-1-2.6-3-3.1-3.5-0.5 1.9-3.6 3-0.2 0.8-1.9-0.2-5 0-0.8 1.5-6.7 2.6-1.8 0.5-2.6 2.3-5 3.3-3.1 2-6.4 0.7-5.5 6.6 1.4 1.5-4.8 3.6 2.9 3.2-1.5 1.4 1.3z"        data-name="Ethiopia"      />      <path        d="M1104.1 70.1l0.4 3.8 7.3 3.7-2.9 4.2 6.5 6.3-1.7 4.8 4.9 4.2-0.9 3.8 7.4 3.9-0.9 2.9-3.4 3.4-8 7.4-8 0.5-7.6 2.1-7.1 1.3-3.2-3.2-4.7-1.9 0.1-5.8-3-5.2 1.6-3.4 3.3-3.5 8.8-6.2 2.6-1.2-0.9-2.4-6.5-2.6-1.8-2.2-1.8-8.5-7.2-3.7-6-2.7 2.2-1.4 5.1 2.8 5.3-0.2 4.7 1.3 3.4-2.4 1.1-4 5.9-1.8 5.8 2.1-0.8 3.8z"        data-name="Finland"      />      <path        d="M1060.5 487.3l-0.4 2.8 1.6 3.3 4.2-0.5 1.4 1.2-2.5 7.5 2.7 3.8 0.6 5-0.7 4.3-1.7 3-5-0.3-3.1-3.1-0.4 2.9-3.8 0.8-2 1.6 2.1 4.2-4.3 3.6-5.8-6.5-3.7-5.3-3.5-6.6 0.2-2.2 1.3-2 1.3-4.7 1.2-4.8 1.9-0.3 8.2 0 0-7.7 2.7-0.4 3.4 0.8 3.4-0.8 0.7 0.4z"        data-name="Gabon"      />      <path        d="M 956.7 158.2 953.2 157 950.2 157.1 951.4 153.8 950.5 150.6 954.5 150.3 959.4 154.1 956.7 158.2 Z M 972.6 129.5 967.5 136 972.2 135.2 977.3 135.2 976 140.1 971.7 145.5 976.6 145.8 976.9 146.5 981.1 153.6 984.3 154.6 987.2 161.6 988.6 164 994.5 165.1 993.9 169.1 991.5 170.9 993.4 174.1 989 177.3 982.5 177.2 974.1 179 971.9 177.7 968.6 180.6 964.1 179.9 960.5 182.3 958 181.1 965.3 174.6 969.7 173.2 962.1 172.2 960.8 169.7 965.9 167.8 963.4 164.5 964.4 160.5 971.5 161.1 972.3 157.5 969.2 153.8 969.1 153.7 963.4 152.6 962.3 151 964.1 148.3 962.6 146.6 960 149.5 959.9 143.6 957.7 140.6 959.6 134.4 963.4 129.6 967 130 972.6 129.5 Z"        data-name="United Kingdom"      />      <path        d="M1215.7 227.9l5.1 1.3 2.1 2.6 3.6 1.5-1.2 0.8 3.3 3.5-0.6 0.7-2.9-0.3-4.2-1.9-1.1 1.1-7 1-5.6-3.2-5.5 0.3 0.3-2.7-2.1-4.3-3.4-2.4-3-0.7-2.2-1.9 0.4-0.8 4.6 1.1 7.7 1 7.6 3.1 1.2 1.2 2.9-1z"        data-name="Georgia"      />      <path        d="M986.5 431.1l-0.4 2 2.3 3.3 0 4.7 0.6 5 1.4 2.4-1.3 5.7 0.5 3.2 1.5 4.1 1.3 2.3-8.9 3.7-3.2 2.2-5.1 1.9-5-1.8 0.2-2.6-2.4-5.5 1.5-7.3 2.4-5.3-1.5-9.2-0.8-4.8 0.2-3.7 9.8-0.3 2.5 0.5 1.8-1 2.6 0.5z"        data-name="Ghana"      />      <path        d="M921.5 421.9l0.3 2.4 0.9 0 1.5-0.9 0.9 0.2 1.6 1.7 2.4 0.5 1.5-1.4 1.9-0.9 1.3-0.9 1.1 0.2 1.3 1.4 0.6 1.8 2.3 2.7-1.1 1.6-0.3 2.1 1.2-0.6 0.7 0.7-0.3 1.9 1.7 1.9-1.1 0.5-0.5 2.2 1.3 2.6 1.4 5.2-2.1 0.7-0.5 0.9 0.4 1.3-0.4 2.8-0.9 0-1.6-0.2-1.1 2.6-1.6 0-1.1-1.4 0.4-2.6-2.4-3.9-1.4 0.7-1.3 0.2-1.5 0.3 0.1-2.3-0.9-1.7 0.2-1.9-1.2-2.7-1.6-2.3-4.5 0-1.3 1.2-1.6 0.2-1 1.4-0.6 1.7-3.1 2.9-2.4-3.8-2.2-2.5-1.4-0.9-1.4-1.3-0.6-2.8-0.8-1.4-1.7-1.1 2.6-3.1 1.7 0.1 1.5-1 1.2-0.1 0.9-0.8-0.4-2.1 0.6-0.7 0.1-2.2 2.7 0.1 4.1 1.5 1.2-0.1 0.4-0.7 3.1 0.5 0.8-0.4z"        data-name="Guinea"      />      <path        d="M891.6 417.4l0.8-2.9 6.1-0.1 1.3-1.6 1.8-0.1 2.2 1.6 1.7 0 1.9-1 1.1 1.8-2.5 1.5-2.4-0.2-2.4-1.3-2.1 1.5-1 0-1.4 0.9-5.1-0.1z"        data-name="The Gambia"      />      <path        d="M909.2 421l-0.1 2.2-0.6 0.7 0.4 2.1-0.9 0.8-1.2 0.1-1.5 1-1.7-0.1-2.6 3.1-2.9-2.6-2.4-0.5-1.3-1.8 0.1-1-1.7-1.3-0.4-1.4 3-1 1.9 0.2 1.5-0.8 10.4 0.3z"        data-name="Guinea-Bissau"      />      <path        d="M1050.3 487.3l0 7.7-8.2 0-1.9 0.3-1.1-0.9 1.9-7.2 9.3 0.1z"        data-name="Equatorial Guinea"      />      <path        d="M 1112.7 272.6 1115.8 274.8 1119.9 274.4 1123.9 274.8 1123.9 276 1126.7 275.2 1126.2 277.1 1118.6 277.6 1118.5 276.6 1111.9 275.3 1112.7 272.6 Z M 1121.9 239.9 1118.7 239.7 1116 239.1 1109.8 240.7 1113.8 244.3 1111.3 245.4 1108.4 245.4 1105.3 242.1 1104.4 243.5 1106 247.3 1108.9 250.3 1107 251.7 1110.2 254.6 1113 256.5 1113.4 260.1 1108.4 258.4 1110.2 261.7 1106.9 262.3 1109.4 268 1105.9 268.1 1101.3 265.3 1098.9 260.2 1097.6 255.9 1095.3 253 1092.3 249.3 1091.8 247.5 1094 244.4 1094.1 242.3 1095.8 241.4 1095.7 239.7 1099.1 239.2 1100.9 237.8 1103.7 237.9 1104.5 236.8 1105.5 236.6 1109.3 236.8 1113.3 235 1117.2 237.3 1121.8 236.7 1121.5 233.5 1124.2 235.2 1123.1 239.2 1121.9 239.9 Z"        data-name="Greece"      />      <path        d="M896.3 1.4l19.9 3-6.7 1.4-13 0.2-18.5 0.4 1.4 0.7 12.3-0.5 9.7 1.4 7-1.2 2.4 1.4-4.5 2.4 9.2-1.6 17.1-1.5 10 0.8 1.7 1.7-14.8 2.9-2.2 1-11.4 0.8 8.1 0.2-4.9 3.2-3.6 2.9-1.2 5.2 3.7 3.2-5.9 0.1-6.5 1.6 6.3 2.6-0.1 4.2-4.2 0.5 4.1 4.3-8.7 0.4 4 2-1.6 1.8-5.7 0.8-5.5 0.1 4.2 3.4-0.5 2.4-7.3-2.2-2.4 1.4 5 1.3 4.6 3.2 0.6 4.3-7.4 1-2.7-2.1-4.2-3 0.5 3.6-5.4 2.8 10.7 0.2 5.5 0.3-11.9 4.7-12.2 4.3-12.7 1.8-4.6 0.1-4.9 2.1-7.5 5.8-10.2 3.9-3 0.3-6.1 1.3-6.6 1.4-4.8 3.4-1.4 4-3.4 3.8-8.6 4.6 0.3 4.5-3.6 4.8-4.1 5.7-6.5 0.4-5-4.8-9-0.1-3.2-3.2-0.8-5.6-4.8-7.2-0.7-3.7 1.5-5.1-3.7-5.1 3.3-4.1-1.9-2 7-6.4 7.2-2.1 2.6-2.2 2.8-4.2-5.5 1.9-2.6 0.8-4.1 0.7-4.2-1.7 1.5-3.7 3-2.8 3.8-0.1 7.6 1.5-5.3-3.4-2.7-1.8-4.4 0.7-2.6-1.3 7-4.8-1.3-2-1.1-3.5-1.4-5.4-3.6-1.9 1.4-2.1-8.1-2.9-7.7-0.4-10.1 0.2-9.5 0.4-3.1-1.6-3.8-3.1 11-1.5 7.6-0.2-14.6-1.3-6.5-1.9 2.2-1.8 15.7-2.2 15-2.2 2.8-1.6-8.1-1.6 4.6-1.7 14.7-2.9 5.4-0.4 0.2-1.8 9-1.1 11-0.6 10.4 0 2.8 1.2 10.6-2.2 7.1 1.5 4.6 0.3 6.2 1.3-6.7-2.1 1.6-1.7 12.7-2.2 11.6 0.2 5.1-1.4 11.9-0.3 26.3 0.4z"        data-name="Greenland"      />      <path        d="M488.1 387.5l-0.7 5.1-1.3 7.2 1.7 0 1.7 1.2 0.6-1 1.5 0.8-2.8 2.5-2.9 1.8-0.5 1.2 0.3 1.3-1.3 1.6-1.4 0.4 0.3 0.8-1.2 0.7-2 1.6-0.3 0.9-2.8-1.1-3.5-0.1-2.4-1.3-2.8-2.6 0.4-1.9 0.8-1.5-0.7-1.2 3.3-5.2 7.2 0 0.4-2.2-0.8-0.4-0.5-1.4-1.9-1.5-1.8-2.1 2.5-0.1 0.5-3.6 5.2 0 5.2 0.1z"        data-name="Guatemala"      />      <path        d="M662.9 463.5l-1 5.8-3.5 1.6 0.3 1.5-1.1 3.4 2.4 4.6 1.8 0 0.7 3.6 3.3 5.6-1.3 0.3-3.2-0.6-1.8 1.7-2.6 1.1-1.8 0.3-0.6 1.3-2.8-0.3-3.5-3-0.3-3-1.4-3.3 1-5.4 1.6-2.3-1.2-3-2-0.9 0.8-2.9-1.2-1.4-3 0.2-3.7-4.8 1.6-1.8 0-3 3.5-1 1.4-1.2-1.8-2.4 0.5-2.3 4.7-3.8 3.6 2.4 3.3 4.1 0.1 3.4 2.1 0.1 3 3.1 2.1 2.3z"        data-name="Guyana"      />      <path        d="M519.6 405.5l-1.9-0.1-0.9 0.9-2 0.8-1.4 0-1.3 0.8-1.1-0.2-0.9-1-0.6 0.2-0.9 1.5-0.5-0.1-0.2 1.4-2.1 1.7-1.2 0.8-0.6 0.8-1.5-1.3-1.4 1.7-1.2 0-1.3 0.1-0.2 3.2-0.8 0-0.8 1.5-1.8 0.3-0.8-2-1.7-0.6 0.7-2.6-0.7-0.7-1.2-0.4-2.5 0.7-0.1-0.8-1.6-1.1-1.1-1.2-1.6-0.6 1.3-1.6-0.3-1.3 0.5-1.2 2.9-1.8 2.8-2.5 0.6 0.3 1.3-1.1 1.6-0.1 0.5 0.5 0.9-0.3 2.6 0.6 2.6-0.2 1.8-0.7 0.8-0.7 1.7 0.3 1.3 0.4 1.5-0.1 1.2-0.6 2.5 0.9 0.8 0.2 1.6 1.2 1.5 1.4 1.9 1 1.3 1.7z"        data-name="Honduras"      />      <path        d="M1081.5 207.6l1.5 2.5 1.7 1.8-1.7 2.4-2.4-1.4-3.5 0.1-4.5-1.1-2.3 0.1-1 1.4-2-1.5-0.8 2.6 2.7 3 1.3 1.9 2.5 2.4 2.1 1.4 2.1 2.7 4.8 2.4-0.5 1-5-2.3-3.2-2.3-4.8-1.9-4.7-4.6 1-0.5-2.5-2.7-0.3-2.1-3.3-1-1.4 2.7-1.6-2.1 0-2.2 0.1-0.1 3.6 0.2 0.8-1 1.8 1 2 0.1-0.1-1.7 1.7-0.7 0.3-2.5 3.9-1.7 1.6 0.8 4 2.7 4.3 1.2 1.8-1z"        data-name="Croatia"      />      <path        d="M586.8 375.3l0.1 3.4-0.7 2.5-1.5 1.1 1.3 1.9-0.3 1.8-3.6-1.1-2.7 0.4-3.4-0.4-2.7 1.2-2.8-2 0.7-2.1 5.1 0.9 4.1 0.5 2.2-1.4-2.3-2.8 0.4-2.5-3.5-1 1.5-1.7 3.4 0.2 4.7 1.1z"        data-name="Haiti"      />      <path        d="M1096.2 191.9l3 1.7 0.5 1.7-2.9 1.3-1.9 4.2-2.6 4.3-3.9 1.2-3.2-0.3-3.7 1.6-1.8 1-4.3-1.2-4-2.7-1.6-0.8-1.2-2.1-0.8-0.1 1.3-4-1.1-1.4 2.8 0 0.2-2.6 2.7 1.7 1.9 0.6 4.1-0.7 0.3-1.3 1.9-0.2 2.3-0.9 0.6 0.4 2.3-0.8 1-1.5 1.6-0.4 5.5 1.9 1-0.6z"        data-name="Hungary"      />      <path        d="M 1667.5 567.6 1665.1 567.7 1658 563.2 1663.4 561.9 1666.2 563.9 1668 565.8 1667.5 567.6 Z M 1692.3 558.9 1692.8 560.2 1692.7 562.1 1688.6 566.9 1683.6 568.3 1683 567.6 1683.7 565.4 1686.5 561.5 1692.3 558.9 Z M 1652.7 553.8 1654.6 555.5 1658.2 555 1659.4 557.7 1652.7 559 1648.8 559.9 1645.7 559.8 1647.9 556.1 1651.1 556.1 1652.7 553.8 Z M 1681 553.8 1679.9 557.4 1671.3 559.2 1663.8 558.4 1664 556 1668.6 554.7 1672 556.6 1675.8 556.1 1681 553.8 Z M 1600.8 545.3 1611.6 546 1613 543.3 1623.3 546.4 1625.1 550.6 1633.5 551.8 1640.2 555.6 1633.6 558 1627.5 555.4 1622.4 555.6 1616.6 555.1 1611.4 554 1605 551.5 1600.9 550.9 1598.5 551.7 1588.3 549 1587.5 546.3 1582.4 545.8 1586.6 539.7 1593.4 540.1 1597.8 542.6 1600.2 543.1 1600.8 545.3 Z M 1748.7 541.7 1745.5 546.1 1745.3 541.3 1746.4 539 1747.7 536.8 1748.9 538.7 1748.7 541.7 Z M 1707.3 524 1705.1 526.2 1701.3 525 1700.3 522.2 1706 521.9 1707.3 524 Z M 1725.7 521.7 1727.5 526.6 1722.9 523.9 1718.2 523.4 1714.9 523.8 1711 523.6 1712.5 520.1 1719.5 519.8 1725.7 521.7 Z M 1785.5 518.5 1784.5 539.4 1782.9 560.4 1778.3 555.1 1772.7 553.8 1771.2 555.6 1764 555.8 1766.8 550.6 1770.5 548.8 1769.5 541.8 1767.2 536.5 1756.5 531 1751.9 530.5 1743.6 524.5 1741.8 527.7 1739.6 528.2 1738.5 525.9 1738.6 523.1 1734.4 519.9 1740.6 517.6 1744.6 517.7 1744.2 516 1735.9 516 1733.7 512.2 1728.7 511 1726.4 507.8 1734 506.3 1736.9 504.2 1746 506.8 1746.9 509.2 1748.2 519.6 1753.9 523.4 1758.9 516.6 1765.5 512.8 1770.5 512.8 1775.3 515 1779.4 517.3 1785.5 518.5 Z M 1696.4 492.7 1691.9 499.1 1687.6 500.3 1682.2 499.1 1672.7 499.4 1667.8 500.3 1667 505.2 1672 510.9 1675.1 508 1685.7 505.8 1685.2 508.7 1682.7 507.8 1680.2 511.6 1675.1 514.1 1680.2 522.3 1679.1 524.5 1683.9 531.9 1683.6 536.1 1680.5 538 1678.4 535.7 1681.4 530.5 1675.7 533 1674.4 531.2 1675.2 528.7 1671.3 524.9 1672 518.7 1668.1 520.6 1668.3 528.1 1668.1 537.3 1664.4 538.2 1662.1 536.4 1664 530.5 1663.4 524.3 1661 524.2 1659.4 519.8 1661.9 515.6 1662.8 510.5 1665.8 500.8 1666.9 498.2 1671.7 493.4 1676.2 495.3 1683.3 496.2 1689.8 495.9 1695.4 491.3 1696.4 492.7 Z M 1716 494.6 1715.7 500.2 1712.8 499.5 1711.9 503.4 1714.2 506.8 1712.6 507.6 1710.4 503.5 1708.7 495.3 1709.7 490.2 1711.5 487.9 1712 491.4 1715.4 491.9 1716 494.6 Z M 1608 488.9 1609 493.2 1612.9 496.9 1616.6 495.6 1620.2 496 1623.5 492.8 1626.2 492.2 1631.6 494 1636.2 492.6 1638.8 483.7 1640.9 481.5 1642.6 474.2 1649.1 474.2 1654.1 475.3 1651.1 481.1 1655.5 487.1 1654.6 490.1 1661 496 1654.3 496.8 1652.5 501.2 1652.7 507 1647.2 511.4 1646.8 517.8 1644.3 527.6 1643.6 525.3 1637 528.2 1634.9 524.3 1630.9 523.9 1628.1 521.8 1621.3 524.2 1619.4 521 1615.6 521.4 1611 520.7 1610.4 512.1 1607.6 510.3 1604.9 504.8 1604.1 499.2 1604.7 493.2 1608 488.9 Z M 1585.2 539.4 1579 539.5 1574.5 534.2 1567.4 528.9 1565.1 525 1561 519.8 1558.3 515 1554.1 506 1549.2 500.6 1547.5 495.1 1545.3 490.1 1540.1 486.1 1537 480.6 1532.6 477 1526.4 469.9 1525.8 466.6 1529.4 466.9 1538.3 468.1 1543.5 474.4 1548.1 478.8 1551.3 481.4 1556.8 488.3 1562.6 488.4 1567.4 492.8 1570.8 498.2 1575.1 501.2 1572.8 506.4 1576.1 508.6 1578.1 508.8 1579 513.3 1580.9 516.8 1585 517.4 1587.6 521.5 1585.9 529.5 1585.2 539.4 Z"        data-name="Indonesia"      />      <path        d="M1427.6 308l-2.8 3-0.9 6 5.8 2.4 5.8 3.1 7.8 3.6 7.7 0.9 3.8 3.2 4.3 0.6 6.9 1.5 4.6-0.1 0.1-2.5-1.5-4.1-0.2-2.7 3.1-1.4 1.5 5.1 0.4 1.2 5.5 2.5 3.2-1 4.7 0.4 4.5-0.2-0.5-3.9-2.6-2.1 4.2-0.8 3.9-4.8 5.4-4 4.9 1.5 3.2-2.7 3.6 4-1.2 2.7 6.1 1 1 2.4-1.7 1.2 1.4 3.9-4.2-1.1-6.2 4.4 0.9 3.7-2 5.4 0.3 3.1-1.6 5.3-4.6-1.5 0.9 6.7-1 2.2 1 2.7-2.5 1.5-4.4-10.2-1.5 0-0.3 4.2-3.6-3.4 1.2-3.6 2.4-0.4 1.6-5.4-3.4-1.1-5.1 0.1-5.4-0.9-1.2-4.5-2.7-0.3-4.9-2.8-1.2 4.4 4.6 3.4-3 2.4-0.9 2.3 3.7 1.7-0.3 3.9 2.6 4.8 1.6 5.3-0.5 2.4-3.8-0.1-6.6 1.3 0.9 4.8-2.4 3.8-7.5 4.4-5.3 7.5-3.8 4.1-5 4.2 0.3 2.9-2.6 1.6-4.8 2.3-2.6 0.3-1.2 4.9 1.9 8.4 0.7 5.3-1.9 6.1 0.7 10.9-2.9 0.3-2.3 4.9 1.9 2.2-5.1 1.8-1.7 4.3-2.2 1.9-5.6-6-3.1-9-2.5-6.5-2.2-3-3.4-6.2-2-8-1.4-4-5.9-8.8-3.5-12.5-2.6-8.2-0.8-7.8-1.7-6-7.7 3.9-4-0.8-8.1-7.8 2.4-2.3-1.9-2.5-7.1-5.5 3.2-4.3 12.1 0-1.8-5.5-3.5-3.2-1.4-5-4-2.8 4.9-6.8 6.5 0.5 4.5-6.7 2.2-6.5 3.9-6.5-1-4.6 3.8-3.7-5.1-3.1-2.9-4.4-3.3-5.6 2-2.8 8.5 1.6 5.7-1 3.8-5.4 7.7 7.6 0.8 5.2 3 3.3 0.6 3.3-4.1-0.9 3.2 7.1 6.2 4 8.6 4.5z"        data-name="India"      />      <path        d="M956.7 158.2l0.7 4.4-3.9 5.5-8.8 3.6-6.8-0.9 4.3-6.4-2.1-6.2 6.7-4.8 3.7-2.8 0.9 3.2-1.2 3.3 3-0.1 3.5 1.2z"        data-name="Ireland"      />      <path        d="M1229 253.2l1.8-0.2 5.3-4.7 1.9-0.5 1.9 1.9-1.2 3.1 3.9 3.4 1.3-0.4 2.5 4.8 5.3 1.3 4.3 3.2 7.7 1.1 8-1.7 0.2-1.5 4.4-1.2 3-3.7 3.6 0.2 2-1.2 3.9 0.6 6.6 3.3 4.3 0.7 7.3 5.6 4 0.3 1.7 5.3-0.6 8-0.5 4.7 2.5 1-1.6 3.5 2.7 5.1 1.2 4.1 4.3 1.1 1.1 4.1-3.9 5.8 3.2 3.4 2.8 3.9 5.7 2.8 1 5.6 2.7 1.1 0.9 2.9-7.5 3.4-1.1 7.4-10.6-1.9-6.2-1.5-6.3-0.8-3.3-7.9-2.8-1.1-4.1 1.1-5.1 3.1-7-2.1-6.1-5-5.5-1.8-4.4-6.1-5.2-8.5-2.8 1-3.7-2.1-1.7 2.5-3.5-3.4-0.5-3.4-1.7 0 0.2-4.7-3.5-4.8-7.1-3.6-4.6-6.1 0.5-5 2.3-2.2-0.9-3.7-3.8-2-4.7-7.6-3.8-5.1 0.7-2-2.9-7.3 3.3-1.9 1.2 2.5 3.2 2.9 3.8 0.9z"        data-name="Iran"      />      <path        d="M1223.5 263.2l4.7 7.6 3.8 2 0.9 3.7-2.3 2.2-0.5 5 4.6 6.1 7.1 3.6 3.5 4.8-0.2 4.7 1.7 0 0.5 3.4 3.5 3.4-3.3-0.3-3.7-0.6-3.3 6.2-10.2-0.5-16.8-12.9-8.6-4.5-6.8-1.8-3.1-7.8 11-6.7 1-7.7-1.2-4.7 2.7-1.6 2.1-4 2.1-1 6.3 0.9 2.1 1.6 2.4-1.1z"        data-name="Iraq"      />      <path        d="M924.8 84.5l-1.4 3.6 4.4 3.8-6.1 4.3-13.1 3.9-3.9 1.1-5.6-0.9-11.9-1.8 4.8-2.5-9-2.7 7.9-1.1 0.1-1.7-8.8-1.3 3.6-3.7 6.6-0.8 6 3.8 7-3 5.1 1.5 7.3-2.9 7 0.4z"        data-name="Iceland"      />      <path        d="M1179.1 288.2l0.4 2.6-0.6 1 0.1 0-0.7 2-2.1-0.8-0.7 4.2 1.5 0.7-1.3 0.9-0.1 1.7 2.5-0.8 0.4 2.5-1.8 10.2-0.7-1.6-3.9-9.4 1.4-2.1-0.4-0.4 1.1-3 0.6-4.8 0.6-1.7 0.1 0 1.8 0 0.4-1.1 1.4-0.1z"        data-name="Israel"      />      <path        d="M 1068.2 256.4 1066.5 261.5 1067.4 263.4 1066.5 266.7 1062.3 264.3 1059.6 263.6 1052.1 260.4 1052.6 257.1 1058.8 257.7 1064.2 257 1068.2 256.4 Z M 1034.2 237.4 1037.5 241.9 1037.1 250.4 1034.7 250 1032.6 252.1 1030.6 250.4 1030.1 242.7 1028.8 239.1 1031.7 239.4 1034.2 237.4 Z M 1055.9 203.9 1055.5 207 1056.9 209.7 1052.8 208.7 1048.9 211 1049.3 214.1 1048.8 215.9 1050.7 219.1 1055.7 222.3 1058.6 227.6 1064.7 232.7 1068.7 232.6 1070.1 234 1068.7 235.3 1073.5 237.6 1077.5 239.5 1082.2 242.9 1082.8 244 1082 246.3 1078.9 243.3 1074.3 242.3 1072.4 246.4 1076.3 248.8 1075.9 252.1 1073.8 252.5 1071.3 258 1069.1 258.5 1069 256.5 1069.9 253.1 1071 251.7 1068.7 248 1066.9 244.8 1064.7 244 1062.9 241.3 1059.5 240.1 1057.1 237.5 1053.3 237.1 1049 234.3 1044.1 230.1 1040.4 226.5 1038.5 220.2 1035.9 219.5 1031.7 217.4 1029.4 218.2 1026.5 221.2 1024.4 221.6 1024.9 218.9 1022.1 218.1 1020.6 213.2 1022.3 211.3 1020.8 208.9 1020.9 207.1 1023.1 208.5 1025.6 208.2 1028.3 206 1029.2 207 1031.6 206.8 1032.6 204.3 1036.4 205.1 1038.5 204 1038.8 201.5 1041.9 202.4 1042.4 201.2 1047.3 200.1 1048.6 202.2 1055.9 203.9 Z"        data-name="Italy"      />      <path        d="M556.5 387.1l-1.8 1.1-3-1.1-2.9-2.3 0.8-1.5 2.4-0.4 1.3 0.2 3.7 0.6 2.7 1.5 0.8 1.8-4 0.1z"        data-name="Jamaica"      />      <path        d="M1198.1 295.3l-0.9 1-10.4 3.2 6 6.5-1.6 1-0.7 2.2-4.1 0.9-1.1 2.3-2.1 2-6.2-1.1-0.3-0.9 1.8-10.2-0.4-2.5 0.6-1.9-0.4-4 0.7-2 6.3 2.6 9.7-6.9 3.1 7.8z"        data-name="Jordan"      />      <path        d="M 1708.5 282.6 1710.1 284.8 1708.8 288.7 1705.7 286.6 1703.6 288.1 1703.7 291.8 1699.4 290 1698.2 287 1699.5 283.1 1702.9 283.9 1703.9 281.2 1708.5 282.6 Z M 1733.1 263.4 1733.7 268.5 1736.2 271.7 1735.6 276.2 1730.2 279.2 1721 279.6 1716.6 287 1711.9 284.5 1709.5 279.7 1700.9 281.1 1695.8 284.1 1689.6 284.3 1697 289 1697.8 299.9 1695.3 302.6 1691.7 300.1 1690.8 294.3 1686.7 292.5 1682.7 288.1 1687 286.1 1688.1 282 1692 278.7 1694 274.3 1703.7 272.4 1710 273.7 1710 262.3 1715.1 265.4 1719.6 259 1721.3 256.5 1720.3 248.7 1715.2 241.5 1715 237.5 1719.8 236.3 1728 245.2 1730.8 250.3 1729.5 256.8 1733.1 263.4 Z M 1721.2 218.6 1725.7 219.9 1727.5 217.3 1733.5 224.4 1727.1 226.1 1726.7 232.4 1715.8 228.1 1717.4 235 1711.7 235.1 1707 228.8 1706.4 223.9 1711.6 223.6 1707.2 214.8 1705.4 209.9 1715.9 216.5 1721.2 218.6 Z"        data-name="Japan"      />      <path        d="M1338.3 160.5l4.4-0.3 9.2-5.8-0.8 2 8.4 4.7 18.3 15.6 1.1-3.2 8.4 3.5 6.2-1.6 3.3 1.1 4.1 3.6 4 1.2 3.3 2.7 6-0.9 4.4 3.8-1.9 4.2-3.8 0.6 2.5 6.2-1.6 2.9-10.8-2.1 1 11.3-2 1.4-9.1 2.5 8.8 11-2.9 1.6 1.7 3.7-3.5-1-3.4-2.3-7.9-0.6-8.6-0.2-1.6 0.7-8.2-2.7-2.5 1.4 0.5 3.7-9.2-2.2-3.1 0.9-0.3 2.8-2.6 1.2-5.4 4.4-0.9 4.6-2 0-2.3-3-6.7-0.2-2.5-5.2-2.6-0.1-1.5-6.4-7.6-4.6-8.6 0.5-5.7 0.9-6.6-5.7-4.8-2.4-9.2-4.5-1.1-0.5-12 3.7 6.2 23.4-2.6 0.3-4.8-5-3.9-1.8-5.6 1.3-1.8 2.2-0.6-1.6 0.6-2.6-1.5-2.2-6.5-2.2-3.7-5.7-3.2-1.6-0.6-2.1 5.1 0.6-1-4.6 4.1-1 4.7 0.9-0.7-6.1-1.9-3.9-5 0.3-4.7-1.5-5.1 2.7-4.4 1.4-2.8-1.1-0.2-3.2-4.3-4.2-3.6 0.2-5.3-4.2 1.7-4.8-1.8-1.2 2.2-6.9 6 3.6-0.6-4.5 8.1-6.7 7.6-0.2 12 4.3 6.6 2.5 4.4-2.6 7.7-0.1 7.3 3.2 0.8-1.9 7 0.3 0.2-2.9-9.4-4.3 3.5-3-1.5-1.6 4-1.6-5.1-4.2 1.4-2.1 17-2.1 1.7-1.5 10.9-2.3 3.1-2.5 9.1 1.3 4.4 6.3 4.3-1.5 7.1 2.1 1.1 3.3z"        data-name="Kazakhstan"      />      <path        d="M1223.5 476.7l-4.9 7.2 0.2 23.4 3.3 5.3-4 2.6-1.4 2.7-2.2 0.4-0.8 4.6-1.9 2.6-1.1 4.2-2.3 2.1-8.1-6.4-0.3-3.7-20.5-13.1 0.4-4.7-1.4-2.5 0-0.3 1.6-2.6 2.8-4.2 2.1-4.7-2.6-7.4-0.7-3.2-2.7-4.5 3.4-3.8 3.8-4.2 2.9 1.1 0.1 3.6 1.9 2.1 4 0 7.2 5.4 1.8 0.1 1.3-0.2 1.3 0.7 3.8 0.6 1.6-2.7 5.2-2.7 2.3 2.2 3.9 0z"        data-name="Kenya"      />      <path        d="M1400.5 230.2l-0.2 1.4-6.9 3.4-1 2.6-6.4 0.7-0.6 4.1-5.8-0.9-3.2 1.3-4.1 3 1.2 1.5-1.1 1.4-9.6 1-7.1-2.1-5.5 0.5-0.6-3.6 6 1 1.4-1.9 4.1 0.6 5.3-4.6-7.2-3.4-3.2 1.6-4.6-2.4 3-4.1-1.7-0.6 0.3-2.8 3.1-0.9 9.2 2.2-0.5-3.7 2.5-1.4 8.2 2.7 1.6-0.7 8.6 0.2 7.9 0.6 3.4 2.3 3.5 1z"        data-name="Kyrgyzstan"      />      <path        d="M1589.8 410.6l1.8 4.3 0.1 7.7-9 5 2.8 3.8-5.9 0.5-4.6 2.6-4.8-0.9-2.6-3.4-3.5-6.6-2.1-7.8 3.1-5.3 7.1-1.2 5.3 0.9 5 2.5 2-4.4 5.3 2.3z"        data-name="Cambodia"      />      <path        d="M1652.9 259.5l0-0.6 2.5 0.2 0.6-2.8 3.6-0.4 2-0.4 0-1.5 8.3 7.5 3.3 4.2 3.4 7.4-0.5 3.5-4.3 1.2-3.1 2.7-4.6 0.5-2.1-3.5-1.1-4.8-5.3-6.6 3.4-1.1-6.1-5.5z"        data-name="Republic of Korea"      />      <path        d="M1247.5 309.4l1.5 2.8-0.3 1.5 2.4 4.8-3.9 0.2-1.7-3.1-5-0.6 3.3-6.2 3.7 0.6z"        data-name="Kuwait"      />      <path        d="M1589.8 410.6l-5.3-2.3-2 4.4-5-2.5 1.5-2.9-0.4-5.4-5.3-5.6-1.3-6.4-5-5.2-4.3-0.4-0.8 2.2-3.2 0.2-1.9-1.1-5.3 3.8-1-5.8 0.4-6.7-3.8-0.3-0.9-3.9-2.7-2 0.8-2.3 4.1-4.2 0.8 1.5 3 0.2-2-7.4 2.7-0.9 4 5.1 3.5 5.8 6.8 0 3 5.6-3.3 1.7-1.2 2.3 7.3 3.9 5.7 7.6 4.4 5.6 4.9 4.5 2 4.5-0.2 6.4z"        data-name="Lao PDR"      />      <path        d="M1179.1 288.2l-1.4 0.1-0.4 1.1-1.8 0 1.3-5.3 2.2-4.5 0-0.2 2.5 0.3 1.2 2.5-2.7 2.5-0.9 3.5z"        data-name="Lebanon"      />      <path        d="M938.6 452.5l-0.2 1.8 0.5 3.1-1.2 2.9 1.6 1.8 1.8 0.4 2.4 2.7 0.2 2.5-0.6 0.8-0.4 5.3-1.5 0.1-5.8-3.1-5.2-4.9-4.8-3.5-3.8-4.1 1.4-2.1 0.3-1.9 2.6-3.4 2.6-3 1.3-0.2 1.4-0.7 2.4 3.9-0.4 2.6 1.1 1.4 1.6 0 1.1-2.6 1.6 0.2z"        data-name="Liberia"      />      <path        d="M1122.6 299.1l-1.7 3.1 1 2.8-1.1 3.9 2 5.2 1.3 22.8 1 23.7 0.5 12.8-6.4 0 0 2.7-22.6-12.3-22.5-12.3-5.5 3.5-3.8 2.4-3.2-3.5-8.8-2.8-2.5-4-4.5-3-2.5 1.2-2.1-3.6-0.2-2.7-3.4-4.7 2.2-2.7-0.6-4 0.6-3.5-0.4-3 0.8-5.2-0.4-3-1.9-5.7 2.6-1.4 0.4-2.8-0.6-2.6 3.6-2.5 1.6-2.1 2.6-1.8 0.1-4.9 6.4 2.2 2.3-0.6 4.5 1.1 7.3 2.9 2.8 5.7 4.9 1.2 7.8 2.7 6 3.2 2.5-1.7 2.5-2.9-1.6-4.9 1.5-3.2 3.7-3 3.7-0.8 7.4 1.3 2 2.8 2 0.1 1.8 1.1 5.4 0.7 1.5 2.1z"        data-name="Libya"      />      <path        d="M1445.9 462l-4.8 1.5-2.9-5.1-1.4-9.2 2-10.4 4.1 3.5 2.8 4.5 3.1 6.7-0.6 6.7-2.3 1.8z"        data-name="Sri Lanka"      />      <path        d="M1139.1 697.9l-2 0.7-3.7-5 3.2-4 3.1-2.5 2.7-1.4 2.2 2 1.7 2-1.9 3.1-1.1 2.1-3.1 1-1.1 2z"        data-name="Lesotho"      />      <path        d="M1111.1 147.6l1 2.7-3.6 2-0.5 3.4-4.8 2.3-4.7 0-1.4-1.9-2.5-0.7-0.6-1.5 0.2-1.7-2.2-0.9-5.1-1.1-1.7-5.1 5.1-1.8 7.9 0.4 4.5-0.6 0.9 1.2 2.5 0.4 5 2.9z"        data-name="Lithuania"      />      <path        d="M1016.9 185.4l-1.4 0.1-1.1-0.5 0.4-3.5 1.3-0.2 1 1.4-0.2 2.7z"        data-name="Luxembourg"      />      <path        d="M1112.8 136.5l2.5 1.3 1 2.9 2.1 3.6-4.6 2.3-2.7 1-5-2.9-2.5-0.4-0.9-1.2-4.5 0.6-7.9-0.4-5.1 1.8-0.5-4.5 1.7-3.8 4.1-2 4.4 4.5 3.7-0.2 0.1-4.6 3.8-1 2.1 0.7 4.4 2.2 3.8 0.1z"        data-name="Latvia"      />      <path        d="M974.8 276l1.9 4.1 0.3 3.9 1.9 6.8 1.4 1.4-1 2.5-7.1 1.1-2.5 2.3-3.1 0.6-0.3 4.8-6.4 2.5-2.1 3.2-4.5 1.7-5.4 1-8.9 4.8-0.1 7.6-0.9 0 0.1 3.4-3.4 0.2-1.8 1.5-2.5 0-2-0.9-4.6 0.7-1.9 5-1.8 0.5-2.7 8.1-7.9 6.9-2 8.9-2.4 2.9-0.7 2.3-12.5 0.5-0.1 0 0.3-3 2.2-1.7 1.9-3.4-0.3-2.2 2-4.5 3.2-4.1 1.9-1 1.6-3.7 0.2-3.5 2.1-3.9 3.8-2.4 3.6-6.5 0.1-0.1 2.9-2.5 5.1-0.7 4.4-4.4 2.8-1.7 4.7-5.4-1.2-7.9 2.2-5.6 0.9-3.4 3.6-4.3 5.4-2.9 4.1-2.7 3.7-6.6 1.8-4 3.9 0.1 3.1 2.7 5.1-0.4 5.5 1.4 2.4 0z"        data-name="Morocco"      />      <path        d="M1129.4 210.3l-1.3-2.9 0.2-2.7-0.6-2.7-3.4-3.8-2-2.6-1.8-1.8-1.6-0.7 1.1-0.9 3.2-0.6 4 1.9 2 0.3 2.6 1.7-0.1 2.1 2 1 1.1 2.6 2 1.6-0.2 1 1 0.6-1.3 0.5-3-0.2-0.6-0.9-1 0.5 0.6 1.1-1.1 2.1-0.6 2.1-1.2 0.7z"        data-name="Moldova"      />      <path        d="M1267.9 588.9l0.4 7.7 1.3 3-0.7 3.1-1.2 1.8-1.6-3.7-1.2 1.9 0.8 4.7-0.7 2.8-1.7 1.4-0.7 5.5-2.7 7.5-3.4 8.8-4.3 12.2-2.9 8.9-3.1 7.5-4.6 1.5-5.1 2.7-3-1.6-4.2-2.3-1.2-3.4 0-5.7-1.5-5.1-0.2-4.7 1.3-4.6 2.6-1.1 0.2-2.1 2.9-4.9 0.8-4.1-1.1-3-0.8-4.1-0.1-5.9 2.2-3.6 1-4.1 2.8-0.2 3.2-1.3 2.2-1.2 2.4-0.1 3.4-3.6 4.9-4 1.8-3.2-0.6-2.8 2.4 0.8 3.3-4.4 0.3-3.9 2-2.9 1.8 2.8 1.4 2.7 1.2 4.3z"        data-name="Madagascar"      />      <path        d="M449.3 335.9l2.2-0.2-3.2 5.7-1.8 4.6-1.8 8.6-1.1 3.1 0.4 3.5 1.3 3.2 0.4 4.9 3 4.8 0.8 3.7 1.7 3.1 5.7 1.7 1.9 2.7 5.2-1.8 4.3-0.6 4.4-1.2 3.6-1.1 3.9-2.6 1.8-3.7 1.2-5.4 1.2-1.9 4-1.7 6.1-1.5 4.9 0.3 3.4-0.6 1.2 1.4-0.6 3.1-3.5 3.8-1.8 3.9 0.9 1.1-1.2 2.8-2.1 5-1.2-1.7-1.1 0.1-1.1 0.1-2.5 3.9-0.9-0.8-0.7 0.3-0.1 1-5.2-0.1-5.2 0-0.5 3.6-2.5 0.1 1.8 2.1 1.9 1.5 0.5 1.4 0.8 0.4-0.4 2.2-7.2 0-3.3 5.2 0.7 1.2-0.8 1.5-0.4 1.9-5.6-6.9-2.6-2.1-4.4-1.7-3.2 0.5-4.8 2.4-2.9 0.6-3.7-1.7-4.1-1.2-4.8-2.9-4.1-0.9-5.9-3-4.3-3.1-1.1-1.7-3.1-0.4-5.4-2-1.9-2.9-5.4-3.7-2.2-4-0.8-3.2 1.9-0.6-0.3-1.8 1.6-1.7 0.4-2.2-1.5-2.9 0-2.5-1.3-3.3-3.8-6.4-4.6-5-1.9-4-4.1-2.6-0.7-1.6 1.7-3.9-2.4-1.5-2.5-3.2-0.2-4.4-2.8-0.6-2.3-3.3-1.7-3.2 0.3-2-1.5-4.8-0.3-4.9 0.8-2.5-3.1-2.6-1.9 0.3-2.4-1.7-1.8 2.6-0.1 3-1 4.9 1 2.6 2.8 4.4 0.4 1.6 0.7 0.4 0.1 2.2 1-0.1 0 4.2 1.3 1.6 0.5 2.3 2.7 3.2 0.4 6 1 2.8 0.9 3-0.3 3.4 2.6 0.2 1.6 2.9 1.5 2.9-0.3 1.2-2.8 2.3-1 0-0.7-3.9-2.9-3.7-3.4-3.1-2.5-1.6 1.2-4.7-0.1-3.5-2.1-2-3.1-2.8-0.9 0.8-1-1.7-3-1.5-2.2-3.8 0.5-0.4 2.1 0.3 2.7-2.4 1-2.9-2.9-4.6-2.6-1.7-0.8-4-0.6-4.3-0.8-5.1-0.2-5.8 6.3-0.5 7.1-0.7-0.9 1.3 7 3.1 10.9 4.5 10.8 0 4.3 0 0.8-2.7 9.4 0 1.3 2.3 2.1 2.1 2.4 2.8 0.8 3.3 0.4 3.6 2.3 1.9 4 1.9 4.8-5 4.5-0.2 3.2 2.6 1.6 4.4 0.9 3.8 2.4 3.6 0.2 4.5 0.9 3 3.9 2 3.6 1.4z"        data-name="Mexico"      />      <path        d="M1105.5 236.6l-1 0.2-0.8 1.1-2.8-0.1-1.8 1.4-3.4 0.5-2.3-1.5-1-2.7 0.5-2.2 0.7 0.1 0.1-1.3 2.9-1 1.2-0.3 1.7-0.3 2.4-0.2 2.8 2.1 0.8 4.2z"        data-name="Macedonia"      />      <path        d="M1010.2 378.8l0.1 14.8-3.1 4.3-0.4 4-5 1-7.7 0.5-2 2.3-3.6 0.3-3.6 0-1.4-1.2-3.1 0.9-5.3 2.7-1.1 2-4.3 2.8-0.8 1.7-2.4 1.3-2.7-0.9-1.5 1.6-0.9 4.4-4.5 5.3 0.2 2.2-1.6 2.7 0.4 3.7-2.4 1-1.3 0.8-0.9-2.7-1.6 0.7-1-0.1-1 1.8-4.4 0-1.5-1-0.8 0.6-1.7-1.9 0.3-1.9-0.7-0.7-1.2 0.6 0.3-2.1 1.1-1.6-2.3-2.7-0.6-1.8-1.3-1.4-1.1-0.2-1.3 0.9-1.9 0.9-1.5 1.4-2.4-0.5-1.6-1.7-0.9-0.2-1.5 0.9-0.9 0-0.3-2.4 0.3-2-0.5-2.4-2-1.8-1.1-3.7-0.2-4 1.9-1.2 1-3.8 1.8-0.1 3.9 1.8 3.2-1.3 2.1 0.4 0.9-1.4 22.5-0.1 1.3-4.5-1-0.8-2.5-27.7-2.4-27.7 8.5-0.1 18.6 14 18.7 14 1.3 3 3.5 1.8 2.6 1.1 0.1 4.1 6.2-0.7z"        data-name="Mali"      />      <path        d="M1548.4 364.2l-4.1 4.2-0.8 2.3-3 1.5-2.8 2.8-3.9 0.3-1.5 6.9-2.2 1.2 3.5 5.6 4.1 4.7 2.9 4.3-1.4 5.5-1.8 1.2 1.8 3.2 4.3 5.1 1 3.6 0.2 3 2.7 5.9-2.6 6-2.2 6.6-0.9-4.8 1.3-4.9-2.2-3.8-0.2-7-2.6-3.4-2.7-7.6-2-8.1-3.1-5.4-3.2 3.3-5.8 4.5-3.3-0.5-3.6-1.5 0.9-8-2-6-5.3-7.4 0.3-2.3-3.4-0.9-4.6-5.2-1.1-5.2 2.1 1-0.6-4.6 2.5-1.5-1-2.7 1-2.2-0.9-6.7 4.6 1.5 1.6-5.3-0.3-3.1 2-5.4-0.9-3.7 6.2-4.4 4.2 1.1-1.4-3.9 1.7-1.2-1-2.4 3.1-0.5 2.7 3.8 2.7 1.5 1.3 4.9 0.9 5.3-4.2 5.4 0.7 7.6 5.6-1.1 2.4 5.9 3.7 1.3-0.8 5.3 4.5 2.4 2.6 1.2 3.8-1.9 0.5 2.7z"        data-name="Myanmar"      />      <path        d="M1090.6 227.2l-0.8 1.4-1.4 0.6-0.4-1.2-1.9 3.1 0.5 2.1-1.1-0.5-1.7-2.1-2.3-1.3 0.5-1 0.4-3.5 1.6-1.5 0.9-0.6 1.4 1.1 0.9 0.9 1.7 0.7 2.1 1.3-0.4 0.5z"        data-name="Montenegro"      />      <path        d="M1496.2 181.5l4-1.2 5.7-0.8 5.4 0.9 6.6 2.9 4.9 3.2 4.6 0 6.8 1 3.6-1.6 5.9-1 4.4-4.4 3.4 0.7 3.9 2.1 5.6-0.6 0.6 4.7 0.3 6.3 2.8 2.5 2.3-0.8 5.5 1 2.5-2.3 5.2 2 7.2 4.4 0.8 2.2-4.4-0.7-6.8 0.8-2.5 1.8-1.3 4.2-6.4 2.4-3.2 3.4-5.9-1.3-3.2-0.6-0.5 4.1 2.9 2.4 1.9 2.1-2.4 2.2-2 3.4-4.9 2.2-7.6 0.2-7.2 2.2-4.4 3.4-3.3-1.9-6.2 0-9.4-3.9-5.6-0.9-6.4 0.9-11.3-1.5-5.6 0.2-4.7-3.8-5-5.8-3.4-0.7-8-4-7.2-0.8-6.5-1.1-3-2.8-1.4-7.3-5.8-5.1-8.2-2.3-5.7-3.3-3.3-4.4 4.7-1.1 6.7-5.3 5.9-2.9 5.3 1.9 5.2 0.1 4.8 2.9 5 0.2 8 1.6 2.4-4.4-4-3.6 1.3-6.4 7 2.5 4.8 0.8 6.7 1.6 3.6 4.6 8.5 2.6z"        data-name="Mongolia"      />      <path        d="M1166.7 673.5l-4.1 0-0.3-2.9-0.6-2.9-0.4-2.3 1.4-7.1-1.1-4.6-2.2-9 6.2-7.3 1.7-4.6 0.8-0.6 0.9-3.8-0.8-1.9 0.4-4.8 1.3-4.4 0.4-8.2-2.8-2-2.7-0.5-1.1-1.6-2.6-1.3-4.7 0.1-0.2-2.4-0.4-4.6 17.2-5.3 3.2 3.1 1.5-0.6 2.2 1.6 0.2 2.6-1.3 3 0.2 4.5 3.5 4 1.9-4.5 2.5-1.3-0.1-8.3-2.2-4.6-1.9-2.1-0.4 0-0.6-7.3 1.5-6.1 2.2-0.2 6.7 1.8 1.5-0.8 3.9-0.2 2.1-1.9 3.4 0.1 6.2-2.5 4.6-3.7 0.9 2.8-0.5 6.4 0.5 5.7-0.2 10 0.8 3.1-1.9 4.6-2.4 4.5-3.7 4-5.3 2.4-6.5 3.1-6.6 6.9-2.2 1.2-4.2 4.6-2.3 1.4-0.8 4.6 2.4 4.9 0.9 3.7 0 2 1-0.4-0.5 6.3-1.1 3 1.2 1.1-1 2.7-2.4 2.3-4.7 2.1-6.9 3.5-2.5 2.4 0.3 2.7 1.3 0.4-0.7 3.4z"        data-name="Mozambique"      />      <path        d="M959.2 341.5l-8.5 0.1 2.4 27.7 2.5 27.7 1 0.8-1.3 4.5-22.5 0.1-0.9 1.4-2.1-0.4-3.2 1.3-3.9-1.8-1.8 0.1-1 3.8-1.9 1.2-3.6-4.4-3.4-4.8-3.6-1.7-2.7-1.8-3.1 0-2.8 1.4-2.7-0.5-2 2-0.4-3.4 1.6-3.2 0.8-6-0.4-6.4-0.6-3.2 0.6-3.2-1.4-3-2.8-2.8 1.3-2.1 21.7 0-0.9-9.3 1.5-3.3 5.2-0.5 0.2-16.5 18 0.4 0.2-9.8 20.5 15.6z"        data-name="Mauritania"      />      <path        d="M1182.3 588.9l0.4 0 1.9 2.1 2.2 4.6 0.1 8.3-2.5 1.3-1.9 4.5-3.5-4-0.2-4.5 1.3-3-0.2-2.6-2.2-1.6-1.5 0.6-3.2-3.1-2.9-1.6 2-6 1.8-2.2-0.9-5.4 1.3-5.2 1-1.7-1.3-5.4-2.6-2.9 5.5 1.2 1 1.7-0.1 0.8 1.8 4.1 0.2 7.7-1.8 3.6 1.6 4.7-0.2 2.8 1.2 1.9-0.1 2.4 0.9 1.4 1-1.6 1.9 2.5 0.2-0.8-1-3.4-1.1-0.3-0.1-0.9z"        data-name="Malawi"      />      <path        d="M 1564.3 461.9 1565.7 462.5 1569.2 466.4 1571.7 470.7 1572.3 475 1571.8 477.9 1572.4 480.1 1572.9 483.9 1575 485.7 1577.3 491.4 1577.3 493.5 1573.3 494 1567.8 489.2 1561 484.1 1560.2 480.8 1556.8 476.5 1555.8 471.2 1553.6 467.7 1554 463 1552.6 460.3 1553.5 459.2 1558.3 462 1558.9 465.3 1562.6 464.5 1564.3 461.9 Z M 1654.1 475.3 1649.1 474.2 1642.6 474.2 1640.9 481.5 1638.8 483.7 1636.2 492.6 1631.6 494 1626.2 492.2 1623.5 492.8 1620.2 496 1616.6 495.6 1612.9 496.9 1609 493.2 1608 488.9 1612.2 491.1 1616.5 489.9 1617.5 484.5 1619.9 483.3 1626.7 481.9 1630.5 476.8 1633.1 472.8 1635.9 476.1 1637 473.9 1639.7 474.1 1639.8 470 1639.9 466.8 1644 462.4 1646.6 457.4 1648.9 457.3 1652 460.6 1652.4 463.4 1656.2 465.2 1661 467.1 1660.8 469.6 1657 469.9 1658.1 473.1 1654.1 475.3 Z"        data-name="Malaysia"      />      <path        d="M1116.2 614.3l4.6-1.4 3.6 0.3 2.2 1.5 0 0.5-3.2 1.5-1.7 0-3.7 2.5-2-2.7-8.7 2.3-4.2 0.2-0.8 22.9-5.5 0.2-0.6 18.7-1.1 23.7-5 3.3-2.9 0.5-3.4-1.2-2.5-0.5-0.8-2.7-2-1.8-2.8 3.2-3.9-4.9-2-4.6-1-6.3-1.2-4.6-1.6-9.9 0.1-7.7-0.6-3.5-2.1-2.7-2.8-5.3-2.8-7.7-1.1-4-4.4-6.3-0.3-4.9 2.7-1.2 3.4-1.1 3.6 0.2 3.3 2.9 0.8-0.5 22.7-0.2 3.8 3 13.5 0.9 10.4-2.6z"        data-name="Namibia"      />      <path        d="M1068.6 355l1.6 10 2.2 1.7 0.1 2 2.4 2.2-1.2 2.8-1.8 13-0.2 8.4-7 6-2.3 8.5 2.4 2.4 0 4.1 3.7 0.1-0.6 3.1-1.5 0.3-0.2 2.1-1 0.1-3.9-7-1.4-0.3-4.3 3.6-4.4-1.9-3-0.3-1.6 0.9-3.3-0.2-3.3 2.7-2.9 0.2-6.8-3.3-2.7 1.5-2.9-0.1-2.1-2.4-5.6-2.4-6.1 0.8-1.4 1.3-0.8 3.7-1.6 2.6-0.4 5.8-4.3-3.7-2 0-1.9 1.9 0.1-4.4-6.5-1.5-0.2-3.1-3.1-4.2-0.8-2.9 0.5-3.1 3.6-0.3 2-2.3 7.7-0.5 5-1 0.4-4 3.1-4.3-0.1-14.8 7.8-2.8 16-12.6 18.8-12.3 8.8 2.8 3.2 3.5 3.8-2.4z"        data-name="Niger"      />      <path        d="M1066.2 421.7l2.3 2.5-0.6 1.2-0.3 2.1-4.7 5-1.4 4.1-0.8 3.3-1.2 1.5-1.1 4.5-3 2.6-0.8 3.2-1.3 2.6-0.5 2.7-3.9 2.2-3.2-2.7-2.1 0.1-3.4 3.8-1.6 0-2.7 6.2-1.4 4.6-5.9 2.3-2.1-0.3-2.2 1.4-4.5-0.1-3.1-4.1-1.9-4.6-4-4.2-4.2 0-5 0 0.3-10.3-0.2-4.1 1.1-4 1.7-2 2.8-4-0.6-1.7 1.1-2.6-1.3-3.8 0.2-2.1 0.4-5.8 1.6-2.6 0.8-3.7 1.4-1.3 6.1-0.8 5.6 2.4 2.1 2.4 2.9 0.1 2.7-1.5 6.8 3.3 2.9-0.2 3.3-2.7 3.3 0.2 1.6-0.9 3 0.3 4.4 1.9 4.3-3.6 1.4 0.3 3.9 7 1-0.1z"        data-name="Nigeria"      />      <path        d="M519.6 405.5l-0.5 0.7-0.5 1.4 0.4 2.3-1.5 2.2-0.8 2.6-0.5 2.8 0.2 1.7-0.1 2.9-0.9 0.6-0.7 2.8 0.2 1.7-1.2 1.6 0.1 1.7 0.8 1.1-1.4 1.4-1.7-0.5-0.8-1.3-1.8-0.5-1.3 0.8-3.6-1.7-0.9 0.8-1.8-2-2.5-2.6-1.1-2.1-2.2-2.1-2.5-2.9 0.7-1 0.8 1 0.5-0.4 1.8-0.3 0.8-1.5 0.8 0 0.2-3.2 1.3-0.1 1.2 0 1.4-1.7 1.5 1.3 0.6-0.8 1.2-0.8 2.1-1.7 0.2-1.4 0.5 0.1 0.9-1.5 0.6-0.2 0.9 1 1.1 0.2 1.3-0.8 1.4 0 2-0.8 0.9-0.9 1.9 0.1z"        data-name="Nicaragua"      />      <path        d="M 1113.7 67.5 1107.3 69.6 1104.1 70.1 1104.9 66.3 1099.1 64.2 1093.2 66 1092.1 70 1088.7 72.4 1084 71.1 1078.7 71.3 1073.6 68.5 1071.4 69.9 1068.8 70.1 1068.9 73.7 1060.9 72.8 1060.3 75.9 1056.3 75.9 1054 79.8 1050.6 85.9 1044.9 93.8 1046.7 95.8 1045.4 98 1041.1 97.9 1038.7 103.3 1039.7 111 1042.8 113.9 1042 120.8 1038.6 124.8 1036.8 128.2 1033.5 124.6 1024.9 131.4 1018.8 132.8 1012.3 129.8 1010.5 123.5 1008.5 110 1012.5 106.3 1023.8 101.4 1031.9 95.5 1039.1 87.7 1048 77 1054.4 72.9 1064.7 66.1 1073.2 63.7 1079.9 64 1085.1 59.6 1092.5 59.8 1099.5 58.8 1113.2 62.7 1108.3 64.1 1113.7 67.5 Z M 1076.6 25.2 1069 27.1 1062.2 26 1064.4 24.8 1061.8 23.3 1069.1 22.4 1071 24.1 1076.6 25.2 Z M 1051 16.7 1063.6 20.1 1055 21.9 1053.8 25.3 1050.8 26.2 1049.9 30.2 1045.5 30.4 1037 27.5 1040 25.8 1034.3 24.4 1026.6 20.5 1023.4 17 1032.7 15.4 1035 16.9 1040 16.9 1041 15.4 1046.2 15.2 1051 16.7 Z M 1075.4 13.7 1082.8 15.2 1078.4 17.6 1068.3 18.1 1057.6 17.3 1056.6 16.1 1051.5 16.1 1047.2 14.1 1057.7 12.9 1063.1 13.9 1066.2 12.6 1075.4 13.7 Z"        data-name="Norway"      />      <path        d="M1469 322.9l0.2 2.7 1.5 4.1-0.1 2.5-4.6 0.1-6.9-1.5-4.3-0.6-3.8-3.2-7.7-0.9-7.8-3.6-5.8-3.1-5.8-2.4 0.9-6 2.8-3 1.9-1.5 4.8 2 6.4 4.2 3.3 0.9 2.5 3.1 4.5 1.2 5 2.9 6.5 1.4 6.5 0.7z"        data-name="Nepal"      />      <path        d="M 1283.8 394.9 1281.6 390.4 1276.4 379.8 1292.7 373.4 1295.3 360.6 1292.3 356 1292.3 353.4 1293.6 350.8 1293.4 348.2 1295.8 346.9 1294.7 346 1294.7 341.8 1297.5 341.8 1300.5 346.2 1303.8 348.5 1307.9 349.4 1311.3 350.5 1314.2 354.2 1315.9 356.3 1317.9 357.2 1318.1 358.6 1316.4 362.4 1315.7 364.2 1313.5 366.3 1311.8 370.7 1309.3 370.3 1308.3 371.9 1307.6 375.1 1308.7 379.4 1308.2 380.2 1305.7 380.2 1302.4 382.6 1302.1 385.7 1300.9 387.1 1297.4 387 1295.4 388.6 1295.6 391.2 1293 393 1289.9 392.4 1286.3 394.6 1283.8 394.9 Z M 1296.2 336.7 1294.9 334.5 1296.3 332.4 1297 332.9 1296.8 335.6 1296.2 336.7 Z"        data-name="Oman"      />      <path        d="M1401.6 273.9l-3.8 5.4-5.7 1-8.5-1.6-2 2.8 3.3 5.6 2.9 4.4 5.1 3.1-3.8 3.7 1 4.6-3.9 6.5-2.2 6.5-4.5 6.7-6.5-0.5-4.9 6.8 4 2.8 1.4 5 3.5 3.2 1.8 5.5-12.1 0-3.2 4.3-4.2-1.6-2.2-4.6-4.9-4.9-10 1.2-9 0.1-7.6 0.9 1.1-7.4 7.5-3.4-0.9-2.9-2.7-1.1-1-5.6-5.7-2.8-2.8-3.9-3.2-3.4 9.6 3.3 5.3-1 3.4 0.8 0.9-1.4 3.9 0.6 6.6-2.7-0.8-5.4 2.3-3.7 4.1 0 0.2-1.7 4-0.9 2.1 0.6 1.8-1.8-1.1-3.9 1.4-3.8 3.1-1.7-3.1-4.2 5.2 0.2 0.9-2.3-0.8-2.5 2-2.7-1.4-3.2-1.9-2.7 2.4-2.8 5.3-1.3 5.9-0.8 2.4-1.1 2.9-0.8 4.7 3 2.9 5 9.5 2.5z"        data-name="Pakistan"      />      <path        d="M549.3 446.2l-0.7 0.9 1.1 3.8-1.1 1.9-1.8-0.5-0.9 3.1-1.8-1.8-1-3.5 1.4-1.7-1.4-0.4-0.9-2.1-2.8-1.8-2.4 0.4-1.3 2.2-2.4 1.6-1.2 0.2-0.6 1.4 2.5 3.5-1.6 0.8-0.8 0.9-2.7 0.4-0.8-3.9-0.8 1.1-1.8-0.4-1-2.5-2.3-0.5-1.5-0.7-2.4 0-0.2 1.4-0.6-1 0.3-1.3 0.6-1.3-0.2-1.1 0.9-0.8-1.1-0.9 0.1-2.6 2.2-0.6 1.9 2.3-0.2 1.4 2.2 0.3 0.6-0.6 1.5 1.6 2.8-0.5 2.5-1.6 3.5-1.3 2-1.9 3.1 0.4-0.2 0.6 3.1 0.2 2.4 1.2 1.8 1.9 2 1.8z"        data-name="Panama"      />      <path        d="M590.5 529.4l-5.1-0.3-0.8 1-4.6 1.2-6.3 4.4-0.3 3-1.4 2.2 0.7 3.5-3.4 1.8 0.2 2.8-1.5 1.1 2.6 5.8 3.3 3.9-1 2.8 3.8 0.3 2.3 3.5 5 0.1 4.4-3.7 0.1 9.7 2.6 0.7 3.2-1.1 5.5 10.4-1.1 2.1 0 4.6 0.3 5.4-1.9 3.2 1.2 2.4-1.1 2.2 2.9 5.4-2.9 6.9-1.1 3.3-2.8 1.6-5.9-3.7-0.8-2.6-11.7-6.4-10.7-7.1-4.7-3.9-2.8-5.3 0.8-1.9-5.4-8.4-6.4-11.8-6-12.8-2.4-3-2-4.7-4.6-4.2-4.1-2.6 1.7-2.8-3-6.2 1.7-4.5 4.4-4 0.7 2.7-1.6 1.5 0.3 2.3 2.3-0.5 2.3 0.7 2.5 3.3 3.1-2.7 0.9-4.3 3.4-5.6 6.7-2.5 6.1-6.8 1.7-4.1-0.8-4.9 1.5-0.6 3.8 3 1.8 3.1 2.6 1.6 3.5 6.7 4.2 0.9 3.1-1.7 2.1 1.1 3.4-0.6 4.4 3-3.5 6.6 1.7 0.1 2.9 3.4z"        data-name="Peru"      />      <path        d="M 1700.5 447.8 1701.4 452.1 1702 455.7 1700.4 461.5 1697.9 455 1695.5 458.3 1697.6 463 1696.2 466 1689.3 462.3 1687.4 457.6 1688.9 454.6 1685.1 451.5 1683.5 454.2 1680.9 453.9 1676.9 457.5 1675.9 455.6 1677.7 450.2 1681.1 448.4 1684 446 1686.2 448.9 1690.4 447.2 1691.1 444.3 1695.1 444.1 1694.3 439.2 1699.2 442.2 1699.9 445.4 1700.5 447.8 Z M 1685.9 435.8 1684.1 437.9 1682.7 442 1681.1 443.9 1677.2 439.5 1678.2 437.7 1679.5 435.9 1679.7 432 1682.8 431.6 1682.3 435.9 1685.9 429.7 1685.9 435.8 Z M 1655.6 442 1648.5 448.1 1650.9 443.6 1654.7 439.6 1657.7 435.2 1660 428.8 1661.6 434.1 1658.1 437.6 1655.6 442 Z M 1673.1 425.5 1676.7 427.5 1680.2 427.5 1680.4 430.1 1678.1 432.9 1674.7 434.8 1674.2 431.8 1674.3 428.5 1673.1 425.5 Z M 1693.2 423.7 1695.6 430.9 1691.1 429.2 1691.4 431.4 1693.2 435.3 1690.6 436.8 1690 432.2 1688.2 431.9 1687 428 1690.3 428.5 1690 426.1 1686 421.2 1691.4 421.3 1693.2 423.7 Z M 1670.2 417.9 1669.3 423.5 1666.6 420.3 1663.1 415.4 1667.9 415.6 1670.2 417.9 Z M 1663.7 383 1667.5 384.9 1668.9 383.2 1669.7 384.8 1669.3 387.5 1671.9 392.1 1671.3 397.4 1668.4 399.5 1668.3 404.7 1670.3 409.8 1673.3 410.5 1675.7 409.8 1683.2 413.3 1683.1 416.8 1685.2 418.4 1684.9 421.3 1680.2 418.2 1677.7 414.8 1676.5 417.2 1672.5 413.3 1667.5 414.3 1664.5 412.9 1664.4 410.2 1666 408.6 1664.1 407.1 1663.7 409.4 1660.4 405.7 1659.1 402.9 1658 396.8 1660.6 398.9 1659.5 388.8 1660.3 383 1663.7 383 Z"        data-name="Philippines"      />      <path        d="M 1868.1 545.6 1866.5 546.3 1864.2 543.8 1862 539.7 1861.2 534.8 1862 534.2 1862.5 536.1 1864.1 537.6 1866.5 541.6 1869 543.8 1868.1 545.6 Z M 1846.7 537 1843.7 537.5 1842.7 539.3 1839.5 540.9 1836.5 542.4 1833.4 542.4 1828.9 540.5 1825.8 538.7 1826.4 536.7 1831.4 537.7 1834.6 537.2 1835.6 534.1 1836.5 533.9 1836.8 537.3 1840 536.9 1841.8 534.7 1845.1 532.4 1844.7 528.6 1848.1 528.5 1849.2 529.5 1848.8 533.1 1846.7 537 Z M 1782.9 560.4 1784.5 539.4 1785.5 518.5 1795.1 522.9 1805.4 526.6 1809.1 529.9 1812.1 533.1 1812.7 536.9 1821.9 540.9 1823 544.3 1817.8 545 1818.7 549.3 1823.4 553.5 1826.4 560.3 1829.7 560.1 1829.1 562.9 1833.4 564 1831.6 565.2 1837.3 567.9 1836.4 569.8 1832.6 570.2 1831.4 568.6 1826.7 567.8 1821.1 566.9 1817.1 562.8 1814.3 559.2 1811.8 553.6 1804.7 550.8 1799.8 552.6 1796.1 554.8 1796.4 559.5 1791.8 561.7 1788.7 560.6 1782.9 560.4 Z M 1853.6 530.7 1851.8 532.4 1850.9 528.6 1849.8 526.2 1847.3 524.1 1844.2 521.3 1840.2 519.4 1841.8 517.9 1844.8 519.7 1846.7 521.1 1849 522.6 1851.1 525.3 1853.2 527.4 1853.6 530.7 Z"        data-name="Papua New Guinea"      />      <path        d="M1079.9 154.8l5.9 0.7 8.8-0.1 2.5 0.7 1.4 1.9 0.6 2.7 1.7 2.3 0.4 2.4-2.8 1.3 1.9 2.8 0.5 2.8 3.2 5.4-0.3 1.7-2.3 0.7-3.8 5.2 1.6 2.8-1.1-0.4-5-2.4-3.5 0.9-2.4-0.6-2.8 1.3-2.7-2.2-1.9 0.9-0.3-0.4-2.6-3.1-3.7-0.3-0.7-2-3.4-0.7-0.6 1.6-2.8-1.3 0.2-1.7-3.7-0.5-2.5-2-2.4-3.9 0.2-2.2-1.5-3.3-1.9-2.1 1.2-1.7-1.4-3.1 3.1-1.8 7.1-2.8 5.8-2 4.8 1 0.6 1.5 4.6 0z"        data-name="Poland"      />      <path        d="M1660.3 229.9l1.4 1.1-2.2-0.4-1 2.2-0.3 2.1 2.8 4.6-1.9 1.4-0.3 1.1-0.9 1.9-2.9 1.1-1.4 1.7 1.3 2.7-0.3 0.7 2.6 1.1 4.4 2.8 0 1.5-2 0.4-3.6 0.4-0.6 2.8-2.5-0.2 0 0.6-3.2-1.2-0.1 1.2-1.3 0.5-0.7-1.2-1.7-0.6-1.9-1 0.1-2.8 0.9-0.8-1-1.1-0.4-3.5-0.9-1-3.4-0.7-3.4-1.7 2.1-4.1 3.9-3.4 1.1-4.6 3.6 2 4.6 0.3-2.8-3.4 6.4-2.7 0-3.6 5.5 3.8z"        data-name="Dem. Rep. Korea"      />      <path        d="M662.5 631.4l2 3.5 0.4 8.7 5.9 1.3 2.2-1.3 3.9 1.8 1.2 1.9 1.1 5.9 0.8 2.4 2.1 0.3 2-1 2.1 1.1 0.3 3.6-0.3 3.8-0.7 3.7-0.3 5.6-4.3 5-4.2 1-6.3-1-5.8-1.7 4.2-9.8-1.1-2.8-5.9-2.5-7.3-4.8-4.6-1-11.3-10.4 1.5-7.7-0.2-3.5 2.1-5.6 9.6-1.9 5.2 0.1 5.4 3.3 0.3 2z"        data-name="Paraguay"      />      <path        d="M1178.3 293.8l0.4 4-0.6 1.9-2.5 0.8 0.1-1.7 1.3-0.9-1.5-0.7 0.7-4.2 2.1 0.8z"        data-name="Palestine"      />      <path        d="M1270.1 343.7l-1.5 0.5-1.8-1.3-0.8-4.7 1.1-3.3 1.5-0.7 1.8 2 0.5 3.7-0.8 3.8z"        data-name="Qatar"      />      <path        d="M1118.9 193.1l1.6 0.7 1.8 1.8 2 2.6 3.4 3.8 0.6 2.7-0.2 2.7 1.3 2.9 2.4 1.2 2.3-1.1 2.4 1.1 0.4 1.7-2.3 1.3-1.6-0.6-0.4 7.7-3.1-0.7-4-2.3-5.9 1.5-2.3 1.6-7.6-0.4-4-0.9-1.9 0.4-1.8-2.6-1-1.1 1-1.1-1.3-0.7-1.5 1.4-3.1-1.9-0.7-2.6-3.2-1.4-0.8-2.1-3-2.4 3.9-1.2 2.6-4.3 1.9-4.2 2.9-1.3 2-1.4 3.2 0.7 3.2 0 2.5 1.6 1.6-1 3.6-0.6 1-1.5 2.1 0z"        data-name="Romania"      />      <path        d="M1158.8 509.1l2.2 3.6-0.3 3.8-1.6 0.8-3.1-0.4-1.7 3.7-3.5-0.5 0.6-3.6 0.8-0.5 0.2-3.8 1.6-1.8 1.4 0.7 3.4-2z"        data-name="Rwanda"      />      <path        d="M938.9 324.3l-0.1 0.4-0.1 1.2-0.2 9.8-18-0.4-0.2 16.5-5.2 0.5-1.5 3.3 0.9 9.3-21.7 0-1.3 2.1 0.3-2.7 0.1 0 12.5-0.5 0.7-2.3 2.4-2.9 2-8.9 7.9-6.9 2.7-8.1 1.8-0.5 1.9-5 4.6-0.7 2 0.9 2.5 0 1.8-1.5 3.4-0.2-0.1-3.4 0.9 0z"        data-name="Western Sahara"      />      <path        d="M1240.5 315l5 0.6 1.7 3.1 3.9-0.2 2.7 5.6 2.9 1.4 1.2 2.3 4 2.7 0.7 2.6-0.4 2.2 0.9 2.1 1.8 1.8 0.9 2.1 1 1.6 1.8 1.3 1.5-0.5 1.3 2.5 0.3 1.4 2.7 6.6 16.9 3.2 1-1.4 3 4.6-2.6 12.8-16.3 6.4-15.9 2.5-5 2.9-3.5 6.7-2.6 1.1-1.5-2.1-2.1 0.3-5.5-0.7-1.1-0.6-6.4 0.1-1.5 0.6-2.4-1.6-1.3 3.1 0.8 2.7-2.4 2.1-0.9-2.8-1.8-1.9-0.5-2.6-3.1-2.3-3.3-5.4-1.9-5.2-4.1-4.4-2.5-1.1-4.1-6.1-0.9-4.4 0-3.8-3.6-7.2-2.8-2.5-3-1.3-2.1-3.7 0.2-1.4-1.8-3.4-1.7-1.4-2.5-4.8-3.8-5.1-3.1-4.4-2.7 0 0.5-3.5 0.1-2.3 0.4-2.6 6.2 1.1 2.1-2 1.1-2.3 4.1-0.9 0.7-2.2 1.6-1-6-6.5 10.4-3.2 0.9-1 6.8 1.8 8.6 4.5 16.8 12.9 10.2 0.5z"        data-name="Saudi Arabia"      />      <path        d="M1191 409.2l-0.7 5.5-2 6.4-3.3 3.1-2.3 5-0.5 2.6-2.6 1.8-1.5 6.7 0 0.8-0.8-0.2 0.1-3.2-0.8-2.2-2.9-2.5-0.9-4.6 0.6-4.8-2.6-0.4-0.4 1.4-3.4 0.4 1.5 1.8 0.5 3.9-3 3.5-2.7 4.6-2.9 0.7-4.8-3.7-2.1 1.3-0.5 1.8-2.9 1.3-0.2 1.3-5.6 0-0.8-1.3-4.1-0.3-2 1.1-1.6-0.5-2.9-3.8-1-1.7-4.1 0.9-1.5 2.9-1.3 5.8-2 1.2-1.7 0.7-0.5-0.3-1.9-1.9-0.4-2 0.8-2.6 0-2.7-3.3-4-0.7-2.7 0-1.6-2.1-1.9-0.1-3.7-1.3-2.5-1.9 0.4 0.5-2.4 1.4-2.6-0.7-2.7 1.8-2-1.2-1.5 1.3-3.9 2.5-4.8 4.8 0.5-1.1-25.5 0-2.7 6.4 0-0.5-12.8 22.3 0 21.5 0 22.1 0 2.1 6.3-1.2 1.1 1.2 6.7 2.5 7.6 2.2 1.6 3.2 2.4-2.7 3.6-4 1.1-1.7 2-0.3 4.2-2 9.5 0.7 2.5z"        data-name="Sudan"      />      <path        d="M1178.1 441.1l0.2 5-0.8 1.9-3 0.2-1.9 3.6 3.5 0.5 3 3.1 1 2.6 2.6 1.5 3.5 7-3.8 4.2-3.4 3.8-3.5 3-4 0-4.5 1.5-3.6-1.5-2.3 1.8-5.1-4.3-1.4-2.7-3.1 1.3-2.6-0.4-1.5 1.1-2.6-0.8-3.5-5.3-0.9-2-4.3-2.6-1.4-3.8-2.4-2.8-3.9-3.3-0.1-2.1-3.1-2.6-3.9-2.5 1.7-0.7 2-1.2 1.3-5.8 1.5-2.9 4.1-0.9 1 1.7 2.9 3.8 1.6 0.5 2-1.1 4.1 0.3 0.8 1.3 5.6 0 0.2-1.3 2.9-1.3 0.5-1.8 2.1-1.3 4.8 3.7 2.9-0.7 2.7-4.6 3-3.5-0.5-3.9-1.5-1.8 3.4-0.4 0.4-1.4 2.6 0.4-0.6 4.8 0.9 4.6 2.9 2.5 0.8 2.2-0.1 3.2 0.8 0.2z"        data-name="South Sudan"      />      <path        d="M918 408l0.2 4 1.1 3.7 2 1.8 0.5 2.4-0.3 2-0.8 0.4-3.1-0.5-0.4 0.7-1.2 0.1-4.1-1.5-2.7-0.1-10.4-0.3-1.5 0.8-1.9-0.2-3 1-0.8-4.9 5.1 0.1 1.4-0.9 1 0 2.1-1.5 2.4 1.3 2.4 0.2 2.5-1.5-1.1-1.8-1.9 1-1.7 0-2.2-1.6-1.8 0.1-1.3 1.6-6.1 0.1-2.3-5-2.7-2.2 2.5-1.3 2.8-4.5 1.4-3.3 2-2 2.7 0.5 2.8-1.4 3.1 0 2.7 1.8 3.6 1.7 3.4 4.8 3.6 4.4z"        data-name="Senegal"      />      <path        d="M928.5 447.9l-2.6 3-2.6 3.4-0.3 1.9-1.4 2.1-1.5-0.5-4-2.6-3-3.4-0.9-2.4-0.7-4.7 3.1-2.9 0.6-1.7 1-1.4 1.6-0.2 1.3-1.2 4.5 0 1.6 2.3 1.2 2.7-0.2 1.9 0.9 1.7-0.1 2.3 1.5-0.3z"        data-name="Sierra Leone"      />      <path        d="M492.5 415.9l-0.7 1.5-3.3-0.1-2-0.6-2.2-1.3-3-0.4-1.5-1.4 0.3-0.9 2-1.6 1.2-0.7-0.3-0.8 1.4-0.4 1.6 0.6 1.1 1.2 1.6 1.1 0.1 0.8 2.5-0.7 1.2 0.4 0.7 0.7-0.7 2.6z"        data-name="El Salvador"      />      <path        d="M1102 218.2l-1.1 1.4 0.7 2.4 2.8 2.7-1.8 2-0.6 2 0.6 0.8-0.7 0.8-2.4 0.2-1.7 0.3-0.3-0.5 0.6-0.7 0.4-1.6-0.7 0.1-1.1-1.2-0.9-0.3-0.8-1-1-0.4-0.8-0.9-0.9 0.4-0.5 2.1-1.2 0.4 0.4-0.5-2.1-1.3-1.7-0.7-0.9-0.9-1.4-1.1 1.1-0.3 0.5-2.9-2.7-2.5 1.1-2.8-1.9 0.1 1.7-2.4-1.7-1.8-1.5-2.5 3.7-1.6 3.2 0.3 3 2.4 0.8 2.1 3.2 1.4 0.7 2.6 3.1 1.9 1.5-1.4 1.3 0.7-1 1.1 1 1.1z"        data-name="Serbia"      />      <path        d="M681 464.9l-3.1 5.5 0.3 4.4 2.2 3.8-1.1 2.7-0.5 3-1.5 2.7-3.2-1.4-2.7 0.7-2.3-0.6-0.6 1.9 1 1.2-0.6 1.4-3.1-0.6-3.3-5.6-0.7-3.6-1.8 0-2.4-4.6 1.1-3.4-0.3-1.5 3.5-1.6 1-5.8 6.8 1.3 0.6-1.2 4.6-0.5 6.1 1.8z"        data-name="Suriname"      />      <path        d="M1098.1 187.7l-1.2 1.7-0.7 2.5-1 0.6-5.5-1.9-1.6 0.4-1 1.5-2.3 0.8-0.6-0.4-2.3 0.9-1.9 0.2-0.3 1.3-4.1 0.7-1.9-0.6-2.7-1.7-0.7-2.1 0.3-0.8 0.6-1.4 2.2 0.1 1.6-0.6 0.1-0.6 0.9-0.3 0.2-1.4 1.1-0.3 0.7-1.1 1.5 0 0.3 0.4 1.9-0.9 2.7 2.2 2.8-1.3 2.4 0.6 3.5-0.9 5 2.4z"        data-name="Slovakia"      />      <path        d="M1069.8 203.9l-3.9 1.7-0.3 2.5-1.7 0.7 0.1 1.7-2-0.1-1.8-1-0.8 1-3.6-0.2 1.1-0.5-1.4-2.7 0.4-3.1 4.2 0.5 2.4-1.5 4.4-0.1 0.9-1.1 0.8 0.1 1.2 2.1z"        data-name="Slovenia"      />      <path        d="M1088.2 87l-7 1.6-3.5 3.9 1.3 3.5-6.2 4.5-7.8 5-2.1 8.1 3.7 4.1 4.8 3.3-3.3 6.6-4.6 1.4-0.6 10-2.1 5.7-5.7-0.6-2.2 4.8-5.5 0.3-1.9-5.7-4.5-6.9-4.2-8.4 1.8-3.4 3.4-4 0.8-6.9-3.1-2.9-1-7.7 2.4-5.4 4.3 0.1 1.3-2.2-1.8-2 5.7-7.9 3.4-6.1 2.3-3.9 4 0 0.6-3.1 8 0.9-0.1-3.6 2.6-0.2 6 2.7 7.2 3.7 1.8 8.5 1.8 2.2z"        data-name="Sweden"      />      <path        d="M1161.7 667.7l0.6 2.9 0.3 2.9-1.4 2.8-3.2 0.7-3.1-3.5 0.1-2.2 1.7-2.4 0.6-1.9 1.7-0.4 2.7 1.1z"        data-name="Swaziland"      />      <path        d="M1195 287.5l-9.7 6.9-6.3-2.6-0.1 0 0.6-1-0.4-2.6 0.9-3.5 2.7-2.5-1.2-2.5-2.5-0.3-1.1-4.9 1-2.7 1.3-1.4 1.2-1.4-0.2-3.5 1.9 1.2 5.6-1.8 3 1.2 4.4 0 5.7-2.4 2.9 0.1 5.9-1-2.1 4-2.7 1.6 1.2 4.7-1 7.7-11 6.7z"        data-name="Syria"      />      <path        d="M1119.2 376.1l1.1 25.5-4.8-0.5-2.5 4.8-1.3 3.9 1.2 1.5-1.8 2 0.7 2.7-1.4 2.6-0.5 2.4 1.9-0.4 1.3 2.5 0.1 3.7 2.1 1.9 0 1.6-3.6 1.1-2.8 2.6-4 7-5.2 3-5.5-0.4-1.6 0.6 0.6 2.2-2.9 2.3-2.4 2.5-7.1 2.4-1.4-1.4-1-0.2-1 1.7-4.6 0.5 0.8-1.8-1.8-4.4-0.8-2.6-2.5-1.1-3.4-3.8 1.2-3 2.6 0.6 1.6-0.4 3.2 0-3.2-5.8 0.2-4.3-0.5-4.2-2.3-4.1 0.6-3.1-3.7-0.1 0-4.1-2.4-2.4 2.3-8.5 7-6 0.2-8.4 1.8-13 1.2-2.8-2.4-2.2-0.1-2-2.2-1.7-1.6-10 5.5-3.5 22.5 12.3 22.6 12.3z"        data-name="Chad"      />      <path        d="M991.4 431.2l-0.7 3.4 1.7 1.9 2 2.2 0.2 3.2 1.2 1.3-0.3 14.8 1.4 4.4-4.5 1.4-1.3-2.3-1.5-4.1-0.5-3.2 1.3-5.7-1.4-2.4-0.6-5 0-4.7-2.3-3.3 0.4-2 4.9 0.1z"        data-name="Togo"      />      <path        d="M1577.5 410.2l-5.3-0.9-7.1 1.2-3.1 5.3 2.1 7.8-5.3-3-4.8 0.2 0.3-5.1-4.9 0 0.2 7.1-2.2 9.4-1.4 5.7 0.7 4.6 3.7 0.2 2.7 5.9 1.3 5.5 3.4 3.7 3.4 0.7 3.1 3.4-1.7 2.6-3.7 0.8-0.6-3.3-4.8-2.8-0.9 1.1-2.3-2.4-1.2-3.2-3.2-3.6-2.9-3.1-0.7 3.8-1.3-3.6 0.4-4 1.2-6.1 2.2-6.6 2.6-6-2.7-5.9-0.2-3-1-3.6-4.3-5.1-1.8-3.2 1.8-1.2 1.4-5.5-2.9-4.3-4.1-4.7-3.5-5.6 2.2-1.2 1.5-6.9 3.9-0.3 2.8-2.8 3-1.5 2.7 2 0.9 3.9 3.8 0.3-0.4 6.7 1 5.8 5.3-3.8 1.9 1.1 3.2-0.2 0.8-2.2 4.3 0.4 5 5.2 1.3 6.4 5.3 5.6 0.4 5.4-1.5 2.9z"        data-name="Thailand"      />      <path        d="M1357 243.6l-1.4 1.9-6-1 0.6 3.6 5.5-0.5 7.1 2.1 9.6-1 3.1 6 1.5-0.7 3.7 1.5 0.5 2.5 1.8 3.6-5.4 0-3.8-0.5-2.5 2.9-2.2 0.6-1.5 1.4-2.7-2.1-0.9-5.4-1.7-0.3 0.1-2-3.3-1.4-1.7 2.2 0.2 2.6-0.6 0.9-3.2-0.1-0.9 2.9-2.1-1.2-3.4 2-1.8-0.7 1.3-6.5-2.4-4.8-4.2-1.5 0.6-2.8 4.4 0.3 1.5-3.5 0.5-4.1 6.5-1.5-0.2 3 1.3 1.7 2.1-0.1z"        data-name="Tajikistan"      />      <path        d="M1338.3 262l-1.6-0.2-2.9-1.7-0.3 2.2-4.2 1.3 0.2 5.1-2.6 2-4 0.9-0.4 2.9-3.9 0.9-5.9-2.5-1.7-5.3-4-0.3-7.3-5.6-4.3-0.7-6.6-3.3-3.9-0.6-2 1.2-3.6-0.2-3 3.7-4.4 1.2-1.9-4.5-0.6-6.7-4.6-2.2 0.4-4.3-3.5-0.4-0.1-5.4 5.3 1.6 4.1-2-4.7-3.9-2.4-3.6-3.8 1.6 0.6 4.7-2.6-4.1 1.8-2.2 5.6-1.3 3.9 1.8 4.8 5 2.6-0.3 5.9-0.1-1.7-3.2 3.8-2.2 3.4-3.7 7.9 3.4 1.9 5 2.3 1.3 5.5-0.3 2.1 1.2 4.3 6.6 7.1 4.4 4.2 3 6.3 3.1 7.7 2.8 0.8 3.9z"        data-name="Turkmenistan"      />      <path        d="M1692.7 562.1l0.1-1.9-0.5-1.3 0.8-1.5 4.9-1.4 4-0.3 1.8-0.8 2.1 0.8-2.2 1.8-6.1 2.8-4.9 1.8z"        data-name="Timor-Leste"      />      <path        d="M1048.2 289.1l-0.1 4.9-2.6 1.8-1.6 2.1-3.6 2.5 0.6 2.6-0.4 2.8-2.6 1.4-2.6-11.5-3.4-2.6-0.1-1.5-4.5-3.9-0.6-4.8 3.2-3.6 1.1-5.3-1-6.1 1-3.3 5.7-2.5 3.7 0.7 0 3.3 4.4-2.4 0.4 1.2-2.5 3.2 0.1 2.9 1.9 1.6-0.5 5.6-3.5 3.2 1.2 3.5 2.8 0.1 1.4 3.1 2.1 1z"        data-name="Tunisia"      />      <path        d="M 1201.7 235.3 1207.2 235 1212.8 238.2 1214.1 240.4 1214.2 243.5 1218.4 245.1 1220.8 246.9 1217.5 248.8 1220.4 256.1 1219.7 258.1 1223.5 263.2 1221.1 264.3 1219 262.7 1212.7 261.8 1210.6 262.8 1204.7 263.8 1201.8 263.7 1196.1 266.1 1191.7 266.1 1188.7 264.9 1183.1 266.7 1181.2 265.5 1181.4 269 1180.2 270.4 1178.9 271.8 1176.6 268.9 1178.3 266.5 1175.1 267.1 1170.5 265.6 1167.3 269.3 1159.3 270 1154.6 266.6 1148.9 266.4 1147.9 269 1144.3 269.8 1138.9 266.4 1133.1 266.5 1129.3 260.1 1125.1 256.6 1127.1 251.6 1123.5 248.5 1128.6 242.4 1136.6 242.2 1138.2 237.3 1148.2 238.2 1153.8 234.1 1159.6 232.3 1168.1 232.1 1177.9 236.6 1185.8 239.1 1191.6 238.1 1196.2 238.7 1201.7 235.3 Z M 1121.9 239.9 1123.1 239.2 1124.2 235.2 1121.5 233.5 1126.5 231.5 1131.1 232.3 1132 234.8 1136.8 236.8 1136.1 238.4 1129.9 238.7 1127.9 240.7 1124 244.1 1122 241.2 1121.9 239.9 Z"        data-name="Turkey"      />      <path        d="M1167 508.4l-0.2 3.9-1.1 4.5 1.6 2.5 2.5-1.5 3.3-0.4 0.7 0.8 3.3-1.6-2.3-2.2 1.9-2.9 2.8-2.9 20.5 13.1 0.3 3.7 8.1 6.4-2.8 8 0.3 3.6 3.5 2.3 0.2 1.7-1.7 3.9 0.3 1.9-0.4 3.1 1.8 4 2.2 6.4 2 1.4-4.6 3.7-6.2 2.5-3.4-0.1-2.1 1.9-3.9 0.2-1.5 0.8-6.7-1.8-2.2 0.2 0.1-0.1-1.8-2.4-0.3-6.8-2.9-3.4-0.4 1.2-1-1.7-5.5-1.2-3.2-1.9-3.6-1.1-2.2-1.1-0.3-0.2-2.7-6.6-0.4-3.9-4.5-4.4 1.4-2.4-1.1-2.6 0.2-2.7-1-0.9 0.3-2.8 0.6-0.1 2-2.3 2.3-3.4 1.4-1.3 0-2.1-1.2-1.5-0.3-2.5 1.6-0.8 0.3-3.8-2.2-3.6 2-0.8 6.2 0.1z"        data-name="Tanzania"      />      <path        d="M1179 474.5l2.7 4.5 0.7 3.2 2.6 7.4-2.1 4.7-2.8 4.2-1.6 2.6 0 0.3-0.2-0.4-3-1.3-2.4 1.6-3.6 0.9-2.6 3.7 0.3 2.5-6.2-0.1-2 0.8-3.4 2-1.4-0.7 0.1-4.8 1.3-2.5 0.3-5.1 1.2-3 2.2-3.3 2.1-1.8 1.9-2.2-2.3-0.9 0.3-7.5 2.3-1.8 3.6 1.5 4.5-1.5 4 0 3.5-3z"        data-name="Uganda"      />      <path        d="M1157.2 174.6l2.3 2.7 0.1 1.2 6.7 2.2 3.6-1 3.6 2.9 2.9-0.1 7.7 2 0.4 1.9-1.3 3.2 1.8 3.5-0.3 2.1-4.8 0.4-2.2 1.8 0.4 2.7-3.9 0.5-3 2.1-4.6 0.3-4 2.4 1 3.9 2.8 1.5 5.1-0.4-0.6 2.3-5.4 1.1-6.3 3.6-3.1-1.3 0.7-2.9-5.9-1.9 0.7-1.2 4.6-2.1-1.7-1.4-8.1-1.6-0.8-2.4-4.5 0.8-1.3 3.5-3.3 4.6-2.4-1.1-2.3 1.1-2.4-1.2 1.2-0.7 0.6-2.1 1.1-2.1-0.6-1.1 1-0.5 0.6 0.9 3 0.2 1.3-0.5-1-0.6 0.2-1-2-1.6-1.1-2.6-2-1 0.1-2.1-2.6-1.7-2-0.3-4-1.9-3.2 0.6-1.1 0.9-2.1 0-1 1.5-3.6 0.6-1.6 1-2.5-1.6-3.2 0-3.2-0.7-2 1.4-0.5-1.7-3-1.7 0.7-2.5 1.2-1.7 1.1 0.4-1.6-2.8 3.8-5.2 2.3-0.7 0.3-1.7-3.2-5.4 2.3-0.3 2.4-1.6 3.8-0.2 4.9 0.5 5.7 1.5 3.9 0.1 1.9 0.9 1.7-1.1 1.5 1.5 4.3-0.3 2.1 0.6-0.3-3.1 1.3-1.4 4.1-0.3 1.8 0.2 1-1.4 1.5 0.3 4.9-0.6 3.8 3.5-0.9 1.3 0.8 1.9 3.9 0.3z"        data-name="Ukraine"      />      <path        d="M699.7 718.6l-1.6 4.1-5.4 3.5-4.2-1.3-2.8 0.7-5.5-2.7-3.6 0.2-3.9-3.6-0.4-4.1 0.9-1.4-1.2-6.4 0.4-6.6 0.5-5.2 3.4-0.7 6.3 5 1.9-0.2 6.3 4.1 4.8 3.6 3.8 4.3-1.8 3.1 2.1 3.6z"        data-name="Uruguay"      />      <path        d="M1352.7 230.7l1.7 0.6-3 4.1 4.6 2.4 3.2-1.6 7.2 3.4-5.3 4.6-4.1-0.6-2.1 0.1-1.3-1.7 0.2-3-6.5 1.5-0.5 4.1-1.5 3.5-4.4-0.3-0.6 2.8 4.2 1.5 2.4 4.8-1.3 6.5-4.3-1.4-3 0-0.8-3.9-7.7-2.8-6.3-3.1-4.2-3-7.1-4.4-4.3-6.6-2.1-1.2-5.5 0.3-2.3-1.3-1.9-5-7.9-3.4-3.4 3.7-3.8 2.2 1.7 3.2-5.9 0.1-6.2-23.4 12-3.7 1.1 0.5 9.2 4.5 4.8 2.4 6.6 5.7 5.7-0.9 8.6-0.5 7.6 4.6 1.5 6.4 2.6 0.1 2.5 5.2 6.7 0.2 2.3 3 2 0 0.9-4.6 5.4-4.4 2.6-1.2z"        data-name="Uzbekistan"      />      <path        d="M648.7 448.1l-4.7 3.8-0.5 2.3 1.8 2.4-1.4 1.2-3.5 1 0 3-1.6 1.8 3.7 4.8 0.7 1.8-2.1 2.5-6.4 2.4-4.1 1-1.7 1.5-4.5-1.6-4.1-0.8-1.1 0.6 2.5 1.6-0.3 4.3 0.7 4.1 4.8 0.5 0.3 1.4-4.1 1.8-0.7 2.7-2.4 1.1-4.2 1.5-1.1 2-4.4 0.4-3.1-3.4-1.6-6.4-1.5-2.3-2-1.4 2.9-3.2-0.2-1.4-1.5-1.9-1.1-4.3 0.6-4.6 1.3-2.2 1.2-3.4-2-1.1-3.2 0.7-4.1-0.3-2.3 0.7-3.8-5.6-3.3-0.8-7.3 0.6-1.2-2.2-1.4-0.5-0.1-1.4 0.7-2.4-0.3-2.5-1.2-1.5-0.6-2.9-2.9-0.4 1.8-3.8 0.9-4.6 1.8-2.4 2.3-1.8 1.6-3.2 3.7-1.1-0.2 1.5-3.4 0.8 1.7 2.9-0.3 3.4-2.7 3.7 1.9 5.1 2.5-0.4 1.5-4.7-1.7-2.2 0-4.9 7.2-2.6-0.6-3 2.1-2.1 1.7 4.6 4 0.1 3.4 3.5 0.2 2.2 5 0 6.1-0.6 3.1 2.8 4.2 0.8 3.3-2 0.1-1.6 7.1-0.4 6.7-0.1-4.9 1.9 1.8 3.1 4.5 0.4 4.2 3.2 0.7 5.1 2.9-0.1 2.2 1.5z"        data-name="Venezuela"      />      <path        d="M1586.5 363.5l-6.5 5.4-3.7 6.1-0.6 4.5 5.3 6.7 6.5 8.4 5.7 4 4.1 5.1 4 11.9 0.4 11.3-4.3 4.2-6.1 4.2-4.2 5.3-6.6 6-2.3-4.1 1.2-4.4-4.4-3.6 4.6-2.6 5.9-0.5-2.8-3.8 9-5-0.1-7.7-1.8-4.3 0.2-6.4-2-4.5-4.9-4.5-4.4-5.6-5.7-7.6-7.3-3.9 1.2-2.3 3.3-1.7-3-5.6-6.8 0-3.5-5.8-4-5.1 2.7-1.6 4.4 0.1 5.3-0.8 4.1-3.4 3.1 2.4 5.3 1.2-0.3 3.7 3.1 2.6 5.9 1.7z"        data-name="Vietnam"      />      <path        d="M1283.8 394.9l-4 1.7-0.9 2.9 0 2.2-5.4 2.7-8.8 3-4.7 4.5-2.5 0.4-1.7-0.4-3.2 2.7-3.5 1.2-4.7 0.3-1.4 0.4-1.1 1.7-1.5 0.5-0.8 1.6-2.8-0.2-1.7 0.9-4-0.3-1.6-3.8 0-3.5-1-1.9-1.3-4.7-1.8-2.6 1.1-0.4-0.7-2.9 0.6-1.2-0.4-2.8 2.4-2.1-0.8-2.7 1.3-3.1 2.4 1.6 1.5-0.6 6.4-0.1 1.1 0.6 5.5 0.7 2.1-0.3 1.5 2.1 2.6-1.1 3.5-6.7 5-2.9 15.9-2.5 5.2 10.6 2.2 4.5z"        data-name="Yemen"      />      <path        d="M1162.1 556.8l0.3 0.2 2.2 1.1 3.6 1.1 3.2 1.9 2.6 2.9 1.3 5.4-1 1.7-1.3 5.2 0.9 5.4-1.8 2.2-2 6 2.9 1.6-17.2 5.3 0.4 4.6-4.3 0.9-3.3 2.5-0.8 2.2-2 0.6-5.1 5.2-3.2 4.2-1.9 0.1-1.8-0.7-6.2-0.7-1-0.5 0-0.5-2.2-1.5-3.6-0.3-4.6 1.4-3.6-4-3.6-5.2 0.8-20.5 11.7 0.1-0.4-2.2 0.9-2.4-0.9-3 0.7-3.1-0.6-2 1.9 0.1 0.3 2 2.7-0.1 3.5 0.6 1.9 2.9 4.4 0.9 3.5-2 1.2 3.3 4.3 0.9 2 2.8 2.2 3.5 4.3 0-0.2-6.9-1.6 1.2-3.9-2.5-1.5-1.2 0.9-6.4 1.1-7.6-1.2-2.8 1.7-4.1 1.5-0.8 7.7-1.1 0.9 0.3-0.3 1.4 1.9 0.5 1.2 1.3 1-0.3-0.5-1.1z"        data-name="Zambia"      />      <path        d="M1159.4 644.7l-2.9-0.7-1.9 0.8-2.7-1.1-2.2 0-3.4-2.9-4.3-1-1.5-4.1 0.1-2.3-2.3-0.7-6.1-7-1.6-3.7-1.1-1.2-1.9-5.1 6.2 0.7 1.8 0.7 1.9-0.1 3.2-4.2 5.1-5.2 2-0.6 0.8-2.2 3.3-2.5 4.3-0.9 0.2 2.4 4.7-0.1 2.6 1.3 1.1 1.6 2.7 0.5 2.8 2-0.4 8.2-1.3 4.4-0.4 4.8 0.8 1.9-0.9 3.8-0.8 0.6-1.7 4.6-6.2 7.3z"        data-name="Zimbabwe"      />      <path        d="M1222.1 512.6l-3.3-5.3-0.2-23.4 4.9-7.2 1.5-2.1 3.6-0.1 5-4.5 7.3-0.3 15.6-19.3-4.8 0.1-18.7-7.6-2.2-2.3-2.2-3.1-2.2-3.6 1.2-2.2 1.9-3.5 1.9 1.2 1.2 2.7 2.7 2.7 2.8 0 5.2-1.7 6.1-0.7 4.9-2 2.8-0.4 2-1.2 3.2-0.2 1.8-0.2 2.5-0.9 3-0.7 2.5-2.2 2.2 0 0.2 1.8-0.4 3.7 0.2 3.4-1.1 2.3-1.4 7-2.4 7.1-3.3 8.2-4.6 9.4-4.7 7.2-6.6 8.8-5.6 5.2-8.4 6.4-5.3 4.8-6.2 7.8-1.3 3.4-1.3 1.5z"        data-name="Somalia"      />      <path        d="M1097.8 230.8l-1.2 0.3-2.9 1-0.1 1.3-0.7-0.1-0.6-2.3-1.3-0.7-1.2-1.7 0.8-1.4 1.2-0.4 0.5-2.1 0.9-0.4 0.8 0.9 1 0.4 0.8 1 0.9 0.3 1.1 1.2 0.7-0.1-0.4 1.6-0.6 0.7 0.3 0.5z"        data-name="Kosovo"      />      <path        d="M1159.4 644.7l2.2 9 1.1 4.6-1.4 7.1 0.4 2.3-2.7-1.1-1.7 0.4-0.6 1.9-1.7 2.4-0.1 2.2 3.1 3.5 3.2-0.7 1.4-2.8 4.1 0-1.7 4.7-1 5.3-1.7 2.9-4 3.3-1.1 0.9-2.6 3.3-1.8 3.3-3.5 4.6-6.7 6.6-4.1 3.8-4.3 3-5.9 2.4-2.7 0.4-0.9 1.8-3.2-1-2.7 1.2-5.7-1.2-3.3 0.8-2.2-0.4-5.8 2.6-4.6 1-3.5 2.4-2.4 0.2-2.1-2.3-1.8-0.1-2.2-2.9-0.3 0.9-0.6-1.7 0.3-3.8-1.5-4.3 1.8-1.2 0.1-4.9-3.3-6-2.4-5.4 0-0.1-3.6-8.3 2.8-3.2 2 1.8 0.8 2.7 2.5 0.5 3.4 1.2 2.9-0.5 5-3.3 1.1-23.7 1.4 1 3 6.1-0.6 3.9 1.1 2.3 4-0.7 2.8-2.9 2.7-1.9 1.5-3.1 2.8-1.4 2.3 0.7 2.5 1.8 4.5 0.3 3.6-1.4 0.6-2 1.2-3.1 3-0.5 1.8-2.4 2-4.3 5.2-4.8 8.1-4.7 2.2 0 2.7 1.1 1.9-0.8 2.9 0.7z m-20.3 53.2l1.1-2 3.1-1 1.1-2.1 1.9-3.1-1.7-2-2.2-2-2.7 1.4-3.1 2.5-3.2 4 3.7 5 2-0.7z"        data-name="South Africa"      />      <path        d="M 1886.2 764.4 1885.4 767 1891 764.4 1890.5 767.1 1888.4 769.8 1884.2 772.7 1877.1 777.4 1872.4 780 1871.8 783 1867.8 783.1 1861.5 785.5 1856.8 789.6 1848.6 796 1842.3 798.8 1838.3 800.6 1833.7 800.5 1832.2 798.4 1827.1 798 1828.1 795.6 1834.6 791 1846 784.7 1850.3 783.5 1855.9 781.1 1862.9 777.8 1868.6 774.5 1874.6 769.8 1877.7 768.2 1881.2 764.6 1887 761.7 1886.2 764.4 Z M 1915.2 733.9 1914.8 740.7 1917.7 736.3 1919 738.1 1916.6 742.9 1919.5 745 1922.7 745.5 1927.4 743.1 1929.6 743.8 1924.4 749.5 1920.2 753.2 1916.3 753.1 1913.5 755 1912 757.8 1910.4 758.9 1905.8 762.4 1899.9 766.7 1893.9 769.3 1894.4 767.6 1892.9 766.7 1899.8 761.5 1900.7 757.9 1896.9 755.4 1898.7 753.1 1904 750.9 1908.2 745.9 1910.7 741.8 1911.3 737.5 1912.1 736.4 1911.2 733.7 1910.5 728.1 1910.9 723.5 1913.1 723 1914 726.6 1917.2 728.2 1915.2 733.9 Z"        data-name="New Zealand"      />      <path        d="M 655.1 837.9 661.1 851.5 666.1 851.5 669.1 851.7 668.6 854.1 665.4 856 663 855.8 659.9 855.3 655.7 853.5 650.3 852.6 642.8 849.2 636.4 846 626.6 839.1 631.2 840.4 639.8 844.5 647.1 846.7 648.3 843.9 648 839.7 651.4 837.1 655.1 837.9 Z M 614.4 647.8 615.3 649.4 614.1 656.1 608.5 659.2 610.1 669.9 609.3 672 611.3 674.5 608 678.5 605.4 684.5 604.5 690.4 606.2 696.6 604.1 703.2 609 714.3 610.6 715.5 612 721.4 610.4 727.6 611.8 733 608.8 737.2 610.4 743 613.7 749.3 611.2 751.6 611.4 757.3 612.2 763.8 615.5 771.6 613.8 772.9 617.5 780.2 620.6 782.6 619.8 785.3 622.6 786.5 624 788.9 622.2 790.1 624 793.8 625.1 802.1 624.4 807.5 626.2 810.7 626.1 814.6 623.4 817.4 626.5 823.9 629.1 826.2 632.2 825.8 634.1 830.4 637.6 834 649.7 834.8 654.6 835.8 650.3 835.8 648.6 837.3 645.2 839.5 646.9 845.2 645 845.3 638.7 843.4 631.2 839.1 623.6 835.6 620.4 831.7 620.1 828.1 615.9 823.9 610.9 813.3 610.7 807.3 614.1 802.5 605.8 800.6 608.5 795.1 606.5 784.6 613 786.8 611.2 773.7 607.2 772 608.2 779.9 604.7 779 603.2 770 601.2 758.2 602.3 753.8 599 747.6 596.6 740.4 598.8 740.1 599.4 729.8 600.6 719.5 600.7 710 597.4 700.3 598 695 595.9 687.1 597.7 679.3 596.8 666.9 596.8 653.5 596.9 639.2 595.4 628.7 593.3 619.6 596.1 618 597.2 614.7 600.4 619.1 601.6 623.7 604.8 626.4 603.7 632.6 607.4 639.8 610.5 648.7 614.4 647.8 Z"        data-name="Chile"      />      <path        d="M1016.5 177.1l-2.8-1.5-3.1-2.7-4.5 1.3-3.6-0.5 2.5-1.7 4-9 6.5-2.6 4 0.2 0.9 2.1-0.9 5.6-1.2 2.3-2.9 0 1.1 6.5z M602 424.6l-0.2 0-0.1-0.5 0.1-0.3-0.1-0.3-0.4-0.1-0.3-0.3 0.1-0.3 1.2 0.6-0.1 0.2 0 0.4-0.2 0.2 0 0.4z"        data-name="Netherlands"      />      <path        d="M946.9 263.7l-2.2 1.6-2.8-0.9-2.7 0.7 0.9-5-0.3-3.9-2.4-0.6-1.1-2.4 0.5-4.2 2.2-2.3 0.5-2.6 1.2-3.8 0-2.7-0.9-2.3-0.2-2.2 1.9-1.6 2.2-0.9 1.2 3.1 3 0 0.9-0.8 3.1 0.2 1.3 3.2-2.4 1.7-0.3 5-0.8 0.9-0.3 3.1-2.3 0.5 2 3.8-1.6 4.2 1.8 1.9-0.8 1.7-2 2.4 0.4 2.2z"        data-name="Portugal"      />      <path        d="M 1689.5 177.4 1703.2 188.4 1694.3 186.4 1698 195.4 1707.6 201.8 1710.6 206.2 1704.1 202.4 1704.2 207.3 1699.5 202 1695.7 195.9 1690.1 189.2 1687.7 184.4 1681.3 176.2 1673.3 170.1 1666.5 161.7 1668.4 158.9 1664 156.1 1665.3 155.2 1670.2 159.2 1677.1 165.1 1682.3 171.2 1689.5 177.4 Z M 1094.6 155.4 1085.8 155.5 1079.9 154.8 1080.6 152.2 1086.9 150.2 1092 151.3 1094.2 152.2 1094 153.9 1094.6 155.4 Z M 1548.4 48.2 1542.5 48.3 1533.6 47.7 1532.6 47.4 1533.3 45.4 1537.5 44.9 1545.9 46.9 1548.4 48.2 Z M 1561 38.7 1559.9 40.7 1553 40.3 1542.7 38.3 1540.9 36.7 1549.2 37.4 1561 38.7 Z M 1535.5 36.3 1538.6 40.1 1524.3 39.9 1519.7 41.1 1507.2 37.8 1503.8 34.4 1507.3 33.5 1517.5 33.7 1535.5 36.3 Z M 1218.8 61.3 1216.6 61.7 1203.1 61 1200.8 58.7 1192.9 57.3 1190.9 54.4 1194.4 53.3 1192.8 50.5 1198.2 46.1 1194.2 45.5 1200.9 41 1198.4 38.7 1205.2 36.1 1215.5 32.9 1227.2 32 1232.2 30.2 1238.9 29.6 1243.1 31.5 1241.8 33 1230.4 35.5 1220.5 37.8 1211.8 42.6 1209 47.6 1205.7 52.6 1208.8 56.9 1218.8 61.3 Z M 1661.7 231 1660.3 229.9 1658.4 226.6 1660.9 226.5 1657 219 1652.3 213.6 1655.2 211.4 1662.1 212.5 1661.5 206.3 1658.7 199.5 1659 197.2 1657.7 191.5 1650.8 193.4 1648.2 195.8 1640.6 195.8 1634.6 190 1625.6 185.5 1615.6 183.5 1609.4 177.5 1604.9 173.7 1601.1 171 1593.4 164.8 1587.4 162.6 1578.8 160.7 1572.6 160.9 1567.5 162 1565.8 165.1 1569.5 166.5 1572 169.9 1570.7 171.9 1570.9 178.4 1572.8 181.2 1568.4 185.1 1561 182.7 1555.4 183.3 1551.5 181.2 1548.1 180.5 1543.7 184.9 1537.8 185.9 1534.2 187.5 1527.4 186.5 1522.8 186.5 1517.9 183.3 1511.3 180.4 1505.9 179.5 1500.2 180.3 1496.2 181.5 1487.7 178.9 1484.1 174.3 1477.4 172.7 1472.6 171.9 1465.6 169.4 1464.3 175.8 1468.3 179.4 1465.9 183.8 1457.9 182.2 1452.9 182 1448.1 179.1 1442.9 179 1437.6 177.1 1431.7 180 1425 185.3 1420.3 186.4 1418.6 186.9 1414.2 183.1 1408.2 184 1404.9 181.3 1400.9 180.1 1396.8 176.5 1393.5 175.4 1387.3 177 1378.9 173.5 1377.8 176.7 1359.5 161.1 1351.1 156.4 1351.9 154.4 1342.7 160.2 1338.3 160.5 1337.2 157.2 1330.1 155.1 1325.8 156.6 1321.4 150.3 1312.3 149 1309.2 151.5 1298.3 153.8 1296.6 155.3 1279.6 157.4 1278.2 159.5 1283.3 163.7 1279.3 165.3 1280.8 166.9 1277.3 169.9 1286.7 174.2 1286.5 177.1 1279.5 176.8 1278.7 178.7 1271.4 175.5 1263.7 175.6 1259.3 178.2 1252.7 175.7 1240.7 171.4 1233.1 171.6 1225 178.3 1225.6 182.8 1219.6 179.2 1217.4 186.1 1219.2 187.3 1217.5 192.1 1222.8 196.3 1226.4 196.1 1230.7 200.3 1230.9 203.5 1233.7 204.6 1232.3 208.3 1227.7 209.3 1224.1 215.8 1230.1 221.9 1230.5 226.1 1237.8 233.6 1235.3 236.2 1234.7 237.8 1232.3 237.3 1228 233.5 1226.5 233.3 1222.9 231.8 1220.8 229.2 1215.7 227.9 1212.8 228.9 1211.6 227.7 1204 224.6 1196.3 223.6 1191.7 222.5 1191.3 223.3 1183.7 217.9 1177.5 215.5 1172.4 211.8 1176 210.8 1179.2 205.6 1175.9 203.1 1182.8 200.5 1182.4 199.1 1178.1 200.1 1177.7 197.4 1179.9 195.6 1184.7 195.2 1185 193.1 1183.2 189.6 1184.5 186.4 1184.1 184.5 1176.4 182.5 1173.5 182.6 1169.9 179.7 1166.3 180.7 1159.6 178.5 1159.5 177.3 1157.2 174.6 1153.3 174.3 1152.5 172.4 1153.4 171.1 1149.6 167.6 1144.7 168.2 1143.2 167.9 1142.2 169.3 1140.4 169.1 1138.4 165.1 1136.9 163.1 1137.7 162.5 1141.6 162.7 1143.2 161.4 1141.5 159.8 1138.1 158.7 1138.1 157.6 1136 156.5 1132.2 152.5 1132.9 150.9 1131.8 148 1127 146.6 1124.6 147.3 1123.7 145.8 1118.4 144.3 1116.3 140.7 1115.3 137.8 1112.8 136.5 1114.4 134.6 1112 129 1114.6 125.6 1113.7 124.6 1118.2 121.3 1112.8 118.5 1120.8 111.1 1124.2 107.7 1125.1 104.8 1117.7 100.9 1118.6 97.1 1113.7 92.9 1115.4 88.1 1108.9 81.8 1111.8 77.6 1104.5 73.9 1104.1 70.1 1107.3 69.6 1113.7 67.5 1117.4 65.6 1125.1 68.8 1136.8 70.1 1154.5 76.3 1158.6 78.9 1160.1 82.6 1156.4 85.5 1149.9 87 1129.7 82.8 1126.8 83.5 1134.9 87.6 1135.9 90.2 1137.8 96 1143.9 97.7 1147.7 99.2 1147.5 96.4 1144.1 94 1146.2 91.8 1157.8 95.4 1161 94 1156.7 89.8 1164.8 84.4 1168.9 84.7 1173.5 86.6 1174.6 82.8 1169.9 79.5 1170.7 76.2 1166.4 72.8 1178.7 74.6 1182.3 77.6 1177.2 78.3 1178.4 81.4 1182.5 83.3 1188.5 82.1 1188.1 78.6 1195.8 75.9 1208.2 71.3 1211.4 71.5 1208.9 74.8 1214.3 75.4 1216.4 73.5 1224.1 73.4 1229.1 71.1 1235.5 74.4 1238.3 70.8 1232.3 67.7 1233.5 65.9 1246.5 67.5 1253.1 69.2 1271.7 75.4 1272.8 72.6 1266.9 69.7 1266.1 68.6 1260.8 68 1260.6 65.5 1255.9 61.3 1254.8 59.6 1259.1 54.9 1258.5 50.1 1260.7 49.1 1272.1 50.5 1275 53.4 1274.1 57.6 1277.8 59.3 1281.6 63 1285.4 70.4 1292.1 73.7 1292.6 77.4 1289.1 85.2 1294.4 86 1294.9 84 1298.7 82.6 1298.2 79.9 1300.1 77.2 1295.7 74.1 1295.3 70.5 1290.5 70.1 1287.6 67.1 1287.2 61.7 1279 57.4 1283.7 53.9 1280 50.2 1281.9 50.1 1286.1 52.9 1288.2 58 1293.2 59 1288.6 55.2 1293.7 53.1 1301.8 52.8 1311.4 55.8 1304.5 51.5 1299.6 46 1305.5 45 1315 45.2 1322.8 44.5 1317.2 41.9 1318.5 38.6 1322.7 38.4 1327.6 36 1336.9 35.3 1336.7 33.9 1346 33.5 1350.3 34.6 1355.7 32 1362.7 32.1 1361.2 29.9 1362.1 27.9 1368.3 25.9 1376.6 27.5 1373.1 28.7 1382.5 29.4 1386.6 31.8 1388.5 30.6 1399.4 30.7 1411 33.1 1416.5 34.9 1419 37.5 1416.6 39 1410 41.8 1408.9 43.3 1414.5 44 1421.7 45.3 1424.1 44.3 1429.9 47.6 1430.1 46.3 1435.3 45.5 1448.9 46.3 1452.7 48.7 1470.1 49.5 1465.3 45.6 1474.8 46.5 1480.9 46.4 1490.8 49.1 1496.8 52.4 1497.2 54.6 1507.3 58.8 1516.3 60.9 1513.3 55.4 1522.7 57.7 1527.7 56.3 1537.5 57.9 1538.5 56.5 1546.1 57.2 1536.7 52.3 1538.8 50.1 1579.2 53.5 1587.1 56.6 1603.4 60.6 1618.2 59.6 1627.5 60.5 1634.1 62.7 1639.2 66.6 1646.5 68.1 1650.4 67 1657.4 66.9 1666.7 67.9 1673.6 67.3 1687.9 72.1 1690.4 70.4 1681.9 67 1680.1 64.6 1695.4 66.1 1703.4 65.8 1719.2 68.3 1728.7 70.7 1761.9 92.8 1759.9 95.3 1753.7 94.9 1761.9 97.9 1771 102.6 1775.2 104.1 1779 106.5 1780 108 1770 106.8 1763.4 111.1 1760.4 111.8 1758.8 115.9 1756.8 119.5 1758.5 122.2 1747 118.1 1740.9 122.7 1736.2 120.5 1734.8 123.1 1727.8 122.2 1730.9 126.1 1732 131.9 1734.9 134.3 1741.7 135.6 1750.8 144.3 1746.7 144.6 1750.1 149.6 1754.8 152.2 1749.8 155.3 1755.2 162.3 1749.5 163.8 1754 170 1752.3 175.8 1746.6 171.5 1736.1 162.6 1719.9 149 1713.4 140.7 1713.5 137.1 1710.7 134.3 1716.4 133 1716.2 125.5 1716.9 119.5 1719.4 114.8 1712.8 106.6 1708.1 107.1 1711.3 111.9 1707.7 118.3 1695.4 111.1 1686.3 113.1 1686.3 122.9 1694 126.5 1685.5 128.1 1679.1 128.7 1674.8 124.4 1666.8 123.5 1664.3 126.4 1649.2 125.4 1636 127.1 1632.5 138.8 1627.5 153 1635.7 153.8 1641.4 157.6 1647.2 158.9 1647.6 155.9 1653.2 156.3 1666 163 1670.7 168.2 1672.1 174.4 1677.6 181.8 1682.9 191.7 1681.9 200.8 1683.2 205.1 1681.2 212.5 1679.1 219.8 1678.2 223.5 1673.6 227.2 1670.5 227.3 1665.3 224.2 1661.2 228.9 1661.7 231 Z M 1367.1 23.1 1349 24.9 1347.7 18.8 1349.9 18.3 1353 18.6 1365.6 21.2 1367.1 23.1 Z M 1164.8 13.1 1160.5 13.6 1157.6 14 1157.6 14.7 1154 15.4 1149.5 14.4 1150.6 13 1142.8 12.9 1149.1 12.1 1154.3 12.1 1155.8 13.2 1157.1 12.2 1159.9 11.5 1165.7 12.4 1164.8 13.1 Z M 1345.1 20.4 1338 21 1326.3 19.7 1318.2 18 1311.6 14.8 1305.7 14 1311.1 11.1 1317.3 10.2 1326.9 12.2 1340.6 16.4 1345.1 20.4 Z"        data-name="Russian Federation"      />      <path        d="M976.6 223.4l2 2.4 9.5 2.9 1.9-1.4 5.8 2.9 5.9-0.8 0.4 3.7-4.9 4.2-6.6 1.4-0.5 2.1-3.2 3.5-2 5.2 2 3.7-3 2.8-1.2 4.2-4 1.3-3.7 4.9-6.8 0.1-5-0.1-3.4 2.2-2.1 2.4-2.6-0.5-1.9-2.2-1.4-3.6-4.9-1-0.4-2.2 2-2.4 0.8-1.7-1.8-1.9 1.6-4.2-2-3.8 2.3-0.5 0.3-3.1 0.8-0.9 0.3-5 2.4-1.7-1.3-3.2-3.1-0.2-0.9 0.8-3 0-1.2-3.1-2.2 0.9-1.9 1.6 0.5-4.5-2-2.7 7.4-4.6 6.2 1.1 6.9 0 5.4 1.1 4.3-0.4 8.3 0.3z M 888.4 323.4 888.1 323.9 887.7 324.4 887.4 324 887 324 886.8 323.8 887 323.5 887.4 323.6 887.8 323.2 888.1 323 888.3 323.1 888.4 323.4 Z M 902 321.1 902 321.6 902.2 322 902 322.7 902.1 323 901.7 323.4 901.2 323.6 901 323.8 900.4 323.6 899.9 323.1 899.7 322.7 899.7 322.1 900.3 321.7 900.4 321.2 900.4 321 901 321.1 901.4 321.1 901.7 321.2 902 321.1 Z M 892.1 321.9 891.9 321.9 891.6 321.7 891.4 321.4 891.5 321 891.6 320.7 891.9 320.7 892.2 320.7 892.7 321.1 892.8 321.4 892.3 321.9 892.1 321.9 Z M 898.2 318.4 898.2 318.6 897.6 318.9 897.2 319.4 896.9 319.6 896.9 320 896.5 320.7 896.4 321.1 895.9 321.7 895.8 321.9 895.6 321.9 895 322.1 894.9 322 894.8 321.6 894.5 321.2 894.4 321 894.2 320.7 894.2 320.4 893.8 319.8 894.3 319.5 894.6 319.7 895.2 319.5 895.6 319.5 896.1 319.3 896.6 318.9 896.6 318.7 897.2 318.4 897.8 318.4 898.1 318.3 898.2 318.4 Z M 908.4 321.2 908.1 321.6 907.7 321.7 907.4 321.6 907 321.6 907 321.4 907.3 321.4 907.9 321.2 908.3 320.9 908.6 320.6 908.7 320.1 908.8 319.8 909 319.3 909.3 318.9 909.6 318.3 909.8 317.5 910 317.3 910.4 317.2 910.7 317.5 910.8 318 910.7 318.5 910.6 319 910.6 319.5 910.5 319.6 910.2 320.3 909.9 320.6 909.3 320.7 908.6 321 908.4 321.2 Z M 888.8 316.7 889.1 316.6 889.3 316.9 889.5 317.4 889.3 317.7 889.4 318.1 888.8 319.1 888.7 319 888.6 318.6 888.2 317.7 888.1 317.4 888 317.2 888.2 316.8 888.5 316.6 888.8 316.7 Z M 912.9 314.7 912.9 315.1 912.7 315.6 912 316.1 911.5 316.2 911.1 316.7 910.6 316.5 910.6 316.4 910.8 316 910.8 315.6 911 315.3 911.3 315.1 911.6 315.1 911.9 314.8 912.4 314.8 912.5 314.7 912.7 314.2 912.9 314.1 913.1 314.3 912.9 314.7 z"        data-name="Spain"      />      <path        d="M 1035.7 231.4 1034.2 236.3 1031.8 235 1030.5 230.8 1031.4 228.4 1034.6 226 1035.7 231.4 Z M 1014.4 185 1015.5 185.5 1016.9 185.4 1019.3 187 1026.5 188.2 1024.1 192.4 1023.7 196.9 1022.4 198 1020.1 197.4 1020.3 199 1016.7 202.5 1016.7 205.4 1019.1 204.4 1020.9 207.1 1020.8 208.9 1022.3 211.3 1020.6 213.2 1022.1 218.1 1024.9 218.9 1024.4 221.6 1019.9 225.2 1009.7 223.5 1002.3 225.6 1001.7 229.4 995.8 230.2 990 227.3 988.1 228.7 978.6 225.8 976.6 223.4 979.3 219.6 980.3 207 975.2 200.4 971.5 197.2 963.9 194.8 963.5 190.2 970 188.9 978.3 190.5 976.8 183.4 981.5 186.1 992.9 181.3 994.4 176.2 998.6 174.9 999.4 177.1 1001.6 177.2 1004 179.7 1007.5 182.6 1010 182.1 1014.4 185 Z"        data-name="France"      />      <path        d="M 118.8 379.3 117.7 380.4 116.5 379.5 117.1 377.7 116.7 375.3 117.2 374.6 118.4 373.6 118.3 372.3 118.7 371.7 119.1 371.8 121 372.9 121.9 373.5 122.6 374.3 123.5 376.6 123.3 376.9 120.8 378.3 118.8 379.3 Z M 118.1 369.3 116.1 369.7 115.5 368.4 115 367.9 115 367.5 115.7 366.9 117.5 367.5 118.7 368.5 118.1 369.3 Z M 115.1 365.9 114.8 366.6 111.8 366.4 112.4 365.6 115.1 365.9 Z M 110.4 364.9 110 365.3 109.6 365.2 107.7 365 107.4 363.5 107.2 363.3 108.9 362.4 109.3 362.8 110.4 364.9 Z M 102 360.7 101.2 361.3 99.6 360.2 100 359.7 101 359.1 102.3 359.2 102 360.7 Z M 539.5 194.5 533.4 196.5 528.7 199 524.1 201.7 523.6 202.6 529.3 201.3 531.4 203.4 536 201.9 540.9 199.8 546.3 197.7 543.2 201 545.7 201.8 548.2 204.2 553.3 202.8 558.4 202.3 558.7 204.1 560.2 204.3 561.4 204.5 562.9 207 558.2 207.6 558.1 207.6 554.4 206.9 549.9 208.1 546.2 208.7 541.5 212.8 538.5 215.1 538.9 215.8 544.4 211.7 545.1 211.7 540.4 216.6 537.5 221 535 224.6 534.4 227.7 533.6 229.2 533 230.9 533.1 234.2 533.4 234.7 535.2 234.6 536.8 233.9 538.2 233.1 541.5 230 543.3 225.8 543.2 221.9 544.6 219.2 547.2 216.1 549.3 213.9 552 212.4 551.6 214.5 553.8 211.4 555.1 210.8 556.8 208.4 560.6 209.7 563.4 212.1 562.6 215 561 217.9 557.2 220.4 556.8 222 557.8 222 562.1 219.3 563.7 219.9 563.2 223.6 562.5 226.2 558.8 229.7 556.8 231.9 554.1 234.3 556.8 235.6 559.3 236 563.3 235.1 567 233.4 570 232.5 574.6 230.7 580.4 226.9 580.5 226.3 580.8 224.4 583.5 223.6 587.4 223.9 591.4 224.4 596 222.3 596.6 219.8 596.4 218.9 603.2 214.5 605.9 213.4 613.7 213.3 623 213.3 624.1 211.8 625.8 211.5 628.3 210.5 631.1 207.6 634.3 202.7 639.8 198 640.9 199.6 644.6 198.6 646.2 200.4 643.3 208.9 645.5 212.5 645.7 214.6 639.3 217.6 633.3 219.8 627.3 221.7 623.3 225.5 622 226.9 620.8 230.3 621.5 233.6 623.6 233.8 623.8 231.5 624.9 232.9 623.9 234.7 620.1 235.7 617.6 235.6 613.4 236.7 611.1 237 608 237.3 603 239.2 611.1 238 612.2 239.2 604.3 241.1 601 241.1 601.4 240.3 599.3 242.1 600.7 242.4 598.2 247 592.9 251.9 593 250.2 591.9 249.9 590.7 248.3 590.7 251.8 591.7 252.9 591.1 255.3 588.7 257.8 584.2 262.9 583.8 262.7 586.7 258.3 584.7 255.9 585.7 250.5 583.8 253.3 583.8 257.4 580.6 256.4 583.6 258.4 582.1 264.5 583.5 265 583.5 267.2 582.5 273.6 577.9 278.3 571.8 280.2 567.4 284 564.6 284.4 561.2 286.8 559.9 288.9 553 293.1 549.2 296.2 545.7 300 543.8 304.5 543.8 309 544.4 314.5 545.9 319 545.4 321.8 546.7 329.2 545.7 333.6 545.1 336.1 543.1 340 541.3 340.8 538.7 340 538.3 337.2 536.5 335.7 534.5 330.2 532.9 325.3 532.5 322.8 534.5 318.5 533.7 315 530.6 309.6 528.7 308.6 522.6 311.6 521.7 311.2 519.7 308.2 516.7 306.6 510.3 307.5 505.7 306.7 501.4 307.2 498.9 308.2 499.5 309.9 498.8 312.5 499.6 313.8 498.4 314.6 496.6 313.7 494.3 314.9 490.4 314.7 487.1 311.3 482.2 312.1 478.6 310.6 475.1 311.1 470.1 312.6 464 317.3 457.9 320.1 454.2 323.1 452.3 326 451.3 330.5 450.9 333.5 451.5 335.7 449.3 335.9 445.7 334.5 441.8 332.5 440.9 329.5 440.7 325 438.3 321.4 437.4 317.6 435.8 313.2 432.6 310.6 428.1 310.8 423.3 315.8 419.3 313.9 417 312 416.6 308.4 415.8 305.1 413.4 302.3 411.3 300.2 410 297.9 400.6 297.9 399.8 300.6 395.5 300.6 384.7 300.6 373.8 296.1 366.8 293 367.7 291.7 360.6 292.4 354.3 292.9 354.6 289.7 352.5 286 350.3 285.2 350.4 283.4 347.5 283 346.3 281.3 341.5 280.7 340.6 279.6 341.4 276.1 338.9 269.7 338.4 260.8 339.3 259.3 338 257.2 336.5 251.8 338.3 246.6 337.4 243.1 341.3 237.8 344.1 232.4 345.2 227.5 350.7 221.5 354.7 215.8 358.7 210.1 363 201.6 364.8 196.3 365.2 193.4 366.6 192.1 372.4 194.3 371.4 200.2 373.6 198.5 376.1 193.4 377.7 188.3 391.8 188.3 406.5 188.3 411.3 188.3 426.4 188.3 441.1 188.3 455.9 188.3 470.8 188.3 487.6 188.3 504.6 188.3 514.8 188.3 516.1 185.9 517.8 185.9 516.9 189.3 517.9 190.3 521.2 190.7 525.8 191.7 529.7 193.6 534.1 192.8 539.5 194.5 Z M 275 138.6 268 140.9 267.2 139.3 269.5 136.5 275.9 134.4 279.4 133.5 282 133.9 282 135.8 275 138.6 Z M 236 122 232.1 122.9 230.4 121.8 229.6 120.2 235.3 119.2 238.3 119.8 236 122 Z M 237.2 99.6 238.4 100.6 241.9 100.1 243.5 101.6 246.8 102.3 245.6 103 240.7 104.2 239 102.9 238.7 101.9 234.4 102.2 234.1 101.7 237.2 99.6 Z M 410 66.6 385.4 87 349.8 119.7 354 119.9 356.8 121.5 357.3 124.1 357.6 127.9 365.2 124.6 371.7 122.7 371.1 125.8 371.9 128.2 373.5 130.9 372.4 135.1 371 142 375.6 145.8 372.4 149.6 367.3 152.5 366.7 150.3 364.2 148.3 367.5 143.1 365.9 138.2 368.6 132.6 364.5 132.2 357.4 132.1 353.6 130.3 350.3 124.2 347 123.1 341.3 121 334.5 121.5 328.5 118.8 325.8 116.3 319.5 117.5 316 121.6 313.1 122 306.5 123.2 300.3 125.2 293.9 126.5 297.1 123 305.5 117.2 312.3 115.4 312.7 114 303.3 117.2 295.9 121.1 284.7 125.3 284.9 128.2 275.9 132.4 268.2 134.9 261.6 136.8 257.6 139.4 247 142.5 242.5 145.3 234.3 147.9 231.6 147.5 225.4 149.1 218.4 151.2 212.3 153.2 202.3 155 202.7 153.9 210.9 151.1 217.5 149.2 226.1 145.9 232.6 145.3 237.6 142.8 248 139.2 250.3 138 256 135.9 261.8 131.4 268 127.9 260.7 129.7 260.4 128.6 255.5 130.8 255.9 127.8 252.3 129.9 253.9 127 246.6 129.3 243.8 129.3 247.5 125.8 250.8 123.6 250.4 121.5 243.2 122.7 242.6 119.9 241.3 118.5 245.3 115.2 244.9 112.7 250.8 109.4 258.5 106.1 263.8 103.2 267.9 102.8 269.7 103.7 276.8 100.9 279.3 101.4 284.9 99.6 287.4 97 286.3 96 292.3 93.8 289.5 93.9 283.3 95.1 280.4 96.4 278.6 95.1 271.7 95.8 267.1 94.4 268.3 92.1 267.3 88.9 276.5 86.5 289.7 83.8 293.2 83.8 288.9 86.6 298.1 86.4 299.3 82.9 297 80.8 297.8 78 297.1 75.7 293.8 74 300.3 71.1 307.8 70.9 316.6 68.5 321.4 65.9 329.3 63.3 334.1 62.7 345.3 60.3 348.4 60.7 358.8 57.9 363.2 59 362.7 61.4 366 60.4 372.3 60.7 370.4 61.9 375.3 62.8 380.2 62.3 386.4 63.9 393.6 64.5 395.8 65.1 402.4 64.3 406.5 65.9 410 66.6 Z"        data-name="United States"      />      <path        d="M677.3 487l1.5-2.8 0.5-2.9 1-2.7-2.1-3.8-0.3-4.4 3.1-5.5 1.9 0.7 4.1 1.5 5.9 5.4 0.8 2.6-3.4 5.9-1.8 4.7-2.2 2.5-2.7 0.4-0.8-1.8-1.3-0.2-1.7 1.7-2.5-1.3z"        data-name="French Guiana"      />      <path        d="M592.9 422l-0.5-0.2-0.5-0.5 0.1-0.6 0.2 0.3 0.4 0.4 0.3 0.5 0 0.1z"        data-name="Aruba"      />      <path        d="M 27.7 593.3 27.4 593.7 27.2 594 27 594.1 26.6 593.8 26.8 593.6 27.1 593.6 27.2 593.4 27.7 593.3 z"        data-name="American Samoa"      />      <path        d="M 640.7 391.9 641.3 392.2 641.1 392.5 640.9 392.5 640.2 392.6 640 392.5 640 392 640.3 391.9 640.4 391.6 640.6 391.6 640.7 391.9 z"        data-name="Antigua and Barbuda"      />      <path        d="M1264.1 333.3l0.3 0.1 0.2-0.1 0.4 0.7-0.1 0.2 0.1 0.9 0 0.7-0.2 0.4-0.1-0.4-0.6-0.8 0.1-0.4-0.2-0.7 0-0.4 0.1-0.2z"        data-name="Bahrain"      />      <path        d="M 580.4 366 580 366.5 579.8 367 579.2 367.3 578.7 367.3 578.6 367.2 578.2 367.4 577.7 367.5 577.1 367.3 576.7 367.4 576.6 366.9 576.9 366.7 577.1 366.4 577.5 366.2 577.8 365.8 578.2 365.8 578.5 365.6 578.7 365.9 579.2 366.1 579.7 365.9 580.4 364.9 580.7 364.9 580.7 365.1 580.4 366 Z M 581 357.8 581.2 357.7 581.7 358 582.1 358 582.5 358.1 582.8 358.3 582.8 358.6 582.6 358.7 582.1 358.3 581.7 358.3 581.6 358.2 581.1 358.4 580.6 358.2 580.6 358.1 580.8 357.6 581 357.8 Z M 577.1 356 576.9 356.4 576.9 357.1 576.8 357.5 576.4 357.8 576.2 358.2 575.8 358.5 575.1 358.8 575 359 574.8 358.8 574.9 358.6 575.3 358.5 575.5 358.3 575.5 358.1 575.9 358 576.1 357.6 576.5 357.5 576.8 357.1 576.6 356.8 576.2 356.8 576 356.6 576.4 356.1 576.5 356 577.1 356 Z M 575.2 355.7 575.3 355.8 575.7 355.8 576.1 356 575.7 356.4 575.6 356.2 575.4 356.2 575 356.1 574.6 355.9 574.3 355.3 574.6 355.2 575 355.3 575.2 355.7 Z M 566 349.8 566.6 350.5 566.9 350.7 567.2 351.2 566.9 351.1 566.8 350.9 566.5 350.8 566.1 350.4 565.9 350.3 565.7 349.9 566 349.8 Z M 569.7 349.8 570 350.4 570.2 350.9 570.2 351.3 570.4 351.5 570.6 352.2 570.6 353.1 570.8 353.4 571.3 353.6 571.7 354.2 571.7 355 571.3 354.3 571.3 354.1 571 353.7 570.4 353.5 570.6 353.3 570.3 353 570.3 352.7 570.5 352.4 570.4 351.9 570.1 351.5 570.2 351.4 569.9 351 569.8 350.4 569.6 350.5 569.7 349.8 Z M 574.9 347.4 574.5 348 574.1 348 574.3 347.7 574.4 347.1 574.8 346.8 574.9 347.2 574.9 347.4 Z M 556.6 346.9 557 347.1 557.2 346.9 557.3 346.4 557.5 346.3 557.7 346.9 557.7 347.4 557.6 347.7 557.7 348.3 557.7 348.6 557.3 349.4 557.1 349.5 556.7 349.3 556.9 349 557.3 348.8 557.2 348.7 556.6 349.1 556.4 348.9 556.8 348.6 556.4 348.6 556.2 348.7 556 348.5 556 347.8 556.1 347.6 555.7 347.1 555.7 346.9 556.1 346.7 556.2 346.4 556.5 346.3 556.6 346.1 557.2 345.8 557.3 346.2 556.8 346.6 556.6 346.9 Z M 570.1 346.3 570.2 346.8 570 346.7 569.5 346.8 569.1 346.9 569 346.7 569.3 346.5 569.7 346.2 569.7 346 569.3 345.8 569.1 345.2 569 344.6 568.6 344.2 568.6 344 568.1 343.5 568.4 343.2 568.8 343.6 568.8 344.1 569 344.4 569.1 344.9 569.4 345.4 569.8 345.7 569.9 346 570.1 346.3 Z M 559.8 340.8 560.1 341 559.5 341.3 559.2 341.2 559 341.4 558.5 341.3 558.7 341 559.1 340.8 559.8 340.8 Z M 555.6 340.3 556 340.1 556.3 340.4 556.2 340.6 556.3 340.8 556.1 341.2 556.4 341.5 556.6 342.4 556.8 342.7 557.2 343.2 557 343.9 557.1 344.5 556.9 344.8 556.6 344.9 556.2 345.3 555.9 345.5 555.6 345.5 555.3 345.7 555 345.7 555 345.3 554.7 345.1 554.8 344.5 554.5 344.8 554.3 344.7 553.7 344.3 553.4 344 553.2 343.7 553.9 343.4 554.4 344.1 554.5 343.5 554.2 343.4 554.1 343.1 554.2 342.8 554.8 342.2 555 341.8 554.9 341.7 555.2 341.3 555.2 340.8 555 340.1 555.1 340 555.4 340 555.6 340.3 Z M 563.7 337.7 563.8 337.9 564.1 338.3 564.9 339 565.4 339.1 565.5 339.2 565.7 339.6 566 340 566.5 340.4 566.5 340.6 566.3 341.4 566.2 341.6 566.2 341.9 566.1 342.4 565.9 342.7 565.8 343.4 565.7 343.5 565.5 342.9 565.1 342.6 565.2 342.4 565.7 342.5 565.9 342.3 565.8 342.1 565.9 341.7 566.2 341.3 566.3 340.8 566.3 340.5 565.8 340.1 565.4 339.4 565.1 339.2 564.5 338.9 564.2 338.6 563.6 338.4 563.2 338.6 563.6 337.7 563.7 337.7 Z M 554.9 330.2 555.4 330.4 555.5 330.4 556.2 330.5 556.4 330.3 556.6 330.4 557.1 330.4 557.5 330.2 557.9 330.2 558.2 330 558.3 330.5 558.2 330.7 557.9 330.7 557.5 330.7 556.4 330.9 556.1 330.9 554.6 331.3 553.9 331.7 553.5 331.7 553.3 331.6 553 331.3 552.5 330.7 553.1 331 553.2 331.2 553.7 331.2 554.2 331 554.6 330.4 554.3 330.3 554.5 330 554.6 329.7 554.9 330.2 Z M 559.2 328.9 560 329.1 560.2 329 560.6 329.3 561.5 330.3 561.7 330.9 562.1 331 562.8 331.5 562.8 331.7 562.6 332.2 562.8 332.9 562.4 332.9 561.9 333.3 561.8 333.5 561.5 334.5 561.4 335.4 561.2 335.6 560.9 335.4 560.8 335 560.4 334.9 560.7 334.4 560.9 334.4 561.4 334 561.3 333.6 561.5 333.2 561.5 332.9 561.7 332.6 561.7 332 561.9 331.9 562.1 331.6 562.2 331.3 561.9 331.2 561.4 331.1 561.3 330.8 561.3 330.6 560.9 330.4 560.9 330.1 560.6 329.4 560.4 329.3 560.1 329.4 559.6 329.3 559.3 329.3 558.7 328.9 559.2 328.9 Z"        data-name="Bahamas"      />      <path        d="M651.5 418l-0.6-0.2-0.1-0.5 0-0.8 0.2-0.4 0.2 0.2 0.2 0.6 0.5 0.3 0.1 0.4-0.5 0.4z"        data-name="Barbados"      />      <path        d="M 1233.2 581.3 1232.3 581.2 1232.1 580.8 1232.1 580.5 1232.6 580.6 1233.3 581.1 1233.2 581.3 Z M 1236.9 579.4 1237.1 580.4 1237.1 581.1 1237 581.3 1236.8 581 1236.4 580.7 1236.3 580.5 1236 580.4 1235.4 580 1235.5 579.9 1236 580.1 1236.3 580 1236.5 579.6 1236.5 579.4 1236.8 579.3 1236.9 579.4 Z M 1231.2 578.4 1230.7 578 1230.4 577.9 1230.1 577.7 1229.9 577.1 1230 576.8 1230 576.6 1230.2 575.4 1230.1 575.3 1230.3 574.9 1230.8 574.8 1231 575.1 1230.8 576.3 1230.9 576.6 1231.1 577 1231.2 577.5 1231.4 578.1 1231.2 578.4 Z"        data-name="Comoros"      />      <path        d="M 849.7 406.6 849.5 406.7 849.1 406.6 848.8 406.3 848.7 406 848.9 405.6 849.4 405.3 849.8 405.3 850 406 849.9 406.4 849.7 406.6 Z M 853.2 403.5 853.4 403.6 853.4 403.8 853.6 404 854 404.5 854.2 404.5 854.4 404.8 854.6 405.3 854.8 405.5 854.5 406 854.2 406.1 853.7 406 853.4 405.9 853.1 405.6 853.1 405.4 852.9 405.3 852.8 404.9 852.9 404.7 852.9 404.4 853.1 404 852.9 403.5 853.2 403.5 Z M 856.3 403.5 856.6 403.6 856.7 404.2 856.6 404.6 856.2 404.8 855.8 404.4 856 404 855.9 403.8 856.3 403.5 Z M 858.3 397.8 858.6 397.6 859.1 397.8 859.2 398 859.2 398.7 858.8 399 858.5 399.2 858.2 399.2 857.7 399 857.7 398.5 857.9 398.3 857.9 397.7 858 397.6 858.3 397.8 Z M 850.3 395 850.7 394.9 851 395.1 851.4 395.1 851.7 395.3 851.8 395.5 851.3 395.5 850.6 395.2 850.4 395.3 850.1 395.9 849.8 395.3 849.7 395.2 849.6 394.8 849.9 394.7 850.3 395 Z M 858.1 394.5 858.2 394.6 858.1 395.2 857.9 395.3 857.9 394.8 857.7 394.5 857.7 394.2 857.6 393.9 858 393.6 858.2 393.8 858.1 394.4 858.1 394.5 Z M 846.8 393.2 847 393.5 847.1 393.8 846.4 394.1 846.1 393.9 845.9 393.7 846.3 393.3 846.8 393.2 Z M 846 391.4 846.3 391.5 846.3 391.7 846.6 392 846.4 392.4 845.8 392.7 845.4 393.1 844.7 393.2 844.7 393.1 844.7 392.6 844.5 392.4 844.5 392.2 844.7 392 844.9 392 845.1 391.8 845.8 391.4 846 391.4 Z"        data-name="Cape Verde"      />      <path        d="M599 424.5l-0.3 0-0.4-0.3-0.3-0.1-0.3-0.3-0.1-0.2-0.3-0.1-0.2-0.4-0.3-0.3 0.1-0.5 0.5 0.3 0.1 0.5 0.4 0.4 0.7 0.2 0.2 0.3 0.3 0.4-0.1 0.1z"        data-name="Curaçao"      />      <path        d="M 532.7 377.8 533 377.9 533.2 377.5 533.6 377.6 534.1 377.6 534.2 377.8 534 378 533.8 377.9 533.4 378 533.2 378.1 532.5 378.1 532.7 377.8 z"        data-name="Cayman Islands"      />      <path        d="M 1168.2 276.7 1168.3 276.9 1168.6 277.3 1168.2 277.2 1167.9 277.2 1167.5 277.4 1167.2 277.1 1167.2 276.8 1167.5 276.7 1167.7 276.8 1168.2 276.7 Z M 1166.5 277.2 1166.5 277.3 1166.3 277.5 1166.2 278.1 1166.1 278.3 1165.8 278.3 1165.6 278.5 1165.1 278.7 1164.9 278.8 1164.3 279.1 1163.9 279 1163.4 279.1 1163.1 279.5 1162.9 279.2 1162.6 279.3 1162.4 279.3 1162.1 279 1161.7 279.3 1161.2 279.3 1160.7 279.1 1160.2 279 1159.8 278.7 1159.5 278.1 1159.2 277.8 1159 277.1 1158.8 276.8 1158.9 276.5 1159.4 276.8 1159.8 276.7 1160 276.4 1160.1 276.1 1160.4 276 1160.6 276.1 1160.8 275.9 1161 275.9 1161.1 276.3 1161.6 276.5 1161.7 276.7 1162.3 276.7 1162.9 276.2 1163.3 276.3 1163.6 276.1 1163.9 276.2 1164.3 276.4 1164.5 276.1 1164.8 276.1 1165.1 276.5 1165.1 277.1 1165.4 276.9 1165.7 277.1 1165.8 277 1166.5 277.2 Z"        data-name="Cyprus"      />      <path        d="M642 401.7l0.5 0.1 0.2 0.5 0 0.6-0.1 0.8-0.1 0.2-0.2 0.1-0.4 0.2 0.1-0.4-0.1-0.2-0.1-0.7-0.3-0.5 0-0.3 0.1-0.3 0-0.3 0.2 0 0.2 0.2z"        data-name="Dominica"      />      <path        d="M 690.8 833.1 690.8 833.3 690.9 833.6 690.5 833.7 690.2 833.6 690 833.4 689.7 833.3 689.6 832.9 689.8 832.9 689.9 832.7 690.2 832.6 690.4 832.7 690.1 833 690.4 833.1 690.7 832.8 690.8 833.1 Z M 693.7 831.8 693.3 831.6 692.8 831.3 692 831 692.1 830.6 691.4 830.5 691.1 830.4 690.8 830 691 829.9 691.8 830.2 692.6 830.6 693.1 830.7 693.5 830.8 693.8 830.5 693.9 830.2 694.1 830.3 694.5 830.1 694.6 830.3 695.1 830.3 695.1 830.6 695.4 830.6 696.3 830.4 696.4 830.6 696.7 830.6 697.1 830.5 696.8 830.3 696.7 830 697.1 830 697.7 830.2 697.8 830.6 697.4 831.1 697.5 831.4 697.3 831.6 696.9 831.6 696.6 832.4 696.3 832.7 696 833.3 695.9 833.6 695.4 833.9 695.3 833.7 694.9 833.7 694.9 834 694.1 833.9 694 834 694.3 834.4 694.2 834.5 694 834.9 693.6 834.9 693.3 835.3 693 835.4 692.8 835.4 692.6 835.1 692.2 834.8 692.2 834.6 691.7 834.6 692.3 835 691.9 835 691.4 834.7 691.2 834.6 690.8 834.4 690.5 834.2 690.5 834 691.2 834.2 691.8 834 691.3 833.8 691.2 833.7 692.1 833.7 692.5 833.8 692.8 834 692.8 833.8 693.2 833.7 693.3 833.4 692.9 833.2 692.7 832.7 692.8 832.5 693.4 832.5 693.6 832.6 694 832.5 693.9 832.2 693.1 832.2 693.1 832.3 692.7 832.5 692.1 832.5 691.6 832.2 691.6 831.9 692.3 832.1 692.9 831.9 693.2 831.9 693.7 831.8 694.1 832 694.1 831.9 693.7 831.8 Z M 692.9 829.7 693.5 829.6 693.7 829.9 693.4 830.3 693.2 830.2 692.9 830.3 692.6 830.1 692.9 829.9 693.2 830.1 693.3 829.9 692.8 829.8 692.9 829.7 Z M 700.1 829.8 700.7 829.8 700.8 829.7 701.3 829.6 701.7 829.8 702.1 830.1 702.2 830.4 702.2 830.5 701.7 830.6 701.5 830.3 701.3 830.2 701.2 830.5 701.4 830.6 701.5 830.9 701.8 830.7 702 830.8 702.1 831.2 702.4 831.3 702.5 831.2 703 831.5 703.1 831.1 702.3 830.9 702.4 830.4 702.7 830.2 704.2 830.1 704.9 830.7 705.1 830.8 705.1 831.2 704.5 831.1 704 830.9 703.4 831.1 703.7 831.3 704.1 831.4 705 831.5 705.3 831.6 705.4 831.8 705.2 832.3 704.7 832.3 704.6 832.4 703.9 832.5 703.4 832.7 703.7 832.9 702.8 833.3 702.4 833.2 701.9 833.3 701.2 833.3 700.6 833.1 700 832.7 700 833 700.3 833.2 700.9 833.4 701.2 833.7 701.4 833.6 701.8 833.7 702.2 834 702 834.1 702.2 834.6 702 834.6 701.7 834.3 701.3 834.2 700.8 834.6 700.6 834.3 700.3 834.1 700 834.1 699.5 833.9 699.3 834 699.5 834.4 699.8 834.4 700 834.6 699.8 834.7 700.5 835.3 700.3 835.4 699.9 835.2 699.6 835.2 699.3 834.9 699 834.8 698.7 834.7 698.6 835.3 699.1 835.4 699.1 835.7 699 835.9 698.6 835.8 698.5 835.6 698 835.4 697.9 835.2 697.7 835.2 697.3 834.7 697.6 834.3 697.6 834.1 697.2 833.6 697.2 833.4 697.7 833.2 697.6 833 698.1 832.9 698 832.6 698.6 832.2 699.2 832 699.6 832.4 699.6 832.8 699.9 832.7 699.4 832.1 699.5 831.8 698.9 831.6 698.5 831.3 698.6 831.1 699 831.3 699.1 830.8 698.4 830.6 698.5 830.3 698.7 830.4 699 830.2 699.3 830.2 699.5 829.9 699.2 829.6 699.6 829.6 700.1 829.8 Z M 695.1 829.4 695.8 829.4 696 829.6 696.2 829.4 696.4 829.5 696.6 829.8 696.4 829.9 696 829.8 695.6 829.6 694.8 829.5 694.9 829.3 695.1 829.4 Z"        data-name="Falkland Islands"      />      <path        d="M 955.6 112 956 112.2 956.3 112.2 956.4 112.4 956.4 112.8 956.6 113.1 956.5 113.3 955.9 112.9 955.7 112.5 955.5 112.3 955.3 112 955.6 112 Z M 955.9 110.4 956.7 110.6 956.9 110.8 956.8 111.2 956.7 111.3 956.3 110.8 955.8 110.7 955.6 110.3 955.9 110.4 Z M 954.62 109.03999999999999 954.7 109.2 955 109.2 955 109.5 954.6 109.5 954.4 109.7 953.8 109.5 953.6 109.4 953.4 109.1 953.9 109 954 108.9 954.5571428571428 108.99285714285715 954.3 108.8 954.5 108 955 108.1 955.3 108.6 955.3 108.7 955.9 108.9 956.2 109.4 956.5 109.6 956.4 110.2 955.9 109.8 955.7 109.6 955.5 109.5 955.4 109.3 955.2 109.1 954.7 109.1 954.62 109.03999999999999 Z M 955.9 108.9 955.5 108.7 955.2 108.4 955.1 108.1 955.2 108 955.6 107.9 955.9 107.9 956.5 108.3 956.4 108.5 956.5 108.7 957.1 108.9 957.1 109.1 956.7 109.4 955.9 108.9 Z"        data-name="Faeroe Islands"      />      <path        d="M 1881.2 457.1 1881.6 457.1 1881.9 457.3 1882 457.7 1881.8 457.8 1881.9 458 1881.8 458.2 1881.2 458.2 1881 458 1881 457.8 1880.8 457.5 1880.8 457.2 1881.2 457.1 z"        data-name="Federated States of Micronesia"      />      <path        d="M639.2 424.5l-0.4 0.3-0.2-0.1-0.1-0.5 0.2-0.5 0.3-0.4 0.3 0 0.1 0.3-0.1 0.7-0.1 0.2z"        data-name="Grenada"      />      <path        d="M1800.8 415.5l-0.1 0.4 0 0.6-0.1 0.3-0.3 0-0.2-0.3-0.1-0.5 0-0.5 0.6-0.5 0.1-0.2 0.1-0.5 0.2-0.1 0.1 0.2 0.4 0.1-0.2 0.5-0.5 0.5z"        data-name="Guam"      />      <path        d="M643.7 413.8l-0.2-0.2-0.4-0.2-0.1-0.2 0-0.6 0.1-0.2 0.7-1.1 0.3 0.2 0 0.7-0.1 0.8-0.1 0.4-0.2 0.4z"        data-name="Saint Lucia"      />      <path        d="M 1063.9 271.7 1063.7 272 1063.2 271.8 1062.7 271.5 1062.7 271 1062.6 270.9 1063.2 270.9 1063.6 271.2 1063.8 271.4 1063.9 271.7 z"        data-name="Malta"      />      <path        d="M 1804.5 404.4 1804.3 404.6 1804.4 404.9 1804 404.9 1804 404.2 1804.1 404 1804.5 403.8 1804.4 404.3 1804.5 404.4 z"        data-name="Northern Mariana Islands"      />      <path        d="M 1307.7 630.8 1308.1 631.7 1307.9 632.3 1307.5 632.7 1307.6 633 1307.3 633.3 1306.8 633.5 1306.3 633.5 1305.7 633.4 1305.6 633.5 1305.3 633.2 1305.5 633 1305.6 632.6 1305.7 631.9 1305.9 631.5 1306.4 631.1 1306.5 630.9 1306.7 630.4 1307.1 630.1 1307.5 630.2 1307.7 630.8 z"        data-name="Mauritius"      />      <path        d="M 1919.6 639.1 1919.5 639.2 1919.7 639.6 1920 639.6 1920.4 639.4 1920.3 640 1920.1 640.2 1920 640.6 1919.5 640.9 1919.1 640.7 1919.1 640.6 1918.8 640.3 1918.9 640.1 1918.7 639.9 1918.8 639.5 1918.7 639.1 1918.8 639.1 1919.2 639.2 1919.6 639.1 Z M 1916.9 634.8 1916.7 635.3 1916.7 635.7 1916.5 636 1916.8 636.2 1917 636.3 1917.1 636.5 1917 636.7 1917.3 637.1 1917.1 637.1 1916.9 637.6 1916.7 637.8 1916.4 637.7 1916.2 637.4 1916.1 637.2 1915.5 637.1 1915.2 636.6 1915.2 636.4 1915.1 636.1 1915.4 636.1 1915.7 635.9 1916.1 635.6 1916.2 635.3 1915.8 635.1 1915.4 635.2 1915.6 634.8 1915.9 634.7 1916.1 634.8 1916.5 634.5 1916.9 634.8 Z M 1913.5 633.2 1913.2 633.8 1913.1 634.1 1913.4 634.1 1912.9 634.6 1912.7 634.8 1912.6 634.6 1912.9 634.2 1913.1 633.7 1913.5 633.2 Z M 1899.6 630.8 1899.8 630.9 1900.3 631.8 1900.6 632.1 1900.9 632 1901.1 631.7 1902 632.2 1902.3 632.7 1903 633.3 1903.3 633.7 1903.4 634 1903.8 634.4 1903.9 634.6 1904.1 634.6 1904.4 634.9 1905.3 635.1 1905.4 635.4 1905.4 635.8 1905.7 636.2 1906.1 636.3 1905.8 636.8 1905.9 637 1906.3 637.5 1906.4 637.5 1906.8 638 1906.7 638.4 1907.4 638.6 1907.8 639.1 1908.1 639.1 1908.4 639.3 1908.9 639.7 1908.8 640 1909.1 640 1909.5 640.5 1910.1 640.9 1910.1 641.1 1910.4 641.2 1910.7 641.5 1910.7 641.7 1911 642.3 1911.4 642.7 1911.5 642.6 1911.9 643.2 1912.4 643.3 1912.7 643.6 1912.7 644 1912.8 644.4 1912.9 644.5 1912.7 645.1 1912 645.5 1911.9 645.2 1911.6 645.3 1911.3 645.6 1910.7 644.8 1910.3 644.8 1910.2 644.6 1910 644.6 1909.8 644.9 1908.9 644 1908.7 644 1908.3 643.5 1908.4 642.7 1908.1 642.7 1907.7 642.7 1907.4 642.5 1907.3 642.3 1907.1 642.2 1906.8 642.2 1906.8 641.9 1906.6 641.4 1906.2 641.5 1905.4 641 1905.3 640.8 1905.3 640.5 1905 640.7 1904.4 640.4 1904.3 640 1903.9 639.7 1903.7 639.2 1903.2 639.1 1903.4 638.9 1903.1 638.6 1902.8 638.5 1902.5 637.8 1902.5 637.4 1902.3 637.1 1902 637.1 1901.8 636.5 1901.9 636.3 1901.2 635.9 1900.9 635.7 1900.5 635.1 1900.8 634.9 1900.6 634.7 1900.4 634.4 1900.4 633.9 1899.9 633.6 1899.9 633 1899.7 632.7 1900 632.7 1900.1 632.4 1900 632.2 1899.4 632.2 1899.2 631.9 1899.7 631.2 1899.4 630.9 1899.6 630.8 Z"        data-name="New Caledonia"      />      <path        d="M1747.7 453.1l-0.2 0.4 0.1 0.1-0.2 0.6 0.1 0.2-0.5 0.2-0.2-0.7 0.3-0.2-0.2-0.2 0.3-0.6 0.3-0.1 0.2 0.3z"        data-name="Palau"      />      <path        d="M 621.7 385.4 621.5 385.4 620.6 385.7 620 385.7 620.2 385.5 620.6 385.3 621 385.2 621.6 385.3 621.7 385.4 Z M 612.2 383 612.8 383.1 613.4 383.1 613.7 383.2 614.3 383.1 614.6 383.2 615 383.1 615.2 383.2 615.7 383.1 616.1 383.2 616.4 383.2 617.2 383.4 617.2 383.2 617.8 383.4 617.9 383.3 618.7 383.4 618.9 383.6 619.1 383.6 619.7 383.9 619.9 383.8 619.8 384.5 620 384.8 619.1 385.1 618.8 385.5 618.5 386.1 618.2 386.3 617.9 386.4 617.5 386.4 616.9 386.5 616.6 386.7 615.9 386.6 615.7 386.4 615.2 386.6 614.9 386.3 614.2 386.5 613.3 386.4 613 386.5 612.4 386.6 612.2 386.7 612 386.5 611.6 386.4 611.3 386.6 610.7 386.5 611 385.8 611 385.4 611.2 385 611 384.4 610.8 384.3 610.7 383.9 611.1 383.7 611.3 383.6 611.3 383.1 611.7 382.9 612.2 383 Z"        data-name="Puerto Rico"      />      <path        d="M 199.4 616.5 199.2 616.4 199.4 615.8 199.9 615.4 200.2 615.4 200.2 615.6 200 616 199.4 616.5 Z M 151.7 615.5 152.4 615.7 152.7 616.1 152.7 616.4 152.5 616.5 152 616.4 151.6 615.8 151.5 615.6 150.9 615.8 150.7 615.8 150.1 615.7 149.9 615.3 149.6 614.8 149.6 614.5 149.7 614.3 150.2 614.2 150.7 614.2 151.2 614.4 151.4 614.8 151.5 615.4 151.7 615.5 Z M 202.4 564.4 202.4 564.7 202 564.8 201.4 564.8 201.4 565.1 201 565 200.8 564.8 200.7 564.5 201.4 564.1 201.7 564.1 201.9 564.3 202.4 564.4 Z M 194.2 558.2 195.1 558.3 195.4 558.6 195.4 558.8 195 559.1 194.2 559.1 194.1 558.6 194 558.2 194.2 558.2 Z"        data-name="French Polynesia"      />      <path        d="M 1926.8 576.2 1927.1 576.4 1927 576.8 1927.3 576.8 1927.3 577 1926.5 577 1926.2 576.5 1926.4 576.2 1926.8 576.2 Z M 1888.5 575.6 1888.7 575.6 1889.7 576.4 1890.2 576.7 1891.1 577.4 1891 577.7 1890.8 577.7 1890.6 577.9 1890.4 577.6 1890.3 577.6 1890.1 577.4 1890 577 1889.6 576.9 1889.6 576.6 1889.3 576.5 1889.2 576.6 1889 576.6 1888.1 576.2 1887.9 575.8 1888.2 575.4 1888.5 575.6 Z M 1923.1 570.2 1923.2 570.3 1923.5 570.3 1923.4 570.7 1922.9 570.9 1922.6 570.9 1922.2 571 1921.8 571.6 1921.7 571.3 1921.4 571.4 1921.2 571.2 1921.2 570.9 1921.7 570.8 1921.7 570.6 1922 570.2 1922.7 570.3 1923.1 570.2 Z M 1896.8 567.4 1897.1 567.3 1897.7 567.6 1898.2 568.1 1898.5 568.4 1898.7 568.4 1898.9 568.6 1899.1 568.6 1899.4 568.9 1899.7 568.8 1900.1 568.9 1900.3 569.1 1900.7 569.1 1901 569 1901.2 569.3 1901.4 570.1 1901.7 570.4 1901.7 570.9 1901.5 571.1 1901.6 571.4 1901.2 571.2 1900.9 571.4 1900.6 571.3 1900.1 571 1899.9 571 1899.3 570.8 1898.9 570.7 1898.7 570.4 1898.4 570.2 1898.1 570.1 1897.9 569.8 1897.5 569.6 1897.7 569.2 1897.6 568.8 1897.6 568.4 1897.4 568.3 1896.8 568.1 1896.5 568.2 1896.4 568 1896.5 567.7 1896.6 567.4 1896.8 567.4 Z M 1897.9 562.2 1898.2 563.1 1898.4 563.5 1898.4 563.9 1898.5 564.4 1898.3 564.7 1897.9 564 1897.8 564.3 1897.5 563.8 1897.6 562.8 1897.7 562.6 1897.7 562.3 1897.9 562.2 Z M 1889.5 562.4 1889.8 562.4 1890.1 562.3 1890.5 562.4 1890.6 562.3 1891.1 562.3 1891.9 562.3 1892.1 562.6 1892.4 562.7 1892.6 563 1892.8 563 1893 563.1 1893.4 563.5 1893.4 564.1 1893.6 564.1 1894 564.3 1894.1 564.6 1894.1 565.2 1894 565.3 1893.3 565.5 1893.1 565.6 1892.7 565.5 1892.3 565.3 1891.9 565.3 1891.8 565.1 1891.3 564.8 1890.7 564.8 1890.2 564.9 1889.7 564.9 1889.2 564.8 1888.9 564.6 1888.6 564.7 1888.3 564.3 1888 564.1 1887.7 563.3 1887.5 562.9 1887.7 562.7 1887.6 562.5 1887.6 561.8 1887.7 561.5 1888.3 561.2 1888.7 561.4 1889.1 561.9 1889.2 562.2 1889.5 562.4 Z M 1891.8 560 1891.6 560.4 1891.5 560.4 1891.1 560.1 1890.8 560.2 1890.6 560.1 1890.5 559.9 1890.8 559.8 1891 559.6 1891.5 559.7 1891.8 560 Z M 1879.2 556.7 1879.4 556.6 1879.8 556.6 1879.8 556.8 1879.4 557.1 1879.6 557.3 1879.6 557.6 1879.2 558 1879 558.1 1878.7 558 1878.3 557.6 1878.4 557 1878.7 556.9 1878.9 556.5 1879.2 556.4 1879.2 556.7 Z M 1875.6 556.8 1875.4 556.9 1875.2 557.4 1875.6 557.9 1875.1 557.7 1875.1 557.5 1875 557.2 1874.6 556.8 1874.6 556.6 1875 556.4 1875.1 556.1 1875.5 555.8 1875.8 556 1875.8 556.4 1875.6 556.8 Z M 1888.5 556.3 1888.7 556.5 1888.6 556.7 1888.4 556.6 1887.8 556.1 1888 555.7 1888.3 555.6 1888.5 555.8 1888.4 556.1 1888.5 556.3 Z M 1895 555.5 1895.4 556.3 1896 557.1 1896 557.4 1895.6 557.6 1895.6 558.1 1895.6 558.4 1895.7 558.6 1895.9 558.6 1896.1 558.9 1896.6 559.3 1896.7 559.8 1896.8 560.1 1897 560.3 1896.8 560.5 1897.1 560.8 1897 560.9 1897.1 561.4 1896.9 561.6 1897.2 561.9 1897.3 562.4 1897.5 562.9 1897.5 563.5 1897.4 563.6 1897.1 563.3 1896.8 562.8 1896.8 562.5 1896.5 562.1 1896.1 561.8 1895.8 561.5 1895.3 560.9 1894.9 560.6 1894.6 559.7 1894.4 558.7 1894.2 558 1894.2 557.5 1894.1 557.1 1894.5 556.7 1894.4 556.4 1893.9 555.7 1893.8 555.4 1893.9 555.3 1894.3 555.4 1894.5 555.5 1894.8 555.2 1895 555.5 Z M 1877.3 554.4 1877.2 554.7 1877.4 554.7 1877.9 554.7 1878.3 555.4 1878.3 555.6 1878.5 555.9 1878.6 556.4 1878.4 556.6 1878.4 556.9 1877.8 556.7 1877.6 556.5 1877.3 556.5 1876.9 556.2 1876.8 556 1876.7 555.7 1877.1 555.8 1876.8 555 1876.7 554.8 1876.2 554.9 1876 555 1875.6 555 1875.3 555.4 1874.9 555.2 1874.9 554.6 1875.1 554.4 1875.5 554.4 1875.5 554 1875.9 553.4 1876.3 553.1 1876.6 552.9 1877 553.2 1877.2 553.6 1877.1 554.3 1877.3 554.4 Z M 1871.4 554.4 1871.3 554.4 1871.1 553.6 1871.2 553.3 1871.2 552.9 1871.4 553 1871.5 553.4 1871.5 554.1 1871.4 554.4 Z M 1874.8 553.9 1874.5 554.1 1874.4 554 1874 554 1873.7 553.7 1873.6 553.4 1873.5 553.1 1873.6 552.8 1873.9 552.4 1874.4 552.2 1874.6 552.4 1874.9 552.9 1874.9 553.5 1874.8 553.9 Z M 1871.8 550.4 1872.2 550.9 1872.2 551 1872.9 551.4 1872.8 551.7 1872.2 552.4 1872.2 552.7 1871.9 552.8 1871.9 552.4 1871.7 552.4 1871.7 552 1871.5 551.6 1871.2 551.4 1871.1 551.1 1871.2 550.8 1871.4 550.6 1871.6 550.4 1871.8 550.4 Z M 1883 550.5 1883.2 550.4 1883.7 550.7 1884 550.8 1884.2 551 1884.5 551.5 1884.8 551.6 1885.1 551.9 1885.1 552.2 1885.6 552.3 1885.6 552.6 1885.9 552.7 1886.2 552.6 1886.3 552.7 1886.7 552.9 1886.8 553.1 1887.1 553 1887.4 553.1 1887.5 553.4 1887.9 553.7 1888.2 554 1888.6 554.3 1889.6 555.3 1889.3 555.7 1889.6 556.2 1889.7 556.8 1889.4 556.7 1889.1 556.3 1888.4 555.5 1888 555.4 1887.5 555 1886.9 554.9 1886.8 554.6 1886.2 554.4 1885.7 553.9 1885.5 553.9 1884.7 553.3 1884.2 553 1884.2 552.8 1883.8 552.6 1883.6 552.4 1883.4 552 1883 551.7 1882.9 551.5 1882.9 551.1 1882.5 550.6 1882.3 550.5 1882.3 550.2 1883 550.5 Z M 1867.6 546.9 1867.9 547.1 1867.8 547.4 1867.1 547.6 1866.8 547.3 1867.1 546.7 1867.3 546.6 1867.6 546.9 Z M 1872.2 544.5 1872.5 544.6 1872.9 545.1 1873.2 545.3 1873.5 545.4 1873.8 545.7 1874.6 546.1 1875 546.6 1875 547 1875.1 547.6 1875.3 547.8 1875.6 548.1 1875.8 548.1 1875.9 548.5 1876.6 548.8 1877 548.7 1877.1 548.8 1877.1 549.1 1876.8 549.2 1876.6 549.5 1876.1 549.3 1875.3 548.9 1874.8 548.9 1874.5 548.5 1873.8 548.1 1873.2 547.1 1872.6 546.1 1872.1 545.8 1871.4 545.1 1871.4 544.6 1871.4 544.4 1871.7 544.2 1872 544.3 1872.2 544.5 Z"        data-name="Solomon Islands"      />      <path        d="M 1023.9 501.3 1023.7 501.3 1023.5 501.6 1023.3 501.6 1023.2 501.2 1023 500.4 1023 500.1 1023.4 499.6 1023.7 499.5 1024 499.2 1024.4 499.3 1024.6 499.7 1024.7 500 1024.6 500.4 1024.4 500.7 1024.1 501.1 1023.9 501.3 z"        data-name="São Tomé and Principe"      />      <path        d="M 1249 562.1 1248.7 562.3 1248.2 562.3 1247.8 562.5 1247.4 562.5 1247.4 562.3 1247.9 562.3 1248.3 562.2 1248.7 561.9 1248.9 561.9 1249 562.1 z"        data-name="Seychelles"      />      <path        d="M 587.7 361.6 588.4 361.6 588.7 362 588.4 362 588.1 361.9 587.6 362 587.5 361.7 587.7 361.6 Z M 585 361.5 585.3 361.9 585.9 361.8 585.7 362 585.1 362 584.7 361.8 585 361.5 z"        data-name="Turks and Caicos Islands"      />      <path        d="M 11.9 637.4 12.2 637.4 12.6 637.7 12.9 637.8 13.1 637.4 13.4 637.7 13.1 638 13.2 638.2 13.1 638.4 12.9 638.3 12.6 638 11.9 637.8 11.9 637.4 z"        data-name="Tonga"      />      <path        d="M 642.8 432.2 642.6 432.7 642.3 433.1 642.1 433.2 642 433.6 642.2 434.2 642 434.3 642 435 642.2 435.3 642.4 435.5 642.2 435.7 642.1 436 642.1 436.7 641.9 436.8 641.5 437 641 437.1 640.7 437.1 640.2 437.2 639.7 437.1 639.3 437.2 639 437.1 638.5 437.3 638.1 437.1 637.5 437.1 637.2 437.3 636.9 437.2 637.4 437 637.7 436.7 638.1 436.6 638.5 436.3 638.7 436 639.3 436.1 639.6 435.7 639.4 434.9 639.6 434.5 639.6 434 639.6 433.8 639.3 433.4 639 433.3 638.6 433.2 638.5 433.1 638.9 432.8 640 432.7 640.2 432.5 641.3 432.5 641.4 432.4 642.6 432.2 642.8 432.2 Z M 645.2 429 645.1 429.5 644.8 429.6 644.4 429.9 644.2 429.9 643.5 430.3 643.3 430.1 643.6 429.8 644.3 429.3 645.2 429 Z"        data-name="Trinidad and Tobago"      />      <path        d="M642.2 417.4l-0.1 0.1-0.5-0.3 0-0.4 0.2-0.3 0.2-0.5 0.4 0 0.1 0.4-0.1 0.8-0.2 0.2z"        data-name="Saint Vincent and the Grenadines"      />      <path        d="M 624.5 387.8 624.8 388.1 623.7 388.3 623.6 387.8 624.3 387.6 624.5 387.8 z"        data-name="United States Virgin Islands"      />      <path        d="M 1930.6 628 1930.4 628 1930.1 627.9 1929.7 627.4 1929.6 627 1929.6 626.6 1929.8 626.4 1929.9 626 1930.2 625.9 1930.6 625.9 1930.4 626.2 1930.4 626.7 1931.1 627.2 1930.8 627.5 1930.6 628 Z M 1930.6 622.1 1930.9 622.1 1931 622.3 1930.5 622.4 1930.6 622.7 1931 622.9 1931.1 623.2 1931 623.6 1930.6 623.7 1930.2 623.4 1929.8 623.4 1929.6 623.2 1929.3 623 1929.4 622.6 1929.4 622.3 1929.6 621.8 1929.9 621.4 1930.4 621.4 1930.6 621.5 1930.5 621.9 1930.6 622.1 Z M 1927.6 614.5 1928.2 614.4 1928.3 614.5 1928.5 615.1 1928.7 615.4 1928.8 615.5 1928.4 616.1 1927.6 616.3 1927.3 616 1927.2 615.5 1926.9 615.4 1926.5 615.7 1926.4 615.6 1926.6 615.2 1927 614.9 1927.4 614.4 1927.6 614.5 Z M 1928.3 608.2 1928.4 608.7 1928.4 608.9 1928.8 609 1929 609.5 1929.5 609.5 1929.5 609.9 1929.4 610 1929.1 609.7 1928.8 609.6 1928.2 609.8 1927.9 609.7 1927.8 609.5 1927.7 609.1 1927.9 608.6 1928.1 608.3 1928.3 608.2 Z M 1929.4 606.6 1929.2 606.8 1928.6 606.8 1928.3 606.9 1928.1 606.7 1927.7 606.6 1927.2 606.2 1927.3 606 1927.8 605.8 1928.2 605.7 1928.6 605.4 1928.7 605.1 1928.9 605.1 1929 605.4 1929 606 1929.5 606.4 1929.4 606.6 Z M 1924.7 605.3 1924.9 605.6 1925.5 606 1926.2 606.7 1926.3 606.8 1926.3 607.2 1926.5 607.5 1926.2 607.7 1925.8 608.1 1925.8 607.9 1925.5 607.8 1925.1 607.8 1924.9 607.9 1924.9 608.1 1924.5 608.3 1924.2 608.2 1924.2 607.5 1924.1 606.9 1924.2 606.3 1924.3 605.8 1924.1 605.3 1923.5 605.6 1923.3 605.4 1923.2 605.1 1923.2 604.8 1923.5 604.5 1923.5 604.1 1923.6 603.8 1923.9 603.7 1924.5 604 1924.4 604.2 1924.6 604.7 1924.5 604.9 1924.7 605.3 Z M 1929.3 604.5 1929.1 604.4 1929.2 603.2 1929.1 602.9 1929.2 602.4 1929.5 601.6 1929.6 601.1 1929.8 601.7 1929.7 602 1929.7 602.6 1929.7 603.6 1929.6 604.2 1929.3 604.5 Z M 1928 601.2 1927.3 601.2 1927 601.1 1927 600.9 1927.9 600.2 1928.4 600 1928.9 599.9 1928.9 600.1 1928.6 600.5 1928.4 600.8 1928 601.2 Z M 1929.9 600.5 1929.9 600.7 1929.6 600.7 1929.7 600.4 1929.9 599.1 1929.9 599 1930 597.8 1930.2 597.9 1930.1 599.2 1930.2 599.5 1930.1 600 1929.9 600.5 Z M 1923.6 601.9 1922.7 601.8 1922.1 602.1 1922 602.3 1921.8 602.3 1921.7 601.7 1921.5 601.6 1921.1 600.6 1921.5 599.8 1921.5 599.4 1921.4 599.2 1921.4 597.8 1921.3 597.5 1921.3 597 1921.5 596.7 1921.5 596.4 1921.7 596.1 1921.7 595.9 1922 595.8 1922.1 596.3 1922.3 596.7 1922.5 597 1922.6 598.3 1922.5 599.1 1922.5 599.2 1923.1 599.1 1923.4 598.8 1923.6 598 1923.6 597.8 1923.9 597.6 1924.2 597.7 1924.1 598.1 1924.1 599 1924.4 599.1 1924.4 599.6 1924.2 599.7 1924.5 600.1 1924.3 600.3 1924.3 600.8 1924.5 601.3 1924.4 601.5 1924.1 601.5 1923.6 601.9 Z M 1927.8 592.6 1928.2 592.9 1928.1 593.3 1927.8 593.6 1927.6 593.8 1927 593.8 1927 593.4 1927.1 593 1927.3 592.7 1927.8 592.6 Z M 1928.4 590.7 1928.1 590.9 1927.9 591 1927.9 591.2 1927.7 591.3 1927.7 591 1927.5 590.8 1927.4 590.5 1927.5 590.1 1927.7 590 1928.1 589.8 1928.2 590 1928.3 590.4 1928.3 590.5 1928.4 590.7 Z"        data-name="Vanuatu"      />      <path        d="M 21.9 591.3 22.2 591.4 22.5 591.5 22.8 591.7 22.7 592 21.7 592 21.4 591.9 21.1 592 20.9 591.9 20.5 591.7 20.2 591.8 19.9 591.6 19.7 591.4 19.1 591.1 19.2 590.7 19.6 590.5 20 590.5 20.5 590.5 21.4 590.9 21.9 591 21.9 591.3 Z M 17.4 588.5 18 589.1 18.2 589.8 18.1 590.1 18.2 590.4 17.9 590.4 17.6 590.2 17.3 590.4 16.4 590.5 16.1 590.2 15.9 589.8 15.7 589.7 15.4 589.4 14.9 589 14.7 588.8 14.7 588.6 15.1 588.7 15.4 588.6 16 588.4 16.4 588.4 16.9 588.3 17.2 588.3 17.4 588.5 Z"        data-name="Samoa"      />      <path        d="M644 406.9l0 0.2 0.4-0.1-0.2 0.5 0.2 0.2 0 0.2 0.2 0.2 0.2 0.9-0.3 0.3-0.1-0.4-0.1 0.1-0.6-0.1-0.4 0-0.2-0.3 0.6-0.5-0.4 0-0.4-0.4-0.1-0.5-0.2-0.5 0.3-0.4 0.4 0.1 0.5 0.3 0.2 0.2z"        data-name="Martinique"      />      <path        d="M1240.2 583.1l0.2 0.3 0.5 0.2 0 0.3-0.2 0.2 0.1 0.2-0.3 0.6 0.1 0.2-0.3 0.1-0.2-0.3 0-0.3 0.2-0.2-0.2-0.7-0.1-0.1-0.1-0.2 0.3-0.3z"        data-name="Mayotte"      />      <path        d="M1295 635.8l0.4 0 0.4 0.2 0.3 0.3 0 0.3 0.1 0.5 0.3 0.2 0.2 0.2 0.1 0.2-0.2 0.6-0.1 0.4-0.2 0.2-0.4 0.1-0.9 0-0.2-0.2-0.8-0.4-0.3-0.5 0-0.3-0.3-0.6 0.1-0.4 0.2-0.2 0.2-0.4 0.1 0 0.5-0.2 0.5 0z"        data-name="Reunion"      />      <path        d="M 641.2 397.3 641.5 397.3 641.5 397.5 641.5 397.6 641.3 397.7 641.3 398.5 641.3 398.9 641.1 399.1 640.5 399.4 640.5 399.2 640.3 399 640.2 398.5 640.2 398 640.1 397.5 640.1 397.2 640.3 396.9 640.6 396.8 641.1 397.1 641.2 397.3 Z M 642.6 396.9 643 397 643.5 397.4 642.2 397.7 641.9 397.8 641.5 397.5 641.6 396.9 641.8 396.8 641.7 396.2 641.8 396 642.1 395.8 642.4 396.2 642.4 396.6 642.6 396.9 z"        data-name="Guadeloupe"      />      <path        d="M 1981.6 623.3 1981.8 623.5 1982.1 623.6 1982.1 623.9 1981.6 624.1 1981.1 623.8 1980.6 624.1 1980.3 624.1 1980.1 624.4 1980.2 624.7 1979.8 624.6 1979.7 624.8 1979.3 624.7 1979.2 624.8 1978.8 624.6 1979.1 624.5 1979.3 624.4 1979.5 624.2 1979.9 624.3 1980.2 624 1980.4 623.7 1980.9 623.6 1981.4 623.3 1981.6 623.3 Z M 1988.4 617.1 1988.5 617.6 1988.3 618.2 1988.2 618 1988.1 617.6 1987.9 617.6 1988 617.1 1988.2 617 1988.4 617.1 Z M 1983.6 613.2 1983.5 613.6 1983.8 613.8 1983.9 614.1 1984.2 614.5 1984.5 614.6 1984.6 614.9 1984.8 614.9 1984.9 615.3 1984.6 615.8 1984.7 616 1984.8 616.5 1984.5 616.7 1984.5 617.2 1984.7 617.2 1984.8 617.7 1984.5 618 1983.9 618.2 1983.8 618 1983.5 618.1 1983.4 618.3 1983.1 618 1982.3 618.3 1981.5 619 1981.2 618.9 1980.8 619.1 1980.5 619 1979.9 619.1 1979.6 618.9 1978.7 618.6 1978.4 618.5 1977.8 618.4 1977.6 618.3 1977.1 618.1 1976.9 617.1 1977.2 616.4 1977.5 616.4 1977.8 616.3 1977.9 615.8 1978.2 615.7 1978.3 615.3 1978.1 615.1 1978.7 614.7 1979.1 614.2 1979.2 614.3 1979.8 613.8 1980 613.8 1980.9 613.4 1981.5 613.6 1981.8 613.5 1982.3 613.3 1982.9 613.2 1983.2 612.9 1983.6 613.2 Z M 1993.4 611 1993.2 610.8 1993.3 610.6 1993.8 610.1 1994.1 609.6 1993.8 610.7 1993.4 611 Z M 1994.4 606 1994 606.4 1993.2 607.5 1992.9 607.6 1992.2 608 1992 608.6 1991.6 608.8 1991.4 609.1 1991.3 609.3 1991.6 609.4 1992.2 609.1 1992.3 609 1992.6 608.7 1992.8 608.4 1993.4 608.1 1993.7 607.8 1994.3 607.5 1994.3 607.8 1993.8 608.5 1993.6 608.6 1993.7 609.2 1993.4 609.5 1993.1 609.2 1992.7 609.2 1992.2 609.3 1991.8 609.6 1991.1 609.7 1990.1 609.7 1990.6 609.2 1990.2 609 1989.6 609.2 1989.2 609.4 1989.2 609.6 1988.9 609.7 1988.7 609.8 1988.6 610.2 1988.4 610.5 1988.1 610.4 1988.1 610.2 1987.7 610.1 1987.3 610.3 1987.1 610.8 1986.8 611 1986.5 611 1986.5 610.7 1986.5 610.3 1986.3 609.9 1986.4 609.7 1986.3 609.6 1985.7 609.8 1985.7 609.4 1986.1 609.1 1986.2 609.1 1986.1 608.6 1986.4 608.5 1986.9 608.8 1987.5 608.4 1987.7 608.4 1988 608.1 1988.2 608.1 1988.5 607.8 1988.5 607.6 1989.3 607.5 1990.2 607.2 1990.5 607.1 1990.9 607.2 1991.4 607 1991.6 606.6 1991.8 606.6 1992 606.2 1992.4 606.3 1992.5 606.1 1992.7 606.2 1993.7 605.7 1993.8 606 1994 605.9 1994.2 606 1994.5 605.7 1995 605.5 1995.1 605.6 1994.6 606 1994.4 606 Z"        data-name="Fiji"      />    </svg>    <svg id="country"></svg>    <script type="importmap">      {        "imports": {          "three": "https://cdnjs.cloudflare.com/ajax/libs/three.js/0.162.0/three.module.min.js",          "three/addons/": "https://threejs.org/examples/jsm/"        }      }    </script>    <script      async      src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"    ></script>    <script src="https://unpkg.com/gsap@3/dist/gsap.min.js"></script>    <script type="module">      import * as THREE from 'three';      import { OrbitControls } from 'three/addons/controls/OrbitControls.js';      import { GUI } from 'https://cdn.skypack.dev/lil-gui@0.17.0';      const containerEl = document.querySelector('.globe-wrapper');      const canvasEl = containerEl.querySelector('#globe-3d');      const svgMapDomEl = document.querySelector('#map');      const svgCountries = Array.from(svgMapDomEl.querySelectorAll('path'));      const svgCountryDomEl = document.querySelector('#country');      const countryNameEl = document.querySelector('.info span');      let renderer, scene, camera, rayCaster, pointer, controls;      let globeGroup, globeColorMesh, globeStrokesMesh, globeSelectionOuterMesh;      const svgViewBox = [2000, 1000];      const offsetY = -0.1;      const params = {        strokeColor: '#111111',        defaultColor: '#9a9591',        hoverColor: '#00C9A2',        fogColor: '#e4e5e6',        fogDistance: 2.6,        strokeWidth: 2,        hiResScalingFactor: 2,        lowResScalingFactor: 0.7,      };      let hoveredCountryIdx = 6;      let isTouchScreen = false;      let isHoverable = true;      const textureLoader = new THREE.TextureLoader();      let staticMapUri;      const bBoxes = [];      const dataUris = [];      initScene();      createControls();      window.addEventListener('resize', updateSize);      containerEl.addEventListener('touchstart', (e) => {        isTouchScreen = true;      });      containerEl.addEventListener('mousemove', (e) => {        updateMousePosition(e.clientX, e.clientY);      });      containerEl.addEventListener('click', (e) => {        updateMousePosition(e.clientX, e.clientY);      });      function updateMousePosition(eX, eY) {        pointer.x =          ((eX - containerEl.offsetLeft) / containerEl.offsetWidth) * 2 - 1;        pointer.y =          -((eY - containerEl.offsetTop) / containerEl.offsetHeight) * 2 + 1;      }      function initScene() {        renderer = new THREE.WebGLRenderer({ canvas: canvasEl, alpha: true });        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));        scene = new THREE.Scene();        scene.fog = new THREE.Fog(params.fogColor, 0, params.fogDistance);        camera = new THREE.OrthographicCamera(-1.2, 1.2, 1.2, -1.2, 0, 3);        camera.position.z = 1.3;        globeGroup = new THREE.Group();        scene.add(globeGroup);        rayCaster = new THREE.Raycaster();        rayCaster.far = 1.15;        pointer = new THREE.Vector2(-1, -1);        createOrbitControls();        createGlobe();        prepareHiResTextures();        prepareLowResTextures();        updateSize();        gsap.ticker.add(render);      }      function createOrbitControls() {        controls = new OrbitControls(camera, canvasEl);        controls.enablePan = false;        // controls.enableZoom = false;        controls.enableDamping = true;        controls.minPolarAngle = 0.46 * Math.PI;        controls.maxPolarAngle = 0.46 * Math.PI;        controls.autoRotate = true;        controls.autoRotateSpeed *= 1.2;        controls.addEventListener('start', () => {          isHoverable = false;          pointer = new THREE.Vector2(-1, -1);          gsap.to(globeGroup.scale, {            duration: 0.3,            x: 0.9,            y: 0.9,            z: 0.9,            ease: 'power1.inOut',          });        });        controls.addEventListener('end', () => {          // isHoverable = true;          gsap.to(globeGroup.scale, {            duration: 0.6,            x: 1,            y: 1,            z: 1,            ease: 'back(1.7).out',            onComplete: () => {              isHoverable = true;            },          });        });      }      function createGlobe() {        const globeGeometry = new THREE.IcosahedronGeometry(1, 20);        const globeColorMaterial = new THREE.MeshBasicMaterial({          transparent: true,          alphaTest: true,          side: THREE.DoubleSide,        });        const globeStrokeMaterial = new THREE.MeshBasicMaterial({          transparent: true,          depthTest: false,        });        const outerSelectionColorMaterial = new THREE.MeshBasicMaterial({          transparent: true,          side: THREE.DoubleSide,        });        globeColorMesh = new THREE.Mesh(globeGeometry, globeColorMaterial);        globeStrokesMesh = new THREE.Mesh(globeGeometry, globeStrokeMaterial);        globeSelectionOuterMesh = new THREE.Mesh(          globeGeometry,          outerSelectionColorMaterial        );        globeStrokesMesh.renderOrder = 2;        globeGroup.add(          globeStrokesMesh,          globeSelectionOuterMesh,          globeColorMesh        );      }      function setMapTexture(material, URI) {        textureLoader.load(URI, (t) => {          t.repeat.set(1, 1);          material.map = t;          material.needsUpdate = true;        });      }      function prepareHiResTextures() {        let svgData;        gsap.set(svgMapDomEl, {          attr: {            viewBox:              '0 ' +              offsetY * svgViewBox[1] +              ' ' +              svgViewBox[0] +              ' ' +              svgViewBox[1],            'stroke-width': params.strokeWidth,            stroke: params.strokeColor,            fill: params.defaultColor,            width: svgViewBox[0] * params.hiResScalingFactor,            height: svgViewBox[1] * params.hiResScalingFactor,          },        });        svgData = new XMLSerializer().serializeToString(svgMapDomEl);        staticMapUri =          'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgData);        setMapTexture(globeColorMesh.material, staticMapUri);        gsap.set(svgMapDomEl, {          attr: {            fill: 'none',            stroke: params.strokeColor,          },        });        svgData = new XMLSerializer().serializeToString(svgMapDomEl);        staticMapUri =          'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgData);        setMapTexture(globeStrokesMesh.material, staticMapUri);        countryNameEl.innerHTML =          svgCountries[hoveredCountryIdx].getAttribute('data-name');      }      function prepareLowResTextures() {        gsap.set(svgCountryDomEl, {          attr: {            viewBox:              '0 ' +              offsetY * svgViewBox[1] +              ' ' +              svgViewBox[0] +              ' ' +              svgViewBox[1],            'stroke-width': params.strokeWidth,            stroke: params.strokeColor,            fill: params.hoverColor,            width: svgViewBox[0] * params.lowResScalingFactor,            height: svgViewBox[1] * params.lowResScalingFactor,          },        });        svgCountries.forEach((path, idx) => {          bBoxes[idx] = path.getBBox();        });        svgCountries.forEach((path, idx) => {          svgCountryDomEl.innerHTML = '';          svgCountryDomEl.appendChild(svgCountries[idx].cloneNode(true));          const svgData = new XMLSerializer().serializeToString(            svgCountryDomEl          );          dataUris[idx] =            'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgData);        });        setMapTexture(          globeSelectionOuterMesh.material,          dataUris[hoveredCountryIdx]        );      }      function updateMap(uv = { x: 0, y: 0 }) {        const pointObj = svgMapDomEl.createSVGPoint();        pointObj.x = uv.x * svgViewBox[0];        pointObj.y = (1 + offsetY - uv.y) * svgViewBox[1];        for (let i = 0; i < svgCountries.length; i++) {          const boundingBox = bBoxes[i];          if (            pointObj.x > boundingBox.x ||            pointObj.x < boundingBox.x + boundingBox.width ||            pointObj.y > boundingBox.y ||            pointObj.y < boundingBox.y + boundingBox.height          ) {            const isHovering = svgCountries[i].isPointInFill(pointObj);            if (isHovering) {              if (i !== hoveredCountryIdx) {                hoveredCountryIdx = i;                setMapTexture(                  globeSelectionOuterMesh.material,                  dataUris[hoveredCountryIdx]                );                countryNameEl.innerHTML =                  svgCountries[hoveredCountryIdx].getAttribute('data-name');                break;              }            }          }        }      }      function render() {        controls.update();        if (isHoverable) {          rayCaster.setFromCamera(pointer, camera);          const intersects = rayCaster.intersectObject(globeStrokesMesh);          if (intersects.length) {            updateMap(intersects[0].uv);          }        }        if (isTouchScreen && isHoverable) {          isHoverable = false;        }        renderer.render(scene, camera);      }      function updateSize() {        const side = Math.min(          500,          Math.min(window.innerWidth, window.innerHeight) - 50        );        containerEl.style.width = side + 'px';        containerEl.style.height = side + 'px';        renderer.setSize(side, side);      }      function createControls() {        const gui = new GUI();        gui.close();        gui          .addColor(params, 'strokeColor')          .onChange(prepareHiResTextures)          .name('stroke');        gui          .addColor(params, 'defaultColor')          .onChange(prepareHiResTextures)          .name('color');        gui          .addColor(params, 'hoverColor')          .onChange(prepareLowResTextures)          .name('highlight');        gui          .addColor(params, 'fogColor')          .onChange(() => {            scene.fog = new THREE.Fog(params.fogColor, 0, params.fogDistance);          })          .name('fog');        gui          .add(params, 'fogDistance', 1, 4)          .onChange(() => {            scene.fog = new THREE.Fog(params.fogColor, 0, params.fogDistance);          })          .name('fog distance');      }    </script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E6%8B%BC%E5%9B%BE.html"/>
      <url>/HEXO/html/%E6%8B%BC%E5%9B%BE.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>拼图</title>    <style>      html,body{width:100%;height:100%;padding:0;margin:0;}body{display:flex;align-items:center;justify-content:center;background:#000;}.puzzle{width:100%;height:100%;max-width:100%;max-height:100%;}</style>  </head>  <body>     <svg class="puzzle"xmlns="http://www.w3.org/2000/svg"viewBox="0 0 285 200"><rect class="box"width="125"height="100"opacity="0.5"style="mix-blend-mode: overlay"/><use class="endImg"href="#imgSrc"opacity="0"/><g class="pieces"></g><path d="M24.72 24.61h-9.15c-.61-.04-1.55-.81-1.12-1.46 3.17-2.97 2.37-6.77-2.14-7.11-4.12.09-5.42 4.23-2.27 6.86.65.79-.31 1.8-1.19 1.72-2.95-.03-5.9-.01-8.85-.01V.01h24.75c.04 2.93-.02 5.86-.03 8.79-.01 1.09 1.33 2.39 2.29 1.55 1.62-1.99 4.85-2.65 6 .18 1.79 4.38-2.7 7.76-6.03 3.82-1.23-.86-2.41.89-2.27 2.05.05 2.75 0 5.46.01 8.22Z"/><path d="M25.07 24.7c-.05-2.99 0-5.99-.03-8.98.11-.61.71-1.35 1.36-1.24 1.48.66 2.57 2.44 4.41 1.95 1.84-.43 3.12-2.47 2.96-4.31-.37-3.95-4.33-5.14-6.9-2.03-.89.66-1.89-.5-1.84-1.43.04-2.87.01-5.75.02-8.62C33.13.03 41.16.06 49.22.02c.46 0 .49.04.49.49 0 2.78-.02 5.56.01 8.34-1.03 4.44-3.83-3.48-7.49.56-2.47 2.4-.63 7.73 3.06 7 1.35-.13 2.55-2.66 3.87-1.67 1.23 1.33.25 7.46.56 9.69 0 .26-.1.32-.33.32-2.82-.02-5.63-.04-8.45-.04-1.02.02-2.45 1.36-1.47 2.32 1.12 1.15 2.33 2.92 1.38 4.53-3.3 4.53-10.43-.26-5.47-4.54 1.01-1.2-.63-2.38-1.8-2.33-2.84.04-5.66.01-8.51.02Z"/><path d="M62.45.01h11.51c.88 0 .87 0 .87.88-.41 1.77 1.28 10.4-1.76 9.24-3.26-3.66-7.59-1.38-6.86 3.24.66 3.32 4.26 4.04 6.39 1.51.83-.89 2.2-.2 2.23 1 .02 2.85-.04 5.71.02 8.55.02.27-.1.3-.3.29-2.85-.11-5.7-.02-8.55-.06-1.08-.04-2.34 1.21-1.6 2.22 2.85 2.34 2.09 6.27-1.83 6.44-3.56.18-5.31-3.59-2.43-6.03 1.12-1.08.27-2.39-1.12-2.61-2.87-.01-5.75 0-8.63.02-.23 0-.33-.07-.32-.3.09-2.85.03-5.7.04-8.55-.02-.97-1.24-2.31-2.21-1.54-2.93 3.39-7.16 1.5-6.35-2.93.71-3.46 4.23-3.48 6.3-1.04 3.6 1.96 1.87-8.23 2.24-10.1 0-.2.07-.25.27-.25l12.08.02Z"/><path d="M75.19.01h24.79v8.75c0 .97 1.2 2.39 2.19 1.65 3.48-4.15 8.2-.34 5.97 4.08-1.43 2.6-4.07 1.7-5.94-.18-3.54-1.78-1.85 8.38-2.22 10.29h-9.15c-.59 0-.87-.47-1.12-.89-.09-1.45 2.38-2.41 2.03-4.23-1.6-7.03-12.56-2.14-6.26 3.73.37.75-.7 1.45-1.44 1.42-2.95-.04-5.89-.01-8.85-.02v-8.63c0-.75-.73-1.71-1.47-1.86-1.25.09-2.08 1.48-3.27 1.87-7.15.89-3.68-12.07 2.37-5.68 1.17.94 2.43-.65 2.38-1.84-.04-2.82-.01-5.64-.02-8.47Z"/><path d="M100.31 24.61v-8.06c-.26-1.07.53-2.41 1.7-1.98.75.43 1.38 1.14 2.15 1.57 2.78 1.43 5.38-1.96 4.83-4.6-.55-3.37-4.45-4.41-6.56-1.65-.85.85-2.11-.02-2.15-1.13.01-2.93.04-5.8.04-8.73h24.72v24.59h-9.08c-.93-.04-1.61-1.22-.82-1.88 3.08-2.46 1.51-6.52-2.15-6.69-4.43-.02-5.73 4.1-2.45 7.06.5.74-.53 1.55-1.28 1.52-2.98-.03-5.96-.01-8.94-.01Z"/><path d="M24.77 49.67c-3.04.05-6.07 0-9.12.02-.43 0-1.3-.66-1.28-1.07.62-1.8 3.06-3.21 1.71-5.38-3.12-5.28-11.47-.06-6.07 4.68.6.72-.11 1.76-.98 1.77H0V25.02c3.01.02 5.99-.03 8.99 0 1.16-.09 2.07-1.47 1.2-2.38-3.42-3.07-.85-7.13 3.4-6.05 2.6.44 3.28 3.97 1.29 5.56-3.9 4.25 7.29 2.51 9.24 2.84.32 0 .71-.04.66.4l-.03 8.31c0 .79-.65 1.64-1.32 1.63-1.46-.6-2.45-2.45-4.31-2-6.38 1.87-1.96 12.35 3.95 6.24 2.87-1.02 1.29 8.29 1.7 10.11Z"/><path d="M25.05 49.67v-8.81c-.03-.74-1.1-2.11-1.92-1.68-.98.6-1.76 1.46-2.86 1.87-2.32.63-4.25-1.9-3.94-4.07.36-3.67 4.08-4.42 6.32-1.69 1.14.95 2.46-.52 2.42-1.73-.04-2.82-.01-5.63-.02-8.45 3.02.07 6.04-.01 9.06 0 .88 0 1.64 1.13.95 1.8-5.09 4.42 2.38 9.62 5.93 4.94 3.06-5.27-9.56-7.11 7.9-6.71.81 0 .81-.02.81.81.53 18.85-2.31 2.45-7.82 8.88-2.28 2.74.69 8.27 4.22 6.23 1.07-.85 3.19-2.85 3.6-.3v8.89c-2.75.04-5.5.04-8.25 0-1.27-.06-3.08 1.36-1.89 2.55 2.98 2.44 1.46 6.53-2.43 6.21-3.79-.26-4.48-3.93-1.8-6.25 1.05-1.03-.46-2.47-1.59-2.5-2.9 0-5.79.04-8.69 0Z"/><path d="M74.83 49.68h-8.92c-.76 0-1.74 1-1.7 1.76.49 1.5 2.39 2.4 1.97 4.23-.25 1.66-1.93 2.74-3.55 2.76-3.63.22-5.3-3.57-2.51-5.98 1.25-1.16-.05-2.81-1.53-2.78-2.75.04-5.49.02-8.24.02-.16 0-.27 0-.26-.22.09-2.86.01-5.73.04-8.59-1.67-5.08-3.98 3.01-7.71-.75-2.54-2.6.21-8.29 3.84-6.04.94.58 1.99 2.26 3.14 1.16 1.54-1.55.38-7.44.71-9.9 0-.21.08-.25.27-.25 2.65.03 5.3.04 7.96.06.18 0 .36.03.53-.02 1.03-.26 1.96.98 1.18 1.84-1.84 1.77-2.52 4.23-.34 5.78 4.39 3.05 9.56-2.15 4.97-6.01-.59-.92.46-1.82 1.4-1.64l7.22.04c.48.12 1.55-.44 1.56.32.34 2.38-.97 8.83 1.02 9.94 1.73 1.23 3.96-4.8 7.24-.04 1.91 3.25-1.76 7.78-4.95 4.79-.61-.36-1.44-1.5-2.18-.89-.46.5-1.19.94-1.14 1.71-.03 2.9.07 5.81 0 8.7Z"/><path d="M99.96 49.68h-8.71c-.71 0-1.74.8-1.91 1.5-.08 1.01 1.07 1.58 1.52 2.39 3.27 7.42-12.22 5.82-5.19-1.63.8-1.09-.93-2.35-2-2.27-2.83.04-5.65.01-8.49.02v-8.92c.07-.89 1.23-1.75 1.99-1.04 2.37 2.66 5.71 2.19 6.67-1.37.73-4.53-3.75-6.88-6.86-3.22-2.98 1.67-1.45-8.5-1.8-10.15h9.19c.78-.12 1.96-1.19 1.36-2.01-2.04-1.89-2.88-5.31.41-6.33 4.04-1.37 7.23 2.91 3.67 5.91-1.19 1.01.09 2.46 1.33 2.46 2.95-.03 5.88-.03 8.83-.04v8.96c-.06.81-1.02 1.88-1.87 1.12-1.51-1.67-4.07-2.7-5.75-.59-3.4 4.26 1.83 9.85 5.75 5.23.73-.63 1.83.16 1.86 1 0 3 .04 5.99-.01 8.99Z"/><path d="M125.03 49.68h-8.96c-.85.01-1.64-.98-1.07-1.73 3.67-3.07 1.2-7.65-3.32-6.76-3.84 1.07-3.71 4.4-1.17 6.87.62.83-.66 1.69-1.48 1.64-2.92-.04-5.83-.01-8.75-.01-.04-2.94 0-5.88.04-8.82.01-.69-.93-1.67-1.42-1.76-.84 0-1.5.81-2.13 1.29-2.68 2.29-5.85-1.09-5.02-3.94.41-3.09 4.08-3.72 5.91-1.4 1.06 1.26 2.71.04 2.65-1.39-.04-2.89-.03-5.77-.04-8.66 3.05-.08 6.08 0 9.13-.03.84-.09 2.03-1.2 1.4-2.05-1.99-1.81-2.8-5.13.33-6.25 3.9-1.55 7.47 2.86 3.84 5.79-1.19 1.01-.1 2.47 1.2 2.53 2.96-.05 5.9.05 8.86-.06v24.73Z"/><path d="M0 74.79V50.11h8.92c2.58-.85 1.62-2.21.26-3.72-1.47-1.69-.15-4.45 1.93-4.82 2.1-.43 4.86.36 4.95 2.88.5 2.18-3.78 3.73-1.02 5.42 2.95.62 6.19.06 9.23.24.53 0 .55.01.49.56-.08 2.79 0 5.59-.02 8.38.04 1.03 1.28 2.23 2.23 1.46 1.56-1.72 4.14-2.69 5.68-.51 2.21 2.84-.77 8.22-4.27 5.6-1.64-1.74-3.37-1.94-3.67.83.09 2.71-.06 5.42.07 8.13.02.22-.07.29-.28.29-1.53-.36-12.27 1.24-9.75-2.01 4.82-4.01-1.99-9.2-5.64-5.29a2.98 2.98 0 0 0-.17 4.11c1.11 1.19 2.29 2.84-.2 3.18-2.91-.03-5.82.02-8.73-.03Z"/><path d="M49.84 74.8h-8.96c-.87.13-2.3 1.34-1.5 2.25 3.4 2.88 1.49 7.13-2.88 6.4-3.47-.62-3.5-4.2-1.13-6.25 1.01-1.04-.56-2.45-1.66-2.43-2.88.03-5.75.02-8.63.03-.05-3 0-6-.02-9 .05-.84 1.1-1.63 1.85-1.01 2.81 3.23 6.87 1.64 6.87-2.54-.35-4.04-4.37-5.15-6.95-2.02-.67.56-1.57-.37-1.76-1 .01-3.05-.03-6.1.01-9.14 2.86 0 5.72.04 8.58-.03.88-.02 2.18.89 1.53 1.77-1.65 1.77-2.88 4.12-.64 5.89 4.56 3.38 9.78-2.03 5.01-6.06-.44-.86.87-1.64 1.69-1.59 2.87.04 5.73 0 8.6 0v9.13c.05 1.11 1.48 2.03 2.32 1.14 3.12-3.97 7.68.02 5.84 3.96-.68 1.67-2.88 2.59-4.4 1.41-.72-.51-1.33-1.22-2.17-1.52-.88-.11-1.6.89-1.59 1.73.02 2.95 0 5.9.01 8.85Z"/><path d="M50.12 74.79v-9.05c0-.79 1.01-1.47 1.62-1.07 1.2.74 2.15 2.17 3.72 1.9 2.34-.34 3.71-2.82 3.15-5.09-.88-3.51-4.37-4.05-6.61-1.37-.83.81-1.93-.21-1.89-1.18.03-2.94.01-5.89.01-8.83h8.93c.96.05 1.72 1.24.98 2-2.49 2.39-2.31 5.48 1.21 6.54 4.37 1.09 7.27-3.67 3.46-6.72-1.79-3.08 8.13-1.43 9.76-1.84.27 0 .39.03.39.36-.02 2.77-.02 5.54 0 8.31.04.88-.85 2.08-1.75 1.53-3.01-3.39-7.18-1.86-6.93 2.71.09 2.38 2.82 4.64 5.01 3.14 1.29-1.01 3.1-2.8 3.66-.09.01 2.83 0 5.66.02 8.49 0 .26-.09.31-.33.31l-8.59-.02c-.81 0-1.78 1-1.72 1.76.12.71.78 1.18 1.19 1.74 2.62 3.05-1.59 6.34-4.67 4.92-5.72-3.45 2.01-5.84-.71-7.89-2.11-1.27-7.19-.16-9.9-.54Z"/><path d="M99.98 50.1v8.88c0 .68.72 1.6 1.4 1.7 1.64-.02 2.44-2.36 4.25-1.96 6.35 1.57 1.94 11.58-3.59 5.65-1.12-.61-2.12.95-2.07 2 .04 2.82.01 5.62.01 8.44-2.93 0-5.85-.01-8.78.02-.83.02-1.77-.76-1.42-1.56.66-1.02 1.68-1.81 1.94-3.05.36-2.46-2.2-4.33-4.49-4.03-2.31.03-4.66 2.61-3.38 4.86.51.82 1.21 1.52 1.68 2.37.26.66-.82 1.38-1.4 1.39h-8.94v-8.67c0-.81-.73-1.77-1.52-1.94-1.26.18-2.01 1.61-3.25 1.94-7.25.63-3.41-12.01 2.36-5.75 3.77 2.27 2.05-8.41 2.41-10.3 2.89 0 5.76.03 8.65-.01.81-.04 2.01.7 1.65 1.54-.59.9-1.39 1.75-1.83 2.72-.93 2.54 2.11 4.83 4.55 4.38 3.77-.55 4.6-4.32 1.75-6.73-.89-.93.49-1.98 1.46-1.91 2.86.04 5.7.01 8.56.01Z"/><path d="M100.26 74.79c.11-2.75.06-5.48.03-8.22-.18-1.06.85-2.52 1.95-1.76 2.27 2.64 5.93 2.23 6.7-1.37.91-4.2-3.84-6.99-6.72-3.28-3.11 2-1.62-8.35-1.94-10.03 2.96-.08 5.93 0 8.9-.02.9 0 2.22-1.15 1.65-2.08-.6-.84-1.26-1.66-1.76-2.57a3.2 3.2 0 0 1 2.81-3.96c4.06-.7 6.28 3.4 2.97 6.15-1.14 1.1.4 2.48 1.62 2.46 2.86-.07 5.71.05 8.57-.06v24.7c-2.91.11-5.84 0-8.76.06-.89.03-1.97-.95-1.29-1.78 3.67-3.05 1.23-7.52-3.21-6.77-3.87.99-3.85 4.5-1.24 6.94.53.84-.71 1.65-1.52 1.62-2.92-.07-5.84.05-8.75-.04Z"/><path d="M.01 75.23c2.9 0 5.8-.02 8.7.02.71 0 1.78-.85 1.85-1.48-.01-.9-.86-1.59-1.37-2.28-1.93-2.37.75-5.36 3.41-4.9 3.93.05 4.39 4.15 1.7 6.39-.8.98.67 2.29 1.65 2.26 2.95.03 5.88-.08 8.83.02-.12 2.92 0 5.83-.02 8.74 0 .77-.78 1.59-1.48 1.45-.81-.26-1.38-1.05-2.08-1.5-2.34-1.58-5.15.83-5.16 3.36-.28 3.69 3.77 6 6.43 2.84 1.72-1.34 2.23.26 2.34 2.55.13 2.68-.1 7.3-.1 7.3H.01V75.23Z"/><path d="M25.05 75.23c2.93 0 5.81.03 8.7-.02.95 0 2.11.93 1.36 1.86-3.79 3.26-.78 7.72 3.54 6.66 2.34-.49 3.86-3.45 2.14-5.41-.34-.69-1.6-1.36-1.26-2.17.42-.59.88-.95 1.7-.94 2.67.05 5.35 0 8.03 0 .24 0 .46-.01.46.36-.34 2.04.79 9.11-.79 9.83-1.94.4-3.44-4.28-6.91-.54-3.03 4.43 1.97 9.52 5.97 4.99.84-.63 1.81.78 1.72 1.66-.02 2.8.02 8.5.02 8.5H25.05v-8.8c.01-1.04-1.18-2.39-2.22-1.65-2.87 3.15-6.66 1.82-6.5-2.37.46-3.75 3.97-4.44 6.44-1.6 1.12.84 2.36-.67 2.29-1.81-.04-2.84-.01-5.69-.01-8.53Z"/><path d="M50.12 75.23h8.01c1.06-.24 2.75.5 2.04 1.76-1.86 1.93-2.79 4.25-.46 5.99 3.96 3.04 9.55-2.07 5.22-5.65-1.03-.83-.02-2.14 1.07-2.12 2.95.04 5.9-.09 8.84.04 0 2.84.02 5.67 0 8.51-.02 1.12 1.17 2.66 2.28 1.85 5.41-6.1 9.83 4.93 3.14 5.76-1.27-.02-2.11-1.11-3.07-1.79-1.71-.86-2.45 1.08-2.39 3.31.14 5.14.07 7.11.07 7.11H50.12s.04-2.63-.03-6.81c0-3.62-1-4.94-3.48-2.62-2.82 2.43-5.97-1.14-5.03-4.02.78-3.46 4.24-3.4 6.3-.98 1.1.83 2.33-.64 2.26-1.79-.05-2.85-.01-5.71-.02-8.56Z"/><path d="M75.19 100s.03-5.63-.02-8.42c-.08-.93.67-2.22 1.68-1.84.61.38 1.16.83 1.71 1.29 2.82 2.14 5.91-1.37 5.36-4.21-.7-3.62-4.46-4.44-6.76-1.6-.96.82-2.08-.57-1.98-1.57.04-2.81.01-5.62.02-8.44 2.41-.4 14.44 1.7 9.45-3.5-2.71-3.28 2.05-6.59 5.09-4.68 4.69 3.41-1.89 5.67-.04 7.38 1.63 1.68 6.85.46 9.31.81.54.05 1.09-.25.97.53v8.24c0 .99 1.22 2.36 2.21 1.61 1.58-1.77 4.51-2.82 5.9-.26 2.09 2.93-1.24 8.1-4.67 5.14-2.42-2.3-3.49-.87-3.46 1.56.03 2.03.02 7.94.02 7.94H75.19Z"/><path d="M125.03 75.18V100h-24.77s.06-5.74.03-8.38c-.15-1 .79-2.5 1.88-1.76 1.87 1.85 4.34 2.71 6.08.28 1.61-2.22.66-5.88-2.06-6.61-1.56-.41-2.79.63-3.85 1.64-.98.92-2.16-.43-2.06-1.48.03-2.82 0-5.64-.01-8.46 2.96-.07 5.93.01 8.89 0 .89-.02 2.25-1.18 1.67-2.12-1.77-1.97-3.05-4.67-.04-6.2 4.06-1.77 7.94 2.48 4.13 5.74-1.3 1.16.33 2.63 1.65 2.59 2.82-.06 8.46-.06 8.46-.06Z"/><defs><pattern id="img"patternUnits="userSpaceOnUse"width="125"height="100"><image id="imgSrc"href=""width="125"height="100"preserveAspectRatio="xMidYMid slice"/></pattern><filter id="bevel"filterUnits="objectBoundingBox"><feGaussianBlur in="SourceAlpha"stdDeviation="0.9"result="blur"/><feSpecularLighting in="blur"surfaceScale="0.8"specularConstant="1"specularExponent="2"result="specOut"lighting-color="white"><fePointLight x="50"y="-150"z="-750"/></feSpecularLighting><feComposite in="specOut"in2="SourceAlpha"operator="in"result="specOut2"/><feComposite in="SourceGraphic"in2="specOut2"operator="arithmetic"k1="0"k2="1"k3="1"k4="0"/></filter></defs></svg>    <script src="https://unpkg.com/gsap@3/dist/gsap.min.js"></script>    <script src="https://unpkg.com/gsap@3/dist/Draggable.min.js"></script>    <script>     const puzzle=document.querySelector('.puzzle');const pieces=document.querySelector('.pieces');const paths=document.querySelectorAll('.puzzle path');const endImg=document.querySelector('.endImg');const kittens=['https://images.unsplash.com/photo-1587996833651-06a23343b15d','https://images.unsplash.com/photo-1597626259989-a11e97b7772d','https://images.unsplash.com/photo-1615497001839-b0a0eac3274c','https://images.unsplash.com/photo-1566847438217-76e82d383f84','https://images.unsplash.com/photo-1570018144715-43110363d70a','https://images.unsplash.com/photo-1561948955-570b270e7c36','https://plus.unsplash.com/premium_photo-1677545183884-421157b2da02','https://images.unsplash.com/photo-1573865526739-10659fec78a5',];const startPos=[{x:164,y:56},{x:77,y:-35},{x:-98,y:-23},{x:-57,y:105},{x:-168,y:39},{x:-33,y:-5},{x:-38,y:-60},{x:-122,y:71},{x:91,y:-13},{x:35,y:-5},{x:-38,y:16},{x:8,y:-88},{x:81,y:4},{x:62,y:-66},{x:-174,y:-45},{x:101,y:36},{x:38,y:33},{x:-80,y:29},{x:-7,y:-106},{x:42,y:19},];paths.forEach((p,i)=>{const piece=document.createElementNS('http://www.w3.org/2000/svg','g');const shadow=p.cloneNode('true');pieces.append(piece);piece.append(shadow);piece.append(p);gsap.set(piece,{transformOrigin:'50%',x:startPos[i].x,y:startPos[i].y,rotate:'random(-25,25)',attr:{class:'piece'},});gsap.set(shadow,{opacity:0.35});gsap.set(p,{attr:{fill:'url(#img)',filter:'url(#bevel)'}});let draggable=Draggable.create(piece,{onPress:()=>{gsap.timeline({defaults:{duration:0.3}}).to(piece,{scale:1.1,rotate:'random(-5,5)',ease:'back.out(3)',},0).to(shadow,{x:1,y:5,opacity:0.15,scale:0.9,ease:'back.out(1)'},0);pieces.append(piece)},onRelease:()=>{gsap.timeline({defaults:{duration:0.2}}).to(piece,{scale:1,ease:'back.out(3)'},0).to(shadow,{opacity:0.35,x:0,y:0,scale:1,ease:'power2'},0).add(check);if(Math.abs(gsap.getProperty(piece,'x'))<9&&Math.abs(gsap.getProperty(piece,'y'))<9){gsap.to(piece,{duration:0.2,x:0,y:0,rotate:0})}},})});function check(){let n=0;document.querySelectorAll('.piece').forEach((p)=>{n+=Math.abs(gsap.getProperty(p,'x'));n+=Math.abs(gsap.getProperty(p,'y'))});if(n<1){puzzle.append(endImg);gsap.to(endImg,{duration:1,opacity:1,ease:'power2.inOut'})}}gsap.set('.endImg, .box, .pieces',{x:82.5,y:50});gsap.set('body',{background:'hsl(random(0,360), 70%, 80%)',});gsap.set('#imgSrc',{attr:{href:kittens[gsap.utils.random(0,kittens.length-1,1)]+'?q=50&w=2000',},});    </script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E6%91%86%E9%92%9F.html"/>
      <url>/HEXO/html/%E6%91%86%E9%92%9F.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>好看的摆钟</title>    <style>      .overlay-content {        position: fixed;        top: 0;        left: 0;        width: 100vw;        height: 100vh;        z-index: 99999; /* 非常高的值以确保覆盖全局 */        background-color: black; /* 根据需要设置背景色 */        overflow: auto; /* 允许内容滚动 */      }      @font-face{font-family:'Bungee Spice';font-style:normal;font-weight:400;font-display:swap;src:url(https://www.fecoder.cn/code-fun/fonts/nwpTtK2nIhxE0q-IwgSpZBqyyCg_SsDV7Cd_.woff2)          format('woff2');unicode-range:U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;}body{--google-font-color-bungeespice:colrv1;}*{margin:0;padding:0;}html{overflow-x:hidden;}body{background:#434343;width:100%;height:100svh;display:flex;justify-content:center;align-items:center;font-family:'Bungee Spice',sans-serif;overflow-x:hidden;min-height:480px;}.container{position:relative;min-height:250px;}.bubble-wrap{width:350px;height:350px;border-radius:50%;position:relative;display:flex;justify-content:center;align-items:center;overflow:hidden;}.bubbles-bg{position:relative;height:100%;display:flex;gap:22px;justify-content:center;width:100%;}.bubbles-bg span{display:inline-block;position:relative;width:8px;height:8px;border-radius:50%;animation:animate 5s linear infinite;animation-duration:calc(150s / var(--i));}@keyframes animate{0%{transform:translateY(350px) scale(0);background-color:#df6208;box-shadow:0px 0px 4px 4px #e67d31,0 0 30px #e67d31,0 0 70px #e67d31;}50%{background:#d3df08;box-shadow:0px 0px 4px 4px #e4ec53,0 0 30px #e4ec53,0 0 70px #e4ec53;}70%{background:#df0808;box-shadow:0px 0px 4px 4px #ec4242,0 0 30px #ec4242,0 0 70px #ec4242;}100%{transform:translateY(-10px) scale(1);background-color:#df6208;box-shadow:0px 0px 4px 4px #e67d31,0 0 30px #e67d31,0 0 70px #e67d31;}}.clock{width:350px;height:350px;border-radius:50%;position:relative;-webkit-box-shadow:inset inset 0px 0px 12px 12px rgba(0,0,0,1),0px 0px 65px 5px rgba(0,0,0,0.5);-moz-box-shadow:inset inset 0px 0px 12px 12px rgba(0,0,0,1),0px 0px 65px 5px rgba(0,0,0,0.5);box-shadow:inset 0px 0px 12px 12px rgba(0,0,0,1),0px 0px 65px 5px rgba(0,0,0,0.5);background:#1a1c1a;display:flex;justify-content:center;align-items:center;margin-bottom:110px;}.clock::before{content:'';width:10px;height:10px;border-radius:50%;border:2px solid #df6208;background-color:#2f362f;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);z-index:1;}.inner-circle{width:200px;height:350px;border-radius:50%;position:absolute;display:flex;justify-content:center;align-items:start;}.inner-circle-2{width:150px;height:250px;}.inner-circle-3{width:100px;height:155px;}.border-circle{border-radius:50%;position:absolute;background:transparent;border:2px solid rgba(223,98,8,0.2);left:50%;top:50%;width:180px;height:180px;transform:translate(-50%,-50%);}.border-circle:nth-child(2){width:130px;height:130px;}.border-circle:nth-child(3){width:80px;height:80px;}.inner-circle div{position:relative;height:50%;width:7px;z-index:1;border-radius:5px;display:inline-block;transform-origin:bottom;transform:scale(0.5);z-index:0;background:rgb(223,98,8);background:linear-gradient(          180deg,rgba(223,98,8,0.9108018207282913) 50%,rgba(255,0,0,0.9304096638655462) 100%        );}.inner-circle-2 div{width:4px;}.inner-circle-3 div{width:3px;}span{position:absolute;text-align:center;transform:rotate(calc(var(--i) * 29.7deg));inset:25px;}span b{font-size:18px;position:absolute;text-align:center;transform:rotateZ(calc(var(--i) * -30deg));display:inline-block;opacity:0.9;}.digital-time-wrap{width:10px;height:80%;background-color:#1a1c1a;position:absolute;left:48.5%;top:50%;transform:translate(-50%,-50%);z-index:-1;animation-name:rotate;animation-duration:2s;animation-iteration-count:infinite;transform-origin:50% 0%;animation-timing-function:linear;}@keyframes rotate{0%{transform:rotate(-6deg);animation-timing-function:ease-in;}25%{transform:rotate(0deg);animation-timing-function:ease-out;}50%{transform:rotate(6deg);animation-timing-function:ease-in;}75%{transform:rotate(0deg);animation-timing-function:ease-out;}100%{transform:rotate(-6deg);}}#digital-time{width:fit-content;display:flex;padding:10px;border:2px solid rgba(0,0,0,0.5);border-radius:20px;-webkit-box-shadow:0px 0px 65px 5px rgba(0,0,0,0.5);-moz-box-shadow:0px 0px 65px 5px rgba(0,0,0,0.5);box-shadow:0px 0px 65px 5px rgba(0,0,0,0.5);background:#242824;position:absolute;left:50%;transform:translateX(-50%);bottom:0;}#digital-time div{font-size:20px;width:50px;text-align:center;position:relative;}#digital-time div:nth-child(1)::after,#digital-time div:nth-child(2)::after{content:':';position:absolute;right:-4px;opacity:0.7;}#digital-time div:nth-child(4){font-size:18px;display:flex;justify-content:center;align-items:center;}</style>  </head>  <body>    <body><div class="overlay-content"><div class="container"><div class="clock"><div class="bubble-wrap"><div class="bubbles-bg"><span style="--i: 15"></span><span style="--i: 12"></span><span style="--i: 18"></span><span style="--i: 22"></span><span style="--i: 20"></span><span style="--i: 23"></span><span style="--i: 13"></span><span style="--i: 18"></span><span style="--i: 28"></span><span style="--i: 24"></span><span style="--i: 15"></span><span style="--i: 21"></span></div></div><!--border inner--><div class="border-circle"></div><div class="border-circle"></div><div class="border-circle"></div><div class="inner-circle inner-circle-1"id="sec"><div></div></div><div class="inner-circle inner-circle-2"id="min"><div></div></div><div class="inner-circle inner-circle-3"id="hrs"><div></div></div><!--Number of clock--><span style="--i: 1"><b>1</b></span><span style="--i: 2"><b>2</b></span><span style="--i: 3"><b>3</b></span><span style="--i: 4"><b>4</b></span><span style="--i: 5"><b>5</b></span><span style="--i: 6"><b>6</b></span><span style="--i: 7"><b>7</b></span><span style="--i: 8"><b>8</b></span><span style="--i: 9"><b>9</b></span><span style="--i: 10"><b>10</b></span><span style="--i: 11"><b>11</b></span><span style="--i: 12"><b>12</b></span><!--digital clock--><div class="digital-time-wrap"><div id="digital-time"><div id="hours">00</div><div id="minuts">00</div><div id="seconds">00</div><div id="ampm">PM</div></div></div></div></div></div></body>    <script>let hrs=document.querySelector('#hrs');let sec=document.querySelector('#sec');let min=document.querySelector('#min');setInterval(()=>{let day=new Date();let hh=day.getHours()*30;let mm=day.getMinutes()*6;let ss=day.getSeconds()*6;hrs.style.transform=`rotateZ(${hh+mm/12}deg)`;min.style.transform=`rotateZ(${mm}deg)`;sec.style.transform=`rotateZ(${ss}deg)`});function updateClock(){const now=new Date();const hours=now.getHours();const minutes=now.getMinutes();const seconds=now.getSeconds();const ampm=hours>=12?'PM':'AM';document.getElementById('hours').textContent=formatTime(hours%12||12);document.getElementById('minuts').textContent=formatTime(minutes);document.getElementById('seconds').textContent=formatTime(seconds);document.getElementById('ampm').textContent=ampm}function formatTime(time){return time<10?'0'+time:time}setInterval(updateClock,1000);updateClock();</script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E7%81%AF%E7%AC%BC%E7%82%B9%E7%81%AF.html"/>
      <url>/HEXO/html/%E7%81%AF%E7%AC%BC%E7%82%B9%E7%81%AF.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>灯笼点灯</title>  <style>    html,body{height:100%}body{display:flex;justify-content:center;background:rgb(244 246 248);background:linear-gradient(35deg,rgb(198 206 217) 0%,rgba(199,207,217,0) 40%),linear-gradient(90deg,rgb(244 246 248) 0%,rgb(199 207 217) 100%);margin:0;font-family:'poppins',sans-serif}.footer{position:absolute;bottom:0;right:0;font-family:monospace;color:#888;padding:10px;font-size:12px}.footer a{color:#888}.main,.main *{transition:all 0.2s ease-in-out}.main{--window-size:330px;--lantern-size:calc(var(--window-size) / 2.7);scale:1;width:var(--window-size);height:var(--window-size);position:absolute;left:0;right:0;top:0;bottom:0;margin:auto;border-radius:4px;box-shadow:0 -70px 8px 10000px rgba(0,0,0,0.7),inset 0 -70px 8px 0 rgba(0,0,0,0.1),inset 0 0 calc(var(--window-size) / 2) calc(var(--window-size) / 5) rgba(0,0,0,1),inset 0 calc(var(--window-size) / -12) calc(var(--window-size) / 10) 0 rgba(0,0,0,0.2)}.on.main{box-shadow:0 -70px 8px 1000px rgba(0,0,0,0),inset 0 -70px 8px 0 rgba(0,0,0,0.2),inset 0 0 calc(var(--window-size) / 2) 0 rgba(0,0,0,1),inset 0 calc(var(--window-size) / -12) calc(var(--window-size) / 10) 0 rgba(0,0,0,0.2)}.shadow{height:16%;width:100%;position:absolute;bottom:4%;margin:auto;left:0;right:0;border-radius:50%;background:radial-gradient(rgba(0,0,0,0.4) 30%,rgba(0,0,0,0) 70%);opacity:0}.on .shadow{opacity:1}.lantern{width:var(--lantern-size);height:calc(var(--lantern-size)*1.3);position:absolute;left:0;right:0;top:0;bottom:10%;margin:auto;filter:brightness(0.4);cursor:pointer}.on .lantern{filter:brightness(1)}.leaf{--val-x:calc(var(--lantern-size)/3);--val-y:calc(var(--lantern-size)/6);position:absolute;margin:auto;left:0;right:0;top:7%;bottom:12%;background:#fff;border-radius:calc(var(--lantern-size) / 2.7);box-shadow:inset 0 0px 1px 1px rgba(0,0,0,0.1),inset 0 0px 2px 0px rgba(0,0,0,0.2),inset 0 60px 10px -40px rgba(255,255,255,0),inset 0 0px 140px 0px rgba(0,0,0,0.5),inset 0 -60px 10px -40px rgba(0,0,0,0.1),inset 0 var(--val-x) calc(0.5 * var(--val-x)) calc(-0.8*var(--val-x)) rgba(0,0,0,1),inset 0 calc(-1*var(--val-x)) calc(0.5 * var(--val-x)) calc(-0.9*var(--val-x)) rgba(0,0,0,1)}.on .leaf{box-shadow:inset 0 0px 1px 1px rgba(0,0,0,0.1),inset 0 0px 2px 0px rgba(0,0,0,0.2),inset 0 60px 10px -40px rgba(255,255,255,0.8),inset 0 0px 14px 0px rgba(0,0,0,0.5),inset 0 -60px 10px -40px rgba(0,0,0,0.1),inset 0 var(--val-x) calc(0.5 * var(--val-x)) calc(-0.8*var(--val-x)) rgba(0,0,0,1),inset 0 calc(-1*var(--val-x)) calc(0.5 * var(--val-x)) calc(-0.9*var(--val-x)) rgba(0,0,0,1)}.leaf>.leaf{left:0;right:0;top:0%;bottom:0%;border-radius:40%}.leaf>.leaf{scale:0.95 1}.leaf>.leaf>.leaf{scale:0.87 1}.leaf>.leaf>.leaf>.leaf{scale:0.8 1}.leaf>.leaf>.leaf>.leaf>.leaf{scale:0.7 1}.leaf>.leaf>.leaf>.leaf>.leaf>.leaf{scale:0.54 1}.leaf>.leaf>.leaf>.leaf>.leaf>.leaf>.leaf{scale:0.07 1}svg#Layer_1{width:100%;height:70%;left:-20%;position:absolute;filter:brightness(0.2);overflow:visible}.on svg#Layer_1{filter:brightness(1)}svg#Layer_1>*{filter:drop-shadow(-100px 10px 10px rgba(0,0,0,0))}.on svg#Layer_1>*{filter:drop-shadow(-100px 10px 10px rgba(0,0,0,1))}.top{background:rgb(18,17,17);background:linear-gradient(90deg,rgba(18,17,17,1) 0%,rgba(80,80,80,1) 20%,rgba(20,19,19,1) 31%,rgba(31,30,30,1) 42%,rgba(122,122,122,1) 55%,rgba(114,114,114,1) 60%,rgba(108,108,108,1) 61%,rgba(27,26,26,1) 70%,rgba(27,26,26,1) 81%,rgba(69,69,69,1) 90%,rgba(27,26,26,1) 97%);position:absolute;margin:auto;left:0;right:0;top:22%;width:16%;height:3%;border-radius:16%;filter:brightness(0.2)}.on .top{filter:brightness(1)}.top-line{background:rgb(18,17,17);box-shadow:inset 1px 0 1px 0px rgb(18,17,17),inset 1px 0 2px 0px rgba(226,226,226,1),inset 0 0 0 3px rgb(18,17,17);position:absolute;margin:auto;left:0;right:0;top:0%;width:0.7%;height:14%;filter:brightness(0.2)}.on .top-line{filter:brightness(1)}.top-circle{background:transparent;position:absolute;margin:auto;left:0;right:0;top:14%;box-shadow:0px -1px 1px 0.5px rgba(226,226,226,0.7),0px 1.5px 1px 0.5px rgb(226,226,226),-0.5px -0.5px 0.5px 3px rgb(18,17,17),0px 0px 1px 3px rgb(226,226,226),0 0 0 3px rgb(18,17,17);width:8%;height:8%;border-radius:50%;filter:brightness(0.2)}.on .top-circle{filter:brightness(1)}.bottom{background:rgb(18,17,17);background:linear-gradient(90deg,rgba(18,17,17,1) 0%,rgba(80,80,80,1) 20%,rgba(20,19,19,1) 31%,rgba(31,30,30,1) 42%,rgba(122,122,122,1) 55%,rgba(114,114,114,1) 60%,rgba(108,108,108,1) 61%,rgba(27,26,26,1) 70%,rgba(27,26,26,1) 81%,rgba(69,69,69,1) 90%,rgba(27,26,26,1) 97%);filter:brightness(0.4);transform:matrix3d(1,0,0.00,0,0.00,0.71,0.71,0,0,-0.71,0.71,0,0,0,0,1);-webkit-transform:matrix3d(1,0,0.00,0,0.00,0.71,0.71,0,0,-0.71,0.71,0,0,0,0,1);position:absolute;margin:auto;left:0;right:0;top:62.4%;width:14%;height:2.5%;border-radius:16%;filter:brightness(0.2)}.on .bottom{filter:brightness(1)}  </style></head><body>  <div class="main">    <?xml version="1.0" encoding="UTF-8"?>    <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 169.65 460.01">      <path        d="M47.04,76.81c-.2,.29-.33,.26-.39-.11-.65-4-1.85-7.67-3.6-11.01-.89-1.69-1.19-1.59-.89,.29,.4,2.56,3.62,15.67,2.5,16.98-2.48-.16-4.45-22.81-5.64-23.14-.03-.01-.07-.01-.1,0t-.02,.01s-.03,.01-.05,.03c-.02,.02-.05,.04-.06,.07-.02,.03-.04,.06-.05,.1-.01,.02-.02,.05-.03,.08-.01,.04-.02,.08-.02,.13-.01,.06-.01,.12,0,.18l2.26,19.83c.07,.41,.11,.81,.14,1.21,.13,2.14-.34,4.15-1.39,6.04-.89,2.99-.24,5.51,1.96,7.54l.54,3.96,.49,9.26-4.34,18.99c-2.17,6.66-4.94,13.09-6.05,19.9-.79,4.9-.99,12.48-2.93,16.85-.48,0-.73-.25-.75-.75,.44-1.55,.7-3.64,.79-6.25,.09-2.87,.7-6.82,1.81-11.84,.17-.77,.06-.85-.33-.24-2.54,4-4.46,8.28-5.77,12.83-.69,.36-1.35,.36-2,0,.19-2.61,.81-4.76,1.85-6.44,6.27-10.13,11.81-21.23,12.54-32.98,.72-11.71,.21-22.31-.39-38.08-.57-8.33-.9-16.66-.99-25.01-.03-2.35-.34-5.11-.91-8.26-.88-4.84-1.23-9.75-1.04-14.73-.33-5.51-1.19-10.91-2.58-16.21-.08-.29,.05-.6,.3-.74l1.24-.65c.3-.15,.48-.43,.49-.72l.34-13.93h4c-.05,6.27-.07,12.55-.06,18.82,0,1.02,.71,1.78,.66,2.88-.31,6.87-.1,13.72,.63,20.55,.01,1.97,.12,3.92,.35,5.87,.71,6.28-1.05,10.12,3.86,15.42,1.36,2.35,5.25,10.92,3.63,13.27Z"        style="fill: #090909;" />      <path        d="M42.97,0h2.5c.11,.75,.41,1.41,.9,2,.35,1.23,.75,2.44,1.18,3.65,1.04,2.89,3.62,5.45,5.32,8.1l1.58,2.25c.31,1.07,.95,1.9,1.92,2.5,2.44,3.24,3.37,7.4,6.04,10.54,.07,.79,.42,1.44,1.04,1.96-1.89,3.17-3.55-.36-5.54-.46l-3.5-3.58-1.04-1.96c-.38-1.79-1.06-3.43-2.05-4.92-2.99-4.55-5.46-9.23-6.19-14.69-.25-1.94-.97-3.74-2.16-5.39Z"        style="fill: #171717;" />      <path        d="M86.22,0h4.25c-.15,2.75-1.56,16.13-.39,17.63,.2,.26,.29,.57,.23,.86-1.23,5.94-1.65,11.92-1.24,17.94,.35,5.11-.04,9.47-.15,14.31,0,.25-.09,.57-.26,.95-.29,.65-.17,1.23,.36,1.74,.23,.22,.36,.52,.37,.82l.31,9c.19,4.36-.16,8.67-1.04,12.93-2.41,6.2-3.08,12.55-2.03,19.04l-10.76,52.28c-.89,2.31-1.82,4.6-2.8,6.87-1.17,2.71-.96,5.39-1.75,8.27-.64,2.36-.41,3.4,.42,5.55,.11,.28-.03,.6-.31,.72,0,0-.02,0-.03,.01-2.15,.72-2.98,2.4-2.49,5.03,.1,.51,.16,1.02,.19,1.54,.55,9.9,.69,19.07,.41,27.52-1.12,1.42-1.41,5.04-3.56,4.49l-1-2.99c-.08-.25,.03-.51,.25-.6,1.28-.51,1.93-1.64,1.96-3.41,.14-9.08,.46-18.45-.19-27.51-.12-1.69,.03-3.6,.44-5.74,3.69-19.11,6.46-32.83,8.33-41.18,.97-4.33,1.5-8.71,1.6-13.14,0-.31,.12-.62,.32-.9,.63-.88,1.03-1.74,1.19-2.59,2.14-11.27,4.11-18.82,4.98-28.39,.43-4.78,1.64-13.25,1.29-20.05-.56-7.14-.77-14.32-.62-21.55,.48-5.35,.62-10.75,.41-16.2-.09-2.52,.34-10.27,1.31-23.25Z"        style="fill: #0d0d0d;" />      <path        d="M154.41,79.75c.48,2.81-.19,3.4-2,1.75l-2.25-2.04c-1.85-2.46-3.27-5.14-4.28-8.05-.1-.31-.3-.57-.57-.77-2.25-1.67-4.11-3.68-5.58-6.03-.16-.25-.24-.57-.25-.93-.03-.68-.15-1.14-.38-1.37-4.3-4.37-8.11-9.09-11.43-14.14-.61-.93-.85-.85-.7,.26,.45,3.29,1.79,6.11,4.02,8.46-3.33,.96-6.11-11.99-7.87-14.39-1.36-2.31-4.21-7.53-6.44-8.85-.32-.19-.56-.43-.68-.67-2.31-4.73-5.01-9.24-8.09-13.52-.91-1.55-2.98-4.8-6.19-9.77-2.39-3.7-4.83-6.84-7.34-9.43l3.34-.26,3.9,5.5,7.5,11.75,11.04,17.29c5.35,7.84,10.87,15.56,16.57,23.15,.44,.59,1,1.01,1.68,1.27l.46,.54,10.33,10.25c.15,2.05,1.02,3.63,2.62,4.73l2.73,3.93c.13,.19,.12,.45-.02,.66-.13,.19-.17,.41-.12,.68Z"        style="fill: #121111;" />      <path        d="M115.28,18.3c-5.05-3.49-9.19-7.93-12.41-13.33l9.54,9.47c.98,1.31,2.07,2.42,3.27,3.31,1.09,.81,.07,.88-.4,.55Z"        style="fill: #171717;" />      <path d="M59.12,16c4.72,4.79,4,5.1-2.15,.94-.99-.67-1.83-.99-2.52-.94l-1.58-2.25c.37-1.95,5.03,1.83,6.25,2.25Z"        style="fill: #b1b1b0;" />      <path        d="M60.83,21.66c2.98,3.18,5.43,6.63,7.36,10.34,.1,.19,.09,.41-.02,.5-.03,.02-.05,.03-.09,.03h-.22c-.1,.01-.23-.07-.33-.21-.63-.87-1.42-1.57-2.37-2.11-.76-.77-1.68-1.16-2.75-1.17-2.67-3.14-3.6-7.3-6.04-10.54,.94-1.24,3.12,2.11,4.46,3.16Z"        style="fill: #c4c4c4;" />      <path        d="M54.41,26.96l3.5,3.58c.15,.76,.5,1.41,1.05,1.94,.3,.29,.49,.59,.52,.81,.07,.49-.19,.73-.78,.71-.37-.28-7.42-7.02-4.29-7.04Z"        style="fill: #696969;" />      <path        d="M62.41,29.04c1.07,.01,1.99,.4,2.75,1.17-.61,1.12,1.35,2.76,.59,2.8-.22,.01-.44-.08-.6-.24l-1.7-1.77c-.62-.52-.97-1.17-1.04-1.96Z"        style="fill: #747373;" />      <path        d="M169.45,63.56c-4.06-.61-8.05-1.37-11.96-2.26-3.14-.72-5.83-2.31-8.83-3.59-2.39-1.27-4.35-2.98-5.86-5.13-4.05-5.76-8.19-9.49-14.9-12.04-3.05-1.16-5.21-3.19-6.49-6.08l5.96,3.79c5.12,3.29,9.79,5.09,14.14,10.32,1.96,2.35,2,5.41,6.4,5.72-1.37,.99-1.12,1.72,.75,2.17,4.36,2.8,7.12,3.67,12.95,4.69,2.63,.45,5.24,1.26,7.84,2.41Z"        style="fill: #1c1c1c;" />      <path        d="M169.45,63.56c-2.6-1.15-5.21-1.96-7.84-2.41-5.83-1.02-8.59-1.89-12.95-4.69,.45-.66,.53-1.3,.25-1.92,1.36-.51,2.78-.6,4.25-.25,2.28,.48,18.44,5.84,16.29,9.27Z"        style="fill: #d4d4d4;" />      <path d="M148.66,56.46c-1.87-.45-2.12-1.18-.75-2.17,.31,.15,.65,.24,1,.25,.28,.62,.2,1.26-.25,1.92Z"        style="fill: #676666;" />      <path d="M26.91,301.24c.23-.2,.46-.39,.69-.57-.19,.19-.42,.38-.69,.57Z" style="fill: #565555;" />      <path d="M152.31,72.28l-3.11-2.53-10.33-10.25c1.16-.45,2.53-.22,4.1,.69,5.08,2.93,8.19,6.96,9.34,12.09Z"        style="fill: #e4e4e4;" />      <path        d="M159.35,80.06c1.11,1.2,.88,2.5-.73,.75-2.11-2.29-4.38-4.4-6.8-6.33-1.6-1.1-2.47-2.68-2.62-4.73l3.11,2.53,4.6,2.26,3.85,3.12c-2.08,.37-2.55,1.17-1.41,2.4Z"        style="fill: #434242;" />      <path d="M160.76,77.66l-3.85-3.12c3.11,1.06,5.85,2.8,8.22,5.21,2.65,3.04-4.13-1.93-4.37-2.09Z"        style="fill: #dcdcdb;" />      <path        d="M88.66,76.18c-.15,10.49,1.27,20.76,4.27,30.81,.61,2.03,1.45,3.95,2.52,5.76-.34,1.19-.08,2,.77,2.44,1.77,3.63,3.38,7.26,4.82,10.89,2.28,5.77,4.89,11.36,7.83,16.77,4.95,8.34,11.82,13.9,18.46,21.74,.28,2.17,1.04,4.14,2.29,5.91-7.06-3.93-11.25-10.49-15.02-17.27-1.93-3.48-4.22-5.61-6.62-8.58-.22-.27-.39-.25-.51,.07-.91,2.4-.87,4.77,.12,7.1,.41,.95,2.24,2.09,.59,2.93-.25,.12-.56,.01-.69-.25-1.36-2.67-1.82-5.5-1.37-8.5l.42-4.36c.04-.46-.07-.93-.3-1.33-1.65-2.79-3.13-5.48-4.43-8.09-2.01-4.04-3.52-9.53-5.85-14.18-.13-.27-.96-1.24-.83-.06,1.19,11.56,3.19,22.98,5.99,34.27,1.21,7.51,2.14,12.01,2.79,13.5,1.53,3.52,2.54,7.19,3.04,11-.06,1.38,.33,2.58,1.16,3.59l.62,5.41,1.61,13c-.91-.15-1.57-.49-1.97-1-.31-5.84-1.37-11.54-3.17-17.11-.08-.25-.25-.43-.44-.45-2.11-.31,.78,12.75,1.36,14.31-.27,.22-.58,.3-.92,.25-1.91-3.25-2.76-6.41-2.54-9.5,.05-.64-.03-1.07-.23-1.28-.26-.27-.45-.17-.58,.32-.87,3.25-2.25,6.67-4.14,10.24-.17,.32-.27,.3-.32-.06-.77-6.41,.06-12.11,2.48-17.08,.15-.3,.2-.63,.15-.94-.64-4.3-1.66-9.64,.08-13.78,.5-1.19,.58-2.4,.25-3.64-2.83-10.51-5.24-21.18-7.23-32.03-1.54-10.74-3.7-21.33-6.49-31.78-1.05-6.49-.38-12.84,2.03-19.04Z"        style="fill: #121111;" />      <path        d="M40.95,80.25c.12,1.79,.58,3.44,1.39,4.95,1.7,3.17,2.34,4.78,3.34,7.52,.11,.3,0,.62-.24,.76-.64,.37-1.2,.25-1.69-.37-.2-.26-.47-.45-.77-.54-2.58-.85-.9-3.79-3.28-5.07,1.25-2.24,1.67-4.66,1.25-7.25Z"        style="fill: #2e2e2e;" />      <path        d="M41.66,95.04c4.01,.76,6.26,3.14,6.76,7.15,.03,.25,.15,.55,.35,.91,.19,.33,.24,.65,.14,.96-.07,.21-.3,.31-.51,.23-.05-.02-.1-.05-.15-.08l-6.05-5.21-.54-3.96Z"        style="fill: #767575;" />      <path        d="M49.64,157.44c-.52-.38-.89-1.02-1.11-1.91-1.39-5.68-3.6-11.08-6.62-16.2-.31-.51-.48-.47-.51,.12l-2.95,46.3-.28,12.59c-2.12,1.83-3.81,4.37-5.06,7.63,2.63-7.41,3.63-14.98,3.01-22.72,1.28-13.1,1.46-26.66,1.95-39.32,.22-5.56,.31-11.12,.28-16.68l4.34-18.99c-.69,9.59-.7,17.67-.03,24.24,.55,5.39,4.1,11.14,5.55,15.1,1.1,3.01,1.85,6.13,2.26,9.35,.11,.81-.17,.98-.83,.49Z"        style="fill: #121111;" />      <path        d="M95.45,112.75l.42,.25c4.44,5.34,9.44,10.09,15,14.25,3.28,3.65,9.04,4.33,12.77,6.19,.49,.98,4.11,7.81,3.08,8.21-.22,.08-.56-.02-.88-.27-2.24-1.79-4.7-3.17-7.39-4.15-.16-.06-.34,.03-.4,.19-.02,.05-.02,.1-.01,.15,.29,1.65,1.05,2.88,2.29,3.71,1.39,1.95,3.08,3.51,5.08,4.67-7.07-1.06-9.99-7.85-11.13-14.17-.06-.32-.23-.62-.49-.83-6.17-5.07-12.03-10.32-17.57-15.76-.85-.44-1.11-1.25-.77-2.44Z"        style="fill: #252525;" />      <path        d="M118.41,127.04c6.64,1.7,12.5,4.84,17.57,9.41,1.27,1.14,1.09,1.44-.52,.91l-11.82-3.92c-3.73-1.86-9.49-2.54-12.77-6.19,2.08-2.64,5.1-.93,7.54-.21Z"        style="fill: #cdcdcc;" />      <path d="M4.86,199.14c-1.12,.2-1.7-.01-1.74-.64,.18-.32,.43-.57,.75-.75,.19,.93,.52,1.39,.99,1.39Z"        style="fill: #4b4a4a;" />      <path        d="M126.66,147.21l-1.25-1.26c-2-1.16-3.69-2.72-5.08-4.67,3.99-.45,6.58,1.06,7.77,4.53,.71,2.09,.23,2.56-1.44,1.4Z"        style="fill: #908f8f;" />      <path        d="M114.16,146.54c6.08,4.81,10.47,10.82,13.17,18.05-6.64-7.84-13.51-13.4-18.46-21.74,1.97,.9,3.73,2.13,5.29,3.69Z"        style="fill: #cdcdcc;" />      <path        d="M75.87,147.5c-.44,1.51-.41,2.94,.1,4.29,.12,.31,.11,.64,0,.93-1.73,4.03-2.82,8.22-3.27,12.55-.12,1.13-.47,3.12-1.05,5.97-.65,3.22-.04,7.83-.06,10.09-.05,8.63-.26,17.25-.61,25.86-.11,2.73-.47,4.84-1.08,6.32-.22-3.11,1.3-8.9-.38-10.5,.28-8.45,.14-17.62-.41-27.52-.03-.52-.09-1.03-.19-1.54-.49-2.63,.34-4.31,2.49-5.03,.29-.1,.45-.42,.35-.7,0,0,0-.02-.01-.03-.83-2.15-1.06-3.19-.42-5.55,.79-2.88,.58-5.56,1.75-8.27,.98-2.27,1.91-4.56,2.8-6.87Z"        style="fill: #292929;" />      <path        d="M27.41,163.29c-.96,4.94-3.46,8.92-7.5,11.94-.43,1.69-1.04,3.25-1.83,4.66-1.22,2.17-3.62,2.99-5.18,5.1-4.81,3.79-5.93,7.98-9.03,12.76-.32,.18-.57,.43-.75,.75-.65,.67-1.69,1.27-3.12,1.79,.63-6.19,3.32-11.21,8.07-15.06,3.56-2.17,9.37-4.59,10.42-8.76,1.57-6.23,3.11-12.47,4.63-18.72,.65,.36,1.31,.36,2,0l2.29,5.54Z"        style="fill: #2e2e2e;" />      <path d="M33.57,173.49c-2.07-2.85-3.45-5.84-4.12-8.99,2.37,2.51,3.74,5.5,4.12,8.99Z" style="fill: #7e7e7d;" />      <path        d="M106.95,176.75l.92,1.5c3.34,2.55,5.1,6.06,5.29,10.55,.14,.94,.07,1.84-.21,2.7-1.27-3.85-2.89-7.57-4.84-11.16-.83-1.01-1.22-2.21-1.16-3.59Z"        style="fill: #2e2e2e;" />      <path d="M113.16,188.8c-.19-4.49-1.95-8-5.29-10.55,.15-.81,.6-.91,1.35-.31,3.61,2.85,4.92,6.47,3.94,10.86Z"        style="fill: #949493;" />      <path        d="M108.37,197.75c-.26-.44-.66-.51-1.21-.21-.57-.94-.91-1.95-1.04-3.04-.58-1.56-3.47-14.62-1.36-14.31,.19,.02,.36,.2,.44,.45,1.8,5.57,2.86,11.27,3.17,17.11Z"        style="fill: #767575;" />      <path        d="M112.95,191.5c.74,2.33,.49,2.67-.74,1.01-.15-.2-.27-.43-.37-.7-.74-2.09-1.78-4.11-3.11-6.06l-.62-5.41c1.95,3.59,3.57,7.31,4.84,11.16Z"        style="fill: #a2a2a2;" />      <path        d="M33.11,205.97c-.17,2.91-.41,5.83-.74,8.74-.02,.25-.25,.64-.51,.48-.09-.05-.18-.23-.23-.47l-.58-2.86c-.18-.85-.58-.93-1.2-.23-3.44,3.85-1.52-2-.09-3.09,.26-.21,.4-.51,.37-.8l-1.01-8.74v-6.5c.94-4.15,3.27-7.23,7-9.25,.62,7.74-.38,15.31-3.01,22.72Z"        style="fill: #272726;" />      <path        d="M12.9,184.99c-.92,5.47-3.19,9.95-6.8,13.45-.33,.31-.62,.52-.88,.62-.12,.03-.23,.05-.34,.08h-.02c-.47,0-.8-.46-.99-1.39,3.1-4.78,4.22-8.97,9.03-12.76Z"        style="fill: #585857;" />      <path        d="M41.63,201.88c-.06,.78-.36,.88-.91,.29l-1.77-1.92c.05-.57-.21-1.21-.78-1.91l.28-12.59c.64-.01,.97,.32,1,1,1.85,4.73,2.58,9.77,2.18,15.13Z"        style="fill: #959594;" />      <path        d="M106.12,194.5c.13,1.09,.47,2.1,1.04,3.04,.24,2.57,.99,5.14,2.25,7.71,2.15,4.37,3.55,9.12,4.21,14.25h-.59s-6.37-7.79-6.37-7.79c-3.38-4.15-4.42-8.95-3.13-14.39,.15-.6,.56-1.1,1.13-1.35,.86-.37,1.04-.78,.54-1.22,.34,.05,.65-.03,.92-.25Z"        style="fill: #212120;" />      <path        d="M108.37,197.75c.4,.51,1.06,.85,1.97,1,3.06,4.29,5.33,9.04,6.81,14.23l-5.64-8.15c-.5-.72-.62-.67-.35,.16l2.25,7.05c.1,.54,2.33,9.05,.21,7.46-.66-5.13-2.06-9.88-4.21-14.25-1.26-2.57-2.01-5.14-2.25-7.71,.55-.3,.95-.23,1.21,.21Z"        style="fill: #bdbdbc;" />      <path        d="M69.89,213.51l-1.19,12.74-3.08,25.5c-1.24,5.85-2.07,11.77-2.5,17.75-.85,1.54-1.14,3.1-.86,4.69l-3.6,14.35c-1.41,.6-2.18,.17-2.29-1.29,3.62-10.86,4.79-22.45,6.29-33.75,.12-.9-.03-.96-.44-.19-2.76,5.21-5.26,10.93-7.5,17.18-.15,.41-.19,.83-.13,1.26,.22,1.59,.91,6.74-.4,7.5-.04,.03-.09,.04-.14,.04-.04,0-.09,0-.13-.03-.04-.02-.08-.05-.11-.08-.03-.02-.04-.05-.06-.08,0,0-.01-.02-.01-.03-.02-.04-.03-.08-.03-.13-.1-3.89-1.25-7.66-.11-11.38,1.2-3.92,4.72-14.63,8.34-17.82,.27-.24,.43-.53,.46-.8,1.13-10.39,2.3-19.53,3.51-27.44,.74-4.84,.75-9.51,.04-14,2.15,.55,2.44-3.07,3.56-4.49,1.68,1.6,.16,7.39,.38,10.5Z"        style="fill: #171717;" />      <path        d="M38.6,217.94c0,.31-.08,.62-.24,.93-.65,1.29-.9,2.67-.74,4.13-.43-.11-.77-.03-1,.25l-1.96-.79,.54-1.21,3.5-17.5c.32-.04,.6,.02,.84,.17,.23,.14,.39,.45,.42,.83,.32,4.34-1.33,8.47-1.36,13.19Z"        style="fill: #787777;" />      <path d="M117.15,212.98c-.36,1.43-2.36-.8-3.74-.94l-2.25-7.05c-.27-.83-.15-.88,.35-.16l5.64,8.15Z"        style="fill: #4b4a4a;" />      <path        d="M35.2,221.25l-.54,1.21c-1.01,.17-1.6,.77-1.76,1.79-.53,3.4-1.48,6.64-2.84,9.71-1.49,2.76-3.39,5.16-5.68,7.21-.31-8.99,2.7-16.63,9.03-22.92,.75-.75,1.23-.48,1.44,.81l.35,2.19Z"        style="fill: #313130;" />      <path        d="M73.66,233.29c.96,6.01,2.13,11.95,2.9,17.99,.19,1.47,.55,3.3,1.1,5.47,4.1,16.38,8.86,33.16,10.5,50,.29,2.94,.97,6.11,2.04,9.5l4,20.25c-.24,.29-.35,.63-.33,1-.47,.19-.94,.27-1.42,.25-1.14-8.11-2.78-16.11-4.91-24.02-.09-.33-.16-.32-.21,0-.81,5.11-.48,10.13,1.01,15.07,.17,.58,.15,1.82-.52,.61-5.17-9.44-.14-18.83-2.7-28.34-.7-4.71-1.62-9.32-2.77-13.81-4.75-18.57-9.06-37.25-12.91-56.03-.3-1.48-.38-2.98-.24-4.49l1.26-5.34c.08-.35,.32-.61,.6-.65,.69-.1,1.7,8.22,2.6,12.53Z"        style="fill: #1c1c1c;" />      <path        d="M34.91,241.96c-.3,.28-.48,.63-.54,1.04-1.28,1.94-2.31,4.16-3.09,6.67-.13,.43-.25,.43-.34-.01-1.13-5.61-1.42-10.85-.88-15.7,1.36-3.07,2.31-6.31,2.84-9.71,.16-1.02,.75-1.62,1.76-1.79l1.96,.79c.81,6.38,.24,12.62-1.71,18.71Z"        style="fill: #272726;" />      <path d="M37.62,223c3.16,5.61,3.56,14.95-2.71,18.96,1.95-6.09,2.52-12.33,1.71-18.71,.23-.28,.57-.36,1-.25Z"        style="fill: #949493;" />      <path d="M69.04,330.09l.08,1.41c-.15-.56-.18-1.04-.08-1.41Z" style="fill: #606060;" />      <path d="M27.6,300.67c-.19,.19-.42,.38-.69,.57,.23-.2,.46-.39,.69-.57Z" style="fill: #515150;" />      <path        d="M79.54,253.37c4.51,8.12,7.84,15.7,9.99,22.73,.16,.51,.08,1.72-.57,.16-3.05-7.32-6.7-15.15-10.96-23.48-.27-.51-.12-1.15,.34-1.5,.18-.13,.33-.01,.45,.36,.19,.6,.44,1.18,.75,1.73Z"        style="fill: #212120;" />      <path        d="M70.95,407.25c0,1.87-.58,2.21-1.75,1l-1.04-11.01c-.23-2.45-.66-2.49-1.27-.13-.71,2.75-1.3,5.63-1.77,8.64-.42,.32-.89,.49-1.42,.5,.24-1.89,.54-3.76,.9-5.62,.81-4.13-.16-8.37,.1-12.63,.04-.32,.08-.64,.13-.96,.97-7.19,2.96-14.51,2.81-21.5-.1-4.61-.44-9.21-1.02-13.79-.1-3.83,.51-8.83-.17-10.1-.18-.33-.32-.31-.41,.08-.8,3.25-1.48,6.53-2.03,9.84-.25,1.47-.68,1.62-1.31,.43,.19-4.37,.96-8.62,2.3-12.77,.1-.31,.11-.64,.03-.97-.56-2.17-.66-4.82-.31-7.95,1.09-9.51,1.27-19.81,.56-30.92-.42-6.56,.19-13.48-.12-19.64-.47-9.32-.07-18,1.19-26.04,.92,3.2,1.36,6.88,1.31,11.04-.07,6.7,.18,15.45,.75,26.25,.26,4.91,.23,13.73-.09,26.48-1.23,6.64-1.04,13.23,.55,19.76-.22,10.15,.13,20.23,1.04,30.26,.87,9.54-.14,26.5,1.04,39.75Z"        style="fill: #1c1c1c;" />      <path        d="M63.91,284c-.73,4.83-.98,.23-.98,.13,.19-3.37-.04-6.68-.67-9.94-.28-1.59,.01-3.15,.86-4.69,1.05,6.17,1.32,11,.79,14.5Z"        style="fill: #2c2c2c;" />      <path        d="M58.2,289.75l-1.83,6.25-.75,2.25-6.96,9.93c-1.17-4.11-.37-7.84,2.39-11.19,.69-.83,.54-1.02-.43-.56-5.41,2.52-11.24,3.09-15.27,9.01-2.59,3.8-5.93,7.55-10.01,11.25l4.17-9.89c5.47-4.15,9.3-7.96,16.67-10.26,5.03-1.15,8.43-4.25,10.19-9.29,.11,1.46,.88,1.89,2.29,1.29-.39,.31-.54,.72-.46,1.21Z"        style="fill: #343433;" />      <path d="M62.45,295.49l-2.83,5.51c-1.69-1.25-2.77-2.92-3.25-5l1.83-6.25c1.72,1.59,3.14,3.51,4.25,5.74Z"        style="fill: #edecec;" />      <path        d="M62.45,295.49c-.09,4.17-.74,8.24-1.95,12.21-.11,.34-.25,.37-.44,.08-1.14-1.77-1.29-3.69-.44-5.78v-1l2.83-5.51Z"        style="fill: #2e2e2e;" />      <path        d="M46.18,296.54c-7.37,2.3-11.2,6.11-16.67,10.26-4.28,2.46-8.48,4.47-12.61,6.02-.79,.29-.94,.1-.45-.59,3.15-4.35,6.63-8.01,10.46-10.99,.23-.2,.46-.39,.69-.57,3-2.39,6.36-3.95,10.06-4.67,1.24-.24,4.08-.06,8.52,.54Z"        style="fill: #aeadad;" />      <path        d="M53.34,305.07l-4.47,7.18-.92,1.75c-.11-.22-.29-.23-.54-.04,.85-2.06,1.26-3.99,1.25-5.78l6.96-9.93c.2,2.6-.56,4.87-2.28,6.82Z"        style="fill: #676666;" />      <path        d="M47.95,314c-.69,1.25-1.1,2.58-1.25,4l-1.39,3.97c-2.57,3.45-5.39,6.58-8.46,9.38-.25,.23-.32,.19-.19-.12,1.87-4.46,4.36-8.55,7.46-12.27,1.29-1.55,2.38-3.21,3.29-5,.25-.19,.43-.18,.54,.04Z"        style="fill: #b8b8b8;" />      <path        d="M68.32,317.48l.8,14.02c1.32,5.25,3.67,13.34,7.04,24.25,1.43,4.63,1.44,9.54,.04,14.75-.24-6.63-1.09-12.38-2.54-17.25-1.59-5.35-3.19-10.68-4.79-16.01-1.59-6.53-1.78-13.12-.55-19.76Z"        style="fill: #2e2e2e;" />      <path        d="M94.2,336.5l5.94,7.25c4.39,6.47,6.63,13.62,6.71,21.45,0,.66-.23,.76-.7,.29-4.53-4.49-7.83-9.81-9.89-15.97-1.44-3.77-2.24-7.77-2.39-12.02-.02-.37,.09-.71,.33-1Z"        style="fill: #606060;" />      <path        d="M93.87,337.5c.15,4.25,.95,8.25,2.39,12.02,.42,4.94,.47,8.18,.15,9.73-.46,2.25-.71,4.52-.75,6.82,0,.25-.3,1.21-.53,.13-.57-2.64-1.11-5.29-1.62-7.95-.06-.31-.17-.32-.33-.05l-3.31,5.8c-1.14-6.78-1.69-16.18,1.98-22.81,.37-.68,.57-1.83,.6-3.44,.48,.02,.95-.06,1.42-.25Z"        style="fill: #393939;" />      <path        d="M66.62,351.75c-1.65,2.77-3.77,5.19-6.35,7.26,1.5-2.15,2.31-4.48,2.43-7.01,.63,1.19,1.06,1.04,1.31-.43,.55-3.31,1.23-6.59,2.03-9.84,.09-.39,.23-.41,.41-.08,.68,1.27,.07,6.27,.17,10.1Z"        style="fill: #585857;" />      <path d="M64.83,387.04c.01,.29-.03,.61-.13,.96,.04-.32,.08-.64,.13-.96Z" style="fill: #676666;" />      <path        d="M57.92,359.54c-1.88,3.71-4.57,6.35-8.07,7.9-.47,.2-1.28,.9-2.44,2.1l-.29-.33c-.14-.16-.08-.47,.15-.7,3.26-3.33,6.81-6.32,10.65-8.97Z"        style="fill: #767575;" />      <path        d="M59.37,361.54c-1.7,6.61-5.14,12.08-10.31,16.43-.26,.32-2.13,2-2.33,1.34-.07-.24,.07-.56,.37-.81,3.01-2.6,3.47-6.24,5.66-9.52,.1-.15,.12-.33,.06-.42,0-.02,0-.03-.03-.04-.01,0-.01-.01-.02-.01-.6-.29-6.42,5.41-7.14,6.15-.37,.37-.55,.3-.54-.23,.04-2.07,.81-3.7,2.32-4.89,1.16-1.2,1.97-1.9,2.44-2.1,3.5-1.55,6.19-4.19,8.07-7.9,.91,.75,1.4,1.42,1.45,2Z"        style="fill: #434242;" />      <path        d="M75.87,371.25l1.99,10.42-1.74,3.83c-1.1,1.23-2.34,2.11-3.72,2.65-.18,.08-.39,0-.47-.19-.02-.05-.03-.1-.03-.15,.09-6.03,1.42-11.55,3.97-16.56Z"        style="fill: #4b4a4a;" />      <path        d="M77.86,381.67c2.19,3.8,3.3,7.91,3.34,12.33-.14,.48-.39,.82-.75,1.02-.28,.16-.64,.06-.8-.21l-1.99-3.35-1.54-5.96,1.74-3.83Z"        style="fill: #8a8a89;" />      <path        d="M82.57,386.9c4.63,4.55,6.61,10.07,5.96,16.57-.08,.72,1.31,3.69-1.08,1.49-.65-.6-1.3-1.15-1.97-1.65-.57-.43-.84-.29-.83,.42,.01,.78-.13,1.25-.44,1.42-.18,.1-.45-.06-.6-.37-.01-.02-.02-.05-.03-.07l-2.7-6.76c-.09-.23,.01-.5,.24-.63,.45-.26,.65-.7,.58-1.32,.13,.97,.5,1.25,1.09,.83,.23-.17,.38-.48,.41-.83,.19-2.99-.02-6.03-.63-9.1Z"        style="fill: #696969;" />      <path        d="M65.12,405.75l-.25,4c-1.27,5.93-4.13,10.78-8.6,14.55-.78,.65-1.23,.48-1.36-.53-.94-7.44,3.97-11.45,8.79-17.52,.53-.01,1-.18,1.42-.5Z"        style="fill: #343433;" />      <path        d="M67.97,447.59c-.31-6.01,.22-11.91,1.58-17.7,1.06-4.52-.83-7.54-.47-11.93,.25-3.23,.29-6.47,.12-9.71,1.17,1.21,1.75,.87,1.75-1h.17l.16,6.89c-.47,.8-.5,1.69-.09,2.66,.12,.3,.14,.62,.04,.92l-.53,1.53,2,11c.04,.83-.5,19.57-4.73,17.34Z"        style="fill: #313130;" />      <path        d="M77.91,423.75c-.69,1.15-1.67,1.13-2.94-.06-.57-.54-1.25-.77-2.02-.69-.5-1.41-1.25-2.66-2.25-3.75l.53-1.53c.1-.3,.08-.62-.04-.92-.41-.97-.38-1.86,.09-2.66l7.42,4.86c.36,1.69,.1,3.27-.79,4.75Z"        style="fill: #454544;" />      <path        d="M64.91,420.46c-1.35,5.45-3.9,10.26-7.66,14.42-.27,.31-.44,.27-.51-.1-.05-.31,.01-.64,.18-.99,2.93-5.8,5.16-10.67,6.68-14.6,.2-.53,.54-.76,1.02-.69l.29,1.96Z"        style="fill: #292929;" />      <path        d="M87.74,436.21c-5.84-2.66-12.3-7.09-14.79-13.21,.77-.08,1.45,.15,2.02,.69,1.27,1.19,2.25,1.21,2.94,.06,.89-1.48,1.15-3.06,.79-4.75,2.47,1.62,4.21,3.79,5.21,6.5,2.03,3.34,3.31,6.91,3.83,10.71Z"        style="fill: #606060;" />      <path        d="M70.87,460c-.35,.03-.56-.07-.65-.31-1.26-3.77-2.01-7.81-2.25-12.1,4.23,2.23,4.77-16.51,4.73-17.34,6.32,10.51,5.19,20.1-1.83,29.75Z"        style="fill: #636262;" />    </svg>    <div class="shadow"></div>    <div class="lantern" onclick="this.parentNode.classList.toggle('on');">      <div class="leaf">        <div class="leaf">          <div class="leaf">            <div class="leaf">              <div class="leaf">                <div class="leaf">                  <div class="leaf">                  </div>                </div>              </div>            </div>          </div>        </div>      </div>    </div>    <div class="top-line"></div>    <div class="top-circle"></div>    <div class="top"></div>    <div class="bottom"></div>  </div>  <div class="footer">    Made by: RafaQ  </div></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E9%9C%93%E8%99%B9%E7%81%AF.html"/>
      <url>/HEXO/html/%E9%9C%93%E8%99%B9%E7%81%AF.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>霓虹灯</title>    <style>        *{border:0;box-sizing:border-box;margin:0;padding:0}:root{--hue:223;--off-hue:3;--on-hue1:123;--on-hue2:168;--fg:hsl(var(--hue),10%,90%);--primary:hsl(var(--hue),90%,50%);--trans-dur:0.6s;--trans-timing:cubic-bezier(0.65,0,0.35,1);font-size:calc(40px + (60 - 40) * (100vw - 320px) / (2560 - 320))}body,input{font:1em/1.5 sans-serif}body{background-image:linear-gradient(45deg,hsl(var(--hue),10%,20%),hsl(var(--hue),10%,10%));color:var(--fg);display:flex;height:100vh;transition:background-color var(--trans-dur),color var(--trans-dur)}.switch,.switch__input{-webkit-tap-highlight-color:#0000}.switch{display:block;margin:auto;position:relative;width:5em;height:3em}.switch__base-outer,.switch__base-inner{display:block;position:absolute}.switch__base-outer{border-radius:1.25em;box-shadow:-0.125em -0.125em 0.25em hsl(var(--hue),10%,30%),0.125em 0.125em 0.125em hsl(var(--hue),10%,30%) inset,0.125em 0.125em 0.25em hsl(0,0%,0%),-0.125em -0.125em 0.125em hsl(var(--hue),10%,5%) inset;top:0.125em;left:0.125em;width:4.75em;height:2.75em}.switch__base-inner{border-radius:1.125em;box-shadow:-0.25em -0.25em 0.25em hsl(var(--hue),10%,30%) inset,0.0625em 0.0625em 0.125em hsla(var(--hue),10%,30%),0.125em 0.25em 0.25em hsl(var(--hue),10%,5%) inset,-0.0625em -0.0625em 0.125em hsla(var(--hue),10%,5%);top:0.375em;left:0.375em;width:4.25em;height:2.25em}.switch__base-neon{display:block;overflow:visible;position:absolute;top:0;left:0;width:100%;height:auto;cursor:pointer}.switch__base-neon path{stroke-dasharray:0 104.26 0;transition:stroke-dasharray var(--trans-dur) var(--trans-timing)}.switch__input{outline:transparent;position:relative;width:100%;height:100%;-webkit-appearance:none;appearance:none}.switch__input:before{border-radius:0.125em;box-shadow:0 0 0 0.125em hsla(var(--hue),90%,50%,0);content:"";display:block;position:absolute;inset:-0.125em;transition:box-shadow 0.15s linear}.switch__input:focus-visible:before{box-shadow:0 0 0 0.125em var(--primary)}.switch__knob,.switch__knob-container{border-radius:1em;display:block;position:absolute;cursor:pointer}.switch__knob{background-color:hsl(var(--hue),10%,15%);background-image:radial-gradient(88% 88% at 50% 50%,hsl(var(--hue),10%,20%) 47%,hsla(var(--hue),10%,20%,0) 50%),radial-gradient(88% 88% at 47% 47%,hsl(var(--hue),10%,85%) 45%,hsla(var(--hue),10%,85%,0) 50%),radial-gradient(65% 70% at 40% 60%,hsl(var(--hue),10%,20%) 46%,hsla(var(--hue),10%,20%,0) 50%);box-shadow:-0.0625em -0.0625em 0.0625em hsl(var(--hue),10%,15%) inset,-0.125em -0.125em 0.0625em hsl(var(--hue),10%,5%) inset,0.75em 0.25em 0.125em hsla(0,0%,0%,0.8);width:2em;height:2em;transition:transform var(--trans-dur) var(--trans-timing)}.switch__knob-container{overflow:hidden;top:0.5em;left:0.5em;width:4em;height:2em}.switch__knob-neon{display:block;width:2em;height:auto}.switch__knob-neon circle{opacity:0;stroke-dasharray:0 90.32 0 54.19;transition:opacity var(--trans-dur) steps(1,end),stroke-dasharray var(--trans-dur) var(--trans-timing)}.switch__knob-shadow{border-radius:50%;box-shadow:0.125em 0.125em 0.125em hsla(0,0%,0%,0.9);display:block;position:absolute;top:0.5em;left:0.5em;width:2em;height:2em;transition:transform var(--trans-dur) var(--trans-timing)}.switch__led{background-color:hsl(var(--off-hue),90%,70%);border-radius:50%;box-shadow:0 -0.0625em 0.0625em hsl(var(--off-hue),90%,40%) inset,0 0 0.125em hsla(var(--off-hue),90%,70%,0.3),0 0 0.125em hsla(var(--off-hue),90%,70%,0.3),0.125em 0.125em 0.125em hsla(0,0%,0%,0.5);display:block;position:absolute;top:0;left:0;width:0.25em;height:0.25em;transition:background-color var(--trans-dur) var(--trans-timing),box-shadow var(--trans-dur) var(--trans-timing)}.switch__text{overflow:hidden;position:absolute;width:1px;height:1px}.switch__input:checked~.switch__led{background-color:hsl(var(--on-hue1),90%,70%);box-shadow:0 -0.0625em 0.0625em hsl(var(--on-hue1),90%,40%) inset,0 -0.125em 0.125em hsla(var(--on-hue1),90%,70%,0.3),0 0.125em 0.125em hsla(var(--on-hue1),90%,70%,0.3),0.125em 0.125em 0.125em hsla(0,0%,0%,0.5)}.switch__input:checked~.switch__base-neon path{stroke-dasharray:52.13 0 52.13}.switch__input:checked~.switch__knob-shadow,.switch__input:checked~.switch__knob-container .switch__knob{transform:translateX(100%)}.switch__input:checked~.switch__knob-container .switch__knob-neon circle{opacity:1;stroke-dasharray:45.16 0 45.16 54.19;transition-timing-function:steps(1,start),var(--trans-timing)}    </style></head><body>    <label class="switch">        <input class="switch__input" type="checkbox" role="switch">        <span class="switch__base-outer"></span>        <span class="switch__base-inner"></span>        <svg class="switch__base-neon" viewBox="0 0 40 24" width="40px" height="24px">            <defs>                <filter id="switch-glow">                    <feGaussianBlur result="coloredBlur" stddeviation="1"></feGaussianBlur>                    <feMerge>                        <feMergeNode in="coloredBlur"></feMergeNode>                        <feMergeNode in="SourceGraphic"></feMergeNode>                    </feMerge>                </filter>                <linearGradient id="switch-gradient1" x1="0" y1="0" x2="1" y2="0">                    <stop offset="0%" stop-color="hsl(var(--on-hue1),90%,70%)" />                    <stop offset="100%" stop-color="hsl(var(--on-hue2),90%,70%)" />                </linearGradient>                <linearGradient id="switch-gradient2" x1="0.7" y1="0" x2="0.3" y2="1">                    <stop offset="25%" stop-color="hsla(var(--on-hue1),90%,70%,0)" />                    <stop offset="50%" stop-color="hsla(var(--on-hue1),90%,70%,0.3)" />                    <stop offset="100%" stop-color="hsla(var(--on-hue2),90%,70%,0.3)" />                </linearGradient>            </defs>            <path fill="none" filter="url(#switch-glow)" stroke="url(#switch-gradient1)" stroke-width="1"                stroke-dasharray="0 104.26 0" stroke-dashoffset="0.01" stroke-linecap="round"                d="m.5,12C.5,5.649,5.649.5,12,.5h16c6.351,0,11.5,5.149,11.5,11.5s-5.149,11.5-11.5,11.5H12C5.649,23.5.5,18.351.5,12Z" />        </svg>        <span class="switch__knob-shadow"></span>        <span class="switch__knob-container">            <span class="switch__knob">                <svg class="switch__knob-neon" viewBox="0 0 48 48" width="48px" height="48px">                    <circle fill="none" stroke="url(#switch-gradient2)" stroke-dasharray="0 90.32 0 54.19"                        stroke-linecap="round" stroke-width="1" r="23" cx="24" cy="24"                        transform="rotate(-112.5,24,24)" />                </svg>            </span>        </span>        <span class="switch__led"></span>        <span class="switch__text">Power</span>    </label></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E9%B1%BC%E7%BC%B8.html"/>
      <url>/HEXO/html/%E9%B1%BC%E7%BC%B8.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>养个鱼</title>    <style>      html{font-size:5vh;}@media screen and (min-height:400px){html{font-size:19px;}}body{display:flex;justify-content:center;align-items:center;height:100vh;background-color:#eb80b1;}@keyframes swimming{0%,100%{transform:translateX(0);}22.5%{transform:translateX(2.5rem) skewY(-5deg);}45%{transform:translateX(6rem) translateY(-1rem) skewY(5deg);}55%{transform:translateX(5rem) translateY(-0.5rem) scaleX(-1);}95%{transform:translateX(0) scaleX(-1) skewY(10deg);}}@keyframes dead{0%,100%{transform:translateX(2.5rem);}22.5%{transform:translateX(2.5rem) translateY(-1rem) skewY(-5deg);}45%{transform:translateX(2.5rem) skewY(5deg);}55%{transform:translateX(2.5rem) translateY(-1rem) skewY(-5deg);}95%{transform:translateX(2.5rem) skewY(5deg);}}.fishbowl{position:relative;width:15rem;height:15rem;}.fishbowl__background{position:relative;width:100%;height:100%;border-radius:50% 50% 40% 40%;background:linear-gradient(transparent 10%,#fff 150%);border-bottom:1px solid #fff;}.fishbowl:before{content:'';position:absolute;bottom:9.5rem;left:2rem;width:100%;height:30%;border-radius:50%;box-shadow:-4rem 10rem 1rem 0 rgba(0,0,56,0.3);transform:rotate(5deg);}.fishbowl:after{content:'';position:absolute;top:12.5%;left:2.5%;width:95%;height:85%;border-radius:40%;background:linear-gradient(135deg,transparent 50%,#fff 150%);}.fishbowl__bottom{position:absolute;bottom:5%;left:17.5%;width:65%;height:20%;border-radius:50%;background:linear-gradient(#f5fccd,#ff7d66 200%);}.fishbowl__decoration{position:absolute;top:20%;left:5%;width:90%;height:75%;}.fishbowl__seaweed{position:absolute;width:0;height:0;border-left:0.5rem solid transparent;border-right:0.5rem solid transparent;border-bottom:5rem solid #80c0a1;}.fishbowl__seaweed--1{bottom:15%;right:20%;border-bottom:5rem solid #80c0a1;}.fishbowl__seaweed--2{bottom:10%;right:30%;border-bottom:8rem solid #80c0a1;}.fishbowl__seaweed--3{bottom:15%;right:40%;border-bottom:6rem solid #80c0a1;}.fishbowl__water{position:absolute;bottom:5%;left:5%;width:90%;height:80%;border-radius:40% 40% 4.8rem 4.8rem;transition:height 0.3s ease;overflow:hidden;}.fishbowl__water-color{position:absolute;bottom:0;left:0;width:100%;height:calc(1% * var(--filling,90));background:linear-gradient(transparent -50%,#419197 250%);border-radius:20% 20% 4rem 4rem;transition:height 0.5s linear;}.fishbowl__water-color:after{content:'';position:absolute;top:0;left:5%;width:90%;height:3rem;border-radius:50%;background:linear-gradient(transparent 0%,#419197 250%);box-shadow:inset 0 -1px 0 0 rgba(255,255,255,0.5);}.fishbowl__top{position:absolute;top:5%;left:15%;width:70%;height:20%;border-radius:50%;box-shadow:0 2px 2px 3px rgba(255,255,255,0.3);}.fishbowl__fish{position:absolute;bottom:25%;left:18%;width:2rem;height:1rem;border-radius:50%;background:linear-gradient(#fff -200%,orange);box-shadow:0 2rem 4px -2px rgba(0,0,56,0.3);transition-property:bottom,transform,box-shadow;transition-duration:1s;transition-timing-function:ease;animation:swimming;animation-duration:5s;animation-iteration-count:infinite;animation-fill-mode:forwards;}.fishbowl__fish:after{content:'';position:absolute;top:15%;right:15%;width:0.25rem;height:0.25rem;border-radius:50%;background:radial-gradient(circle at 0 0,#fff -100%,#12486b);transition:height 0.5s ease;}.fishbowl__fish--dying{bottom:10%;box-shadow:0 1rem 4px -2px rgba(0,0,56,0.3);}.fishbowl__fish--dying .fishbowl__fish-tail{box-shadow:0 1rem 4px -2px rgba(0,0,56,0.3);}.fishbowl__fish--dead{animation:dead;animation-duration:2s;animation-iteration-count:2;animation-fill-mode:forwards;box-shadow:none;}.fishbowl__fish--dead .fishbowl__fish-tail{box-shadow:none;}.fishbowl__fish--dead:after{height:0.125rem;}.fishbowl__fish--floating{bottom:max(calc(var(--filling,0) * 1% - 15%),10%);transform:translateX(2.5rem);animation:none;box-shadow:none;}.fishbowl__fish--floating:after{height:2px;}.fishbowl__fish--floating .fishbowl__fish-tail{box-shadow:none;}.fishbowl__fish-tail{position:absolute;top:0;left:-0.75rem;width:0;height:0;border-top:0.5rem solid transparent;border-bottom:0.5rem solid transparent;border-left:0.94rem solid orange;box-shadow:0 2rem 4px -2px rgba(0,0,56,0.3);transition:box-shadow 1s ease;}.fishbowl__pool{position:absolute;right:0;bottom:-5%;width:50%;height:15%;border-radius:50%;background:linear-gradient(#fff -100%,#419197);opacity:0.5;}.fishbowl__pool:after{content:'';position:absolute;top:25%;left:25%;width:50%;height:50%;border-right:2px solid #fff;border-radius:50%;animation:wave;animation-duration:3s;animation-iteration-count:infinite;opacity:0.5;}@keyframes wave{from{top:25%;left:25%;width:50%;height:50%;}to{top:10%;left:10%;width:80%;height:80%;}}.fishbowl__tap{position:absolute;bottom:0;left:-3rem;width:12rem;height:15.9rem;cursor:pointer;}.fishbowl__tap--active .fishbowl__tap-stream{animation:stream;animation-duration:0.5s;}@keyframes stream{0%{height:0;}50%{top:2rem;height:calc(14rem - var(--filling) * 0.1rem);}100%{top:calc(2rem + 14rem - var(--filling) * 0.1rem);height:0;}}.fishbowl__tap--active .fishbowl__tap-handle{animation:handle;animation-duration:0.5s;}@keyframes handle{from{transform:rotate(45deg);}to{transform:rotate(405deg);}}.fishbowl__tap-base{position:absolute;bottom:0;left:0;width:2rem;height:14rem;border-radius:0 0 1.2rem 1.2rem;box-shadow:inset -1px -1px 0 0px rgba(255,255,255,0.5);background:linear-gradient(#919ea3,#66777f 150%);}.fishbowl__tap-base:before{content:'';position:absolute;z-index:-1;bottom:4rem;right:15rem;width:100%;height:100%;border-radius:1rem 1rem 0 0;box-shadow:-4rem 10rem 1rem 0 rgba(0,0,56,0.3);transform:rotate(-70deg);}.fishbowl__tap-base:after{content:'';position:absolute;bottom:0;left:0;width:100%;height:100%;background:linear-gradient(          90deg,transparent,rgba(255,255,255,0.4) 60%,transparent 200%        );border-radius:0 0 1.2rem 1.2rem;}.fishbowl__tap-handle{position:absolute;left:-1rem;bottom:6rem;width:2rem;height:2rem;border-radius:0.2rem;border-top:1px solid #fff;border-right:1px solid rgba(255,255,255,0.5);background:radial-gradient(circle at 0 0,#fff -100%,#919ea3);transform:rotate(45deg);}.fishbowl__tap-handle:after{content:'';position:absolute;top:0.5rem;left:0.5rem;width:1rem;height:1rem;border-radius:50%;background:radial-gradient(circle at 0 0,#fff -200%,#419197);}.fishbowl__tap-stream{position:absolute;top:2rem;left:6.25rem;width:1.5rem;height:0;background:linear-gradient(#fff -100%,#419197);border-radius:1rem;opacity:0.3;}.fishbowl__tap-head{position:absolute;top:0;left:0;width:4rem;height:0rem;border-radius:50% 50% 0 0;border-top:2rem solid #919ea3;border-left:2rem solid #919ea3;border-right:2rem solid #919ea3;box-shadow:1px -1px 0 0 #fff;}.fishbowl__tap-head:before{content:'';position:absolute;z-index:-1;bottom:3rem;right:23rem;width:150%;height:200%;box-shadow:-4rem 10rem 1rem 1rem rgba(0,0,56,0.3);transform:rotate(2deg) skewX(60deg);}.fishbowl__tap-head:after{content:'';position:absolute;top:-2rem;left:-2rem;width:8rem;height:2rem;background:linear-gradient(          transparent,rgba(255,255,255,0.4) 60%,transparent 200%        );border-radius:50% 50% 0 50%;}.fishbowl__tap-end{position:absolute;left:6rem;top:1.5rem;width:2rem;height:1rem;border-radius:50%;background:linear-gradient(#fff -70%,#919ea3);}.fishbowl__tap-text{position:absolute;top:4rem;left:-6rem;color:#fff;font-family:'Arial',sans-serif;font-size:0.875rem;}.fishbowl__tap-text:after{content:'';position:absolute;bottom:-1rem;right:-1rem;width:2rem;height:1px;background-color:#fff;transform:rotate(45deg);}@media screen and (max-width:420px){.fishbowl{left:13%;}.fishbowl__tap-text{width:2rem;top:1rem;left:-3.5rem;}}</style>  </head>  <body>    <div id="fishbowl"class="fishbowl"><div class="fishbowl__pool"></div><div class="fishbowl__background"></div><div class="fishbowl__bottom"></div><div class="fishbowl__decoration"><div class="fishbowl__seaweed fishbowl__seaweed--1"></div><div class="fishbowl__seaweed fishbowl__seaweed--2"></div><div class="fishbowl__seaweed fishbowl__seaweed--3"></div></div><div class="fishbowl__water"><div id="fish"class="fishbowl__fish"><div class="fishbowl__fish-tail"></div></div><div class="fishbowl__water-color"></div></div><div class="fishbowl__top"></div><div id="tap"class="fishbowl__tap"><div class="fishbowl__tap-base"></div><div class="fishbowl__tap-handle"></div><div class="fishbowl__tap-stream"></div><div class="fishbowl__tap-end"></div><div class="fishbowl__tap-head"></div><div class="fishbowl__tap-text">加点水吧</div></div></div>    <script>let fill=90;let intervalId=null;const fishbowl=document.getElementById('fishbowl');const fish=document.getElementById('fish');const tap=document.getElementById('tap');const emptyingFn=()=>setInterval(()=>{fill=fill-1;fishbowl.style=`--filling:${fill}`;if(fill<=0){clearInterval(intervalId)}else if(fill<20){fish.classList.add('fishbowl__fish--dead')}else if(fill<50){fish.classList.add('fishbowl__fish--dying')}else{fish.classList.remove('fishbowl__fish--dying');fish.classList.remove('fishbowl__fish--dead')}},200);intervalId=emptyingFn();tap.addEventListener('click',()=>{tap.classList.add('fishbowl__tap--active');setTimeout(()=>tap.classList.remove('fishbowl__tap--active'),500);if(fill<=0){intervalId=emptyingFn();fish.classList.add('fishbowl__fish--floating')}fill=Math.min(fill+20,90)});</script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E9%9C%93%E8%99%B9%E7%81%AF%E6%95%B0%E5%AD%97%E6%97%B6%E9%92%9F.html"/>
      <url>/HEXO/html/%E9%9C%93%E8%99%B9%E7%81%AF%E6%95%B0%E5%AD%97%E6%97%B6%E9%92%9F.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>霓虹灯数字时钟</title>  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>  <style>    .overlay-content {position: fixed ;top: 0;left: 0;width: 100vw;height: 100vh;z-index: 99999; /* 非常高的值以确保覆盖全局 */background-color: black; /* 根据需要设置背景色 */overflow: auto; /* 允许内容滚动 */}    *{margin:0;padding:0;box-sizing:border}body{display:flex;justify-content:center;align-items:center;min-height:100vh;overflow:hidden;background:#2f363e}.clock{position:relative;width:280px;height:280px;display:flex;justify-content:center;align-items:center;scale:2;box-shadow:inset 5px 5px 25px rgba(0,0,0,0.25);border-radius:50%}#time{position:relative;width:250px;height:250px;display:flex;justify-content:center;align-items:center}#time .circle{position:absolute;display:flex;justify-content:center;align-items:center}#time .circle svg{position:relative;transform:rotate(270deg)}#time .circle:nth-child(1) svg{width:250px;height:250px}#time .circle:nth-child(2) svg{width:210px;height:210px}#time .circle:nth-child(3) svg{width:170px;height:170px}#time .circle svg circle{width:100%;height:100%;fill:transparent;stroke-width:5;stroke:var(--clr);transform:translate(5px,5px);opacity:0.25}#time .circle:nth-child(1) svg circle{stroke-dasharray:760;stroke-dashoffset:760}#time .circle:nth-child(2) svg circle{stroke-dasharray:630;stroke-dashoffset:630}#time .circle:nth-child(3) svg circle{stroke-dasharray:510;stroke-dashoffset:510}.dots{position:absolute;width:100%;height:100%;display:flex;align-items:flex-start;justify-content:center;z-index:10}.dots::before{content:"";position:absolute;top:-3px;width:15px;height:15px;background:var(--clr);border-radius:50%;box-shadow:0 0 20px var(--clr),0 0 40px var(--clr),0 0 60px var(--clr),0 0 80px var(--clr)}.niddles{position:absolute;width:200px;height:200px;border-radius:50%;display:flex;justify-content:center;align-items:flex-start;z-index:10}.niddles i{position:absolute;width:2px;background:var(--clr2);height:50%;opacity:0.75;border-radius:6px;transform-origin:bottom;transform:scaleY(0.5)}.niddles.niddles2{width:170px;height:170px;z-index:9}.niddles.niddles2 i{width:3px}.niddles.niddles3{width:140px;height:140px;z-index:8}.niddles.niddles3 i{width:4px}#time span{position:absolute;inset:55px;text-align:center;color:#999;font-family:Cambria,Cochin,Georgia,Times,"Times New Roman",serif;transform:rotate(calc(30deg * var(--i)))}#time span b{font-size:0.75em;font-weight:500;display:inline-block;transform:rotate(calc(-30deg * var(--i)))}  </style></head><body>  <div class="overlay-content">  <div class="clock">    <div id="time">      <div class="circle" style="--clr:#ff2972">        <div class="dots sec_dot"></div>        <svg>          <circle cx="120" cy="120" r="120" id="ss"></circle>        </svg>      </div>      <div class="circle" style="--clr:#fee800">        <div class="dots min_dot"></div>        <svg>          <circle cx="100" cy="100" r="100" id="mm"></circle>        </svg>      </div>      <div class="circle" style="--clr:#04fc43">        <div class="dots hr_dot"></div>        <svg>          <circle cx="80" cy="80" r="80" id="hh"></circle>        </svg>      </div>      <div class="niddles" style="--clr2:#ff2972;" id="sc"><i></i></div>      <div class="niddles niddles2" style="--clr2:#fee800;" id="mn"><i></i></div>      <div class="niddles niddles3" style="--clr2:#04fc43;" id="hr"><i></i></div>      <span style="--i:1;"><b>1</b></span>      <span style="--i:2;"><b>2</b></span>      <span style="--i:3;"><b>3</b></span>      <span style="--i:4;"><b>4</b></span>      <span style="--i:5;"><b>5</b></span>      <span style="--i:6;"><b>6</b></span>      <span style="--i:7;"><b>7</b></span>      <span style="--i:8;"><b>8</b></span>      <span style="--i:9;"><b>9</b></span>      <span style="--i:10;"><b>10</b></span>      <span style="--i:11;"><b>11</b></span>      <span style="--i:12;"><b>12</b></span>    </div>  </div>  </div></body><script>  setInterval(()=>{let hh=document.getElementById("hh");let mm=document.getElementById("mm");let ss=document.getElementById("ss");let sec_dot=document.querySelector(".sec_dot");let min_dot=document.querySelector(".min_dot");let hr_dot=document.querySelector(".hr_dot");let hr=document.getElementById("hr");let mn=document.getElementById("mn");let sc=document.getElementById("sc");let h=new Date().getHours();let m=new Date().getMinutes();let s=new Date().getSeconds();hh.style.strokeDashoffset=510-(510*h)/12;mm.style.strokeDashoffset=630-(630*m)/60;ss.style.strokeDashoffset=760-(760*s)/60;sec_dot.style.transform=`rotateZ(${s*6}deg)`;min_dot.style.transform=`rotateZ(${m*6}deg)`;hr_dot.style.transform=`rotateZ(${h*30}deg)`;hr.style.transform=`rotateZ(${h*30}deg)`;mn.style.transform=`rotateZ(${m*6}deg)`;sc.style.transform=`rotateZ(${s*6}deg)`});</script></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/HEXO/html/%E9%BC%A0%E6%A0%87%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88.html"/>
      <url>/HEXO/html/%E9%BC%A0%E6%A0%87%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en">  <head>    <meta charset="UTF-8" />    <title>鼠标粒子特效</title>    <meta name="viewport" content="width=device-width, initial-scale=1" />    <style>      *{box-sizing:border-box;}html,body{height:100%;}body{overflow:hidden;display:grid;color:white;background:black;}      .overlay-content {position: fixed ;top: 0;left: 0;width: 100vw;height: 100vh;z-index: 99999; /* 非常高的值以确保覆盖全局 */background-color: black; /* 根据需要设置背景色 */overflow: auto; /* 允许内容滚动 */}    </style>  </head>  <body>    <div class="overlay-content">    <pointer-particles></pointer-particles>    <script>class PointerParticle{constructor(spread,speed,component){const{ctx,pointer,hue}=component;this.ctx=ctx;this.x=pointer.x;this.y=pointer.y;this.mx=pointer.mx*0.1;this.my=pointer.my*0.1;this.size=Math.random()+1;this.decay=0.01;this.speed=speed*0.08;this.spread=spread*this.speed;this.spreadX=(Math.random()-0.5)*this.spread-this.mx;this.spreadY=(Math.random()-0.5)*this.spread-this.my;this.color=`hsl(${hue}deg 90%60%)`}draw(){this.ctx.fillStyle=this.color;this.ctx.beginPath();this.ctx.arc(this.x,this.y,this.size,0,Math.PI*2);this.ctx.fill()}collapse(){this.size-=this.decay}trail(){this.x+=this.spreadX*this.size;this.y+=this.spreadY*this.size}update(){this.draw();this.trail();this.collapse()}}class PointerParticles extends HTMLElement{static register(tag='pointer-particles'){if('customElements'in window){customElements.define(tag,this)}}static css=`:host{display:grid;width:100%;height:100%;pointer-events:none}`;constructor(){super();this.canvas;this.ctx;this.fps=60;this.msPerFrame=1000/this.fps;this.timePrevious;this.particles=[];this.pointer={x:0,y:0,mx:0,my:0,};this.hue=0}connectedCallback(){const canvas=document.createElement('canvas');const sheet=new CSSStyleSheet();this.shadowroot=this.attachShadow({mode:'open'});sheet.replaceSync(PointerParticles.css);this.shadowroot.adoptedStyleSheets=[sheet];this.shadowroot.append(canvas);this.canvas=this.shadowroot.querySelector('canvas');this.ctx=this.canvas.getContext('2d');this.setCanvasDimensions();this.setupEvents();this.timePrevious=performance.now();this.animateParticles()}createParticles(event,{count,speed,spread}){this.setPointerValues(event);for(let i=0;i<count;i++){this.particles.push(new PointerParticle(spread,speed,this))}}setPointerValues(event){this.pointer.x=event.x-this.offsetLeft;this.pointer.y=event.y-this.offsetTop;this.pointer.mx=event.movementX;this.pointer.my=event.movementY}setupEvents(){const parent=this.parentNode;parent.addEventListener('click',(event)=>{this.createParticles(event,{count:300,speed:Math.random()+1,spread:Math.random()+50,})});parent.addEventListener('pointermove',(event)=>{this.createParticles(event,{count:20,speed:this.getPointerVelocity(event),spread:1,})});window.addEventListener('resize',()=>this.setCanvasDimensions())}getPointerVelocity(event){const a=event.movementX;const b=event.movementY;const c=Math.floor(Math.sqrt(a*a+b*b));return c}handleParticles(){for(let i=0;i<this.particles.length;i++){this.particles[i].update();if(this.particles[i].size<=0.1){this.particles.splice(i,1);i--}}}setCanvasDimensions(){const rect=this.parentNode.getBoundingClientRect();this.canvas.width=rect.width;this.canvas.height=rect.height}animateParticles(){requestAnimationFrame(()=>this.animateParticles());const timeNow=performance.now();const timePassed=timeNow-this.timePrevious;if(timePassed<this.msPerFrame)return;const excessTime=timePassed%this.msPerFrame;this.timePrevious=timeNow-excessTime;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);this.hue=this.hue>360?0:(this.hue+=3);this.handleParticles()}}PointerParticles.register();</script>    </div>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/HEXO/link/index.html"/>
      <url>/HEXO/link/index.html</url>
      
        <content type="html"><![CDATA[<h1>欢迎各位大佬！</h1><p>期待大家向本站提供友情链接 qwq</p><p>互相欣赏，互相学习</p><h1>友链的格式如下：</h1><pre><code>name: 抚七kilroylink: https://fuqikilroy.github.io/HEXO/avatar: https://bu.dusays.com/2025/09/03/68b7fc642c8da.jpgdescr: 记录与分享技术的每一刻,同时享受生活的点滴</code></pre><h1>一些有趣的网页</h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>picture</title>
      <link href="/HEXO/picture/index.html"/>
      <url>/HEXO/picture/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>说说</title>
      <link href="/HEXO/shuoshuo/index.html"/>
      <url>/HEXO/shuoshuo/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/HEXO/tags/index.html"/>
      <url>/HEXO/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>追 番 列 表</title>
      <link href="/HEXO/zhuifan/index.html"/>
      <url>/HEXO/zhuifan/index.html</url>
      
        <content type="html"><![CDATA[<!-- 这里可以写你要加入的东西，会出现在列表的上方 -->]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>zhuiju</title>
      <link href="/HEXO/zhuiju/index.html"/>
      <url>/HEXO/zhuiju/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
